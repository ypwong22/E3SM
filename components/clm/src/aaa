biogeochem/SoilLittVertTranspMod.F90:    real(r8) :: f_p1(bounds%begc:bounds%endc,1:nlevdecomp+1)       ! water flux for next j
biogeochem/SoilLittVertTranspMod.F90:    real(r8) :: f_m1(bounds%begc:bounds%endc,1:nlevdecomp+1)       ! water flux for previous j
biogeochem/PhenologyMod.F90:  use WaterstateType      , only : waterstate_type
biogeochem/PhenologyMod.F90:     real(r8) :: soilpsi_on      ! critical soil water potential for leaf onset
biogeochem/PhenologyMod.F90:     real(r8) :: crit_offset_swi ! critical number of water stress days to initiate offset
biogeochem/PhenologyMod.F90:     real(r8) :: soilpsi_off     ! critical soil water potential for leaf offset
biogeochem/PhenologyMod.F90:  real(r8) :: crit_onset_swi                ! water stress days for offset trigger
biogeochem/PhenologyMod.F90:  real(r8) :: soilpsi_on                    ! water potential for onset trigger (MPa)
biogeochem/PhenologyMod.F90:  real(r8) :: crit_offset_swi               ! water stress days for offset trigger
biogeochem/PhenologyMod.F90:  real(r8) :: soilpsi_off                   ! water potential for offset trigger (MPa)
biogeochem/PhenologyMod.F90:       waterstate_vars, temperature_vars, crop_vars, canopystate_vars, soilstate_vars, &
biogeochem/PhenologyMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/PhenologyMod.F90:            waterstate_vars, temperature_vars, crop_vars, canopystate_vars, cnstate_vars, &
biogeochem/PhenologyMod.F90:    real(r8):: psi             ! water stress of top soil layer
biogeochem/PhenologyMod.F90:         soilpsi                             =>    soilstate_vars%soilpsi_col                            , & ! Input:  [real(r8)  (:,:) ]  soil water potential in each soil layer (MPa)   
biogeochem/PhenologyMod.F90:         onset_swi                           =>    cnstate_vars%onset_swi_patch                          , & ! Output:  [real(r8) (:)   ]  onset soil water index                            
biogeochem/PhenologyMod.F90:         offset_swi                          =>    cnstate_vars%offset_swi_patch                         , & ! Output:  [real(r8) (:)   ]  offset soil water index                           
biogeochem/PhenologyMod.F90:               ! the accumulated soil water index following the freeze trigger
biogeochem/PhenologyMod.F90:               ! if soils are wet, accumulate soil water index for onset trigger
biogeochem/PhenologyMod.F90:               ! if critical soil water index is exceeded, set onset_flag, and
biogeochem/PhenologyMod.F90:                  ! value, then override the onset_flag set from soil water.
biogeochem/PhenologyMod.F90:               ! if soil water potential lower than critical value, accumulate
biogeochem/PhenologyMod.F90:               ! as stress in offset soil water index
biogeochem/PhenologyMod.F90:                  ! if the offset soil water index exceeds critical value, and
biogeochem/PhenologyMod.F90:                  ! if soil water potential higher than critical value, reduce the
biogeochem/PhenologyMod.F90:                  ! offset water stress index.  By this mechanism, there must be a
biogeochem/PhenologyMod.F90:                  ! sustained period of water stress to initiate offset.
biogeochem/PhenologyMod.F90:       waterstate_vars, temperature_vars, crop_vars, canopystate_vars, cnstate_vars , &
biogeochem/PhenologyMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/PhenologyMod.F90:         wf2                =>    col_ws%wf2                                & ! Output:  [real(r8) (:)]  soil water as frac. of whc for top 0.17 m
biogeochem/PhenologyMod.F90:                    canopystate_vars, temperature_vars, waterstate_vars, cnstate_vars, crop_vars)
biogeochem/PhenologyMod.F90:       canopystate_vars, temperature_vars, waterstate_vars, cnstate_vars, &
biogeochem/PhenologyMod.F90:    type(waterstate_type)  , intent(in) :: waterstate_vars
biogeochem/CNPhenologyBeTRMod.F90:  use WaterstateType      , only : waterstate_type
biogeochem/CNPhenologyBeTRMod.F90:     real(r8) :: soilpsi_on      ! critical soil water potential for leaf onset
biogeochem/CNPhenologyBeTRMod.F90:     real(r8) :: crit_offset_swi ! critical number of water stress days to initiate offset
biogeochem/CNPhenologyBeTRMod.F90:     real(r8) :: soilpsi_off     ! critical soil water potential for leaf offset
biogeochem/CNPhenologyBeTRMod.F90:  real(r8) :: crit_onset_swi                ! water stress days for offset trigger
biogeochem/CNPhenologyBeTRMod.F90:  real(r8) :: soilpsi_on                    ! water potential for onset trigger (MPa)
biogeochem/CNPhenologyBeTRMod.F90:  real(r8) :: crit_offset_swi               ! water stress days for offset trigger
biogeochem/CNPhenologyBeTRMod.F90:  real(r8) :: soilpsi_off                   ! water potential for offset trigger (MPa)
biogeochem/CNPhenologyBeTRMod.F90:       waterstate_vars, temperature_vars, crop_vars, canopystate_vars, soilstate_vars, &
biogeochem/CNPhenologyBeTRMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/CNPhenologyBeTRMod.F90:            waterstate_vars, temperature_vars, crop_vars, canopystate_vars, cnstate_vars, &
biogeochem/CNPhenologyBeTRMod.F90:    real(r8):: psi             ! water stress of top soil layer
biogeochem/CNPhenologyBeTRMod.F90:         soilpsi                             =>    soilstate_vars%soilpsi_col                            , & ! Input:  [real(r8)  (:,:) ]  soil water potential in each soil layer (MPa)
biogeochem/CNPhenologyBeTRMod.F90:         onset_swi                           =>    cnstate_vars%onset_swi_patch                          , & ! Output:  [real(r8) (:)   ]  onset soil water index
biogeochem/CNPhenologyBeTRMod.F90:         offset_swi                          =>    cnstate_vars%offset_swi_patch                         , & ! Output:  [real(r8) (:)   ]  offset soil water index
biogeochem/CNPhenologyBeTRMod.F90:               ! the accumulated soil water index following the freeze trigger
biogeochem/CNPhenologyBeTRMod.F90:               ! if soils are wet, accumulate soil water index for onset trigger
biogeochem/CNPhenologyBeTRMod.F90:               ! if critical soil water index is exceeded, set onset_flag, and
biogeochem/CNPhenologyBeTRMod.F90:                  ! value, then override the onset_flag set from soil water.
biogeochem/CNPhenologyBeTRMod.F90:               ! if soil water potential lower than critical value, accumulate
biogeochem/CNPhenologyBeTRMod.F90:               ! as stress in offset soil water index
biogeochem/CNPhenologyBeTRMod.F90:                  ! if the offset soil water index exceeds critical value, and
biogeochem/CNPhenologyBeTRMod.F90:                  ! if soil water potential higher than critical value, reduce the
biogeochem/CNPhenologyBeTRMod.F90:                  ! offset water stress index.  By this mechanism, there must be a
biogeochem/CNPhenologyBeTRMod.F90:                  ! sustained period of water stress to initiate offset.
biogeochem/CNPhenologyBeTRMod.F90:       waterstate_vars, temperature_vars, crop_vars, canopystate_vars, cnstate_vars , &
biogeochem/CNPhenologyBeTRMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/CNPhenologyBeTRMod.F90:         wf2                =>    col_ws%wf2                                & ! Output:  [real(r8) (:)]  soil water as frac. of whc for top 0.17 m
biogeochem/CNPhenologyBeTRMod.F90:                    canopystate_vars, temperature_vars, waterstate_vars, cnstate_vars, crop_vars)
biogeochem/CNPhenologyBeTRMod.F90:       canopystate_vars, temperature_vars, waterstate_vars, cnstate_vars, &
biogeochem/CNPhenologyBeTRMod.F90:    type(waterstate_type)  , intent(in) :: waterstate_vars
biogeochem/AllocationMod.F90_v1codechg:  use WaterStateType      , only : waterstate_type
biogeochem/AllocationMod.F90_v1codechg:                            soilstate_vars,waterstate_vars)
biogeochem/AllocationMod.F90_v1codechg:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/AllocationMod.F90_v1codechg:    real(r8):: solution_nh4conc(bounds%begc:bounds%endc, 1:nlevdecomp)    ! temp solution concentration g nutrient per m3 water, because VMAX/KM are measured in hydroponic chamber
biogeochem/AllocationMod.F90_v1codechg:                  ! first need to convert concentration to per soil water based
biogeochem/AllocationMod.F90_v1codechg:                  solution_nh4conc(c,j) = sminn_vr(c,j) / (bd(c,j)*2.76 + h2osoi_vol(c,j)) ! convert to per soil water based
biogeochem/AllocationMod.F90_v1codechg:                  solution_pconc(c,j) = solutionp_vr(c,j)/h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90_v1codechg:                  ! first need to convert concentration to per soil water based
biogeochem/AllocationMod.F90_v1codechg:                  solution_nh4conc(c,j) = smin_nh4_vr(c,j) / (bd(c,j)*2.76 + h2osoi_vol(c,j)) ! convert to per soil water based
biogeochem/AllocationMod.F90_v1codechg:                  solution_no3conc(c,j) = smin_no3_vr(c,j) /  h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90_v1codechg:                  solution_pconc(c,j) = solutionp_vr(c,j)/h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90_v1codechg:    real(r8):: W_lim_factor(bounds%begp : bounds%endp)                  ! water stress factor that impact dynamic C allocation
biogeochem/AllocationMod.F90_v1codechg:    subroutine dynamic_plant_alloc( nutrient_scalar, water_scalar, laindex, alloc_leaf, alloc_stem, alloc_froot, woody)
biogeochem/AllocationMod.F90_v1codechg:    ! (2) nutrient/water limited, allocate more C into root
biogeochem/AllocationMod.F90_v1codechg:    real(r8), intent(in) :: water_scalar    !  scalar for water availability
biogeochem/AllocationMod.F90_v1codechg:    w_scalar = max( 0.1_r8, min( 1.0_r8, water_scalar ) )
biogeochem/VegStructUpdateMod.F90:  use WaterStateType       , only : waterstate_type
biogeochem/VegStructUpdateMod.F90:       waterstate_vars, frictionvel_vars, cnstate_vars, &
biogeochem/VegStructUpdateMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/DecompCascadeCNMod.F90:     real(r8) :: minpsi_cn      !minimum soil water potential for heterotrophic resp
biogeochem/DecompCascadeCNMod.F90:     real(r8):: minpsi, maxpsi               ! limits for soil water scalar for decomp
biogeochem/DecompCascadeCNMod.F90:     real(r8):: psi                          ! temporary soilpsi for water scalar
biogeochem/DecompCascadeCNMod.F90:          soilpsi        => soilstate_vars%soilpsi_col    , & ! Input:  [real(r8) (:,:)   ]  soil water potential in each soil layer (MPa)          
biogeochem/DecompCascadeCNMod.F90:          w_scalar       => col_cf%w_scalar  , & ! Output: [real(r8) (:,:)   ]  soil water scalar for decomp                           
biogeochem/DecompCascadeCNMod.F90:          ! calculate function to weight the temperature and water potential scalars
biogeochem/DecompCascadeCNMod.F90:          ! calculate the rate constant scalar for soil water content.
biogeochem/DecompCascadeCNMod.F90:          ! Uses the log relationship with water potential given in
biogeochem/DecompCascadeCNMod.F90:          ! calculate the rate constant scalar for soil water content.
biogeochem/DecompCascadeCNMod.F90:          ! Uses the log relationship with water potential given in
biogeochem/DecompCascadeBGCMod.F90:     real(r8) :: minpsi_bgc   !minimum soil water potential for heterotrophic resp
biogeochem/DecompCascadeBGCMod.F90:    real(r8):: minpsi, maxpsi               ! limits for soil water scalar for decomp
biogeochem/DecompCascadeBGCMod.F90:    real(r8):: psi                          ! temporary soilpsi for water scalar
biogeochem/DecompCascadeBGCMod.F90:         soilpsi        => soilstate_vars%soilpsi_col    , & ! Input:  [real(r8) (:,:)   ]  soil water potential in each soil layer (MPa)          
biogeochem/DecompCascadeBGCMod.F90:         w_scalar       => col_cf%w_scalar  , & ! Output: [real(r8) (:,:)   ]  soil water scalar for decomp                           
biogeochem/DecompCascadeBGCMod.F90:         ! calculate function to weight the temperature and water potential scalars
biogeochem/DecompCascadeBGCMod.F90:         ! calculate the rate constant scalar for soil water content.
biogeochem/DecompCascadeBGCMod.F90:         ! Uses the log relationship with water potential given in
biogeochem/DecompCascadeBGCMod.F90:         ! calculate the rate constant scalar for soil water content.
biogeochem/DecompCascadeBGCMod.F90:         ! Uses the log relationship with water potential given in
biogeochem/FireMod.F90:  use WaterstateType         , only : waterstate_type
biogeochem/FireMod.F90:       atm2lnd_vars, temperature_vars, energyflux_vars, soilhydrology_vars, waterstate_vars, &
biogeochem/FireMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/FireMod.F90:         fsat               =>    soilhydrology_vars%fsat_col               , & ! Input:  [real(r8) (:)     ]  fractional area with water table at surface       
biogeochem/FireMod.F90:         wf                 =>    col_ws%wf                    , & ! Input:  [real(r8) (:)     ]  soil water as frac. of whc for top 0.05 m         
biogeochem/FireMod.F90:         wf2                =>    col_ws%wf2                   , & ! Input:  [real(r8) (:)     ]  soil water as frac. of whc for top 0.17 m         
biogeochem/FatesBGCDynMod.F90:    !         waterstate_inst, crop_inst, cnveg_state_inst, cnveg_nitrogenflux_inst , &
biogeochem/NitrifDenitrifMod.F90:  use WaterStateType      , only : waterstate_type
biogeochem/NitrifDenitrifMod.F90:   real(r8) :: surface_tension_water    !  surface tension of water(J/m^2), Arah an and Vinten 1995
biogeochem/NitrifDenitrifMod.F90:    tString='surface_tension_water'
biogeochem/NitrifDenitrifMod.F90:    NitrifDenitrifParamsInst%surface_tension_water=tempr
biogeochem/NitrifDenitrifMod.F90:       soilstate_vars, waterstate_vars, temperature_vars, ch4_vars, &
biogeochem/NitrifDenitrifMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/NitrifDenitrifMod.F90:    real(r8) :: surface_tension_water ! (J/m^2), Arah and Vinten 1995
biogeochem/NitrifDenitrifMod.F90:    real(r8) :: ratio_diffusivity_water_gas(bounds%begc:bounds%endc,1:nlevdecomp)
biogeochem/NitrifDenitrifMod.F90:         watsat                        =>    soilstate_vars%watsat_col                           , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at saturation (porosity) (nlevgrnd)
biogeochem/NitrifDenitrifMod.F90:         watfc                         =>    soilstate_vars%watfc_col                            , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at field capacity (nlevsoi)
biogeochem/NitrifDenitrifMod.F90:         soilpsi                       =>    soilstate_vars%soilpsi_col                          , & ! Input:  [real(r8) (:,:)  ]  soil water potential in each soil layer (MPa)   
biogeochem/NitrifDenitrifMod.F90:         h2osoi_vol                    =>    col_ws%h2osoi_vol                      , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
biogeochem/NitrifDenitrifMod.F90:         h2osoi_liq                    =>    col_ws%h2osoi_liq                      , & ! Input:  [real(r8) (:,:)  ]  liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
biogeochem/NitrifDenitrifMod.F90:         w_scalar                      =>    col_cf%w_scalar                        , & ! Input:  [real(r8) (:,:)  ]  soil water scalar for decomp                    
biogeochem/NitrifDenitrifMod.F90:         soil_bulkdensity              =>    col_nf%soil_bulkdensity              , & ! Output:  [real(r8) (:,:) ]  (kg soil / m3) bulk density of soil (including water)
biogeochem/NitrifDenitrifMod.F90:      surface_tension_water = NitrifDenitrifParamsInst%surface_tension_water
biogeochem/NitrifDenitrifMod.F90:               r_min(c,j) = 2 * surface_tension_water / (rho_w * grav * abs(soilpsi(c,j)))
biogeochem/NitrifDenitrifMod.F90:               r_max = 2 * surface_tension_water / (rho_w * grav * 0.1_r8)
biogeochem/NitrifDenitrifMod.F90:               ratio_diffusivity_water_gas(c,j) = (d_con_g(2,1) + d_con_g(2,2)*t_soisno(c,j) ) * 1.e-4_r8 / &
biogeochem/NitrifDenitrifMod.F90:                       conc_o2_unsat(c,j)**rij_kro_gamma * (h2osoi_vol(c,j) + ratio_diffusivity_water_gas(c,j) * &
biogeochem/NitrifDenitrifMod.F90:                  r_min_sat = 2._r8 * surface_tension_water / (rho_w * grav * abs(grav * 1.e-6_r8 * sucsat(c,j)))
biogeochem/NitrifDenitrifMod.F90:                          conc_o2_sat(c,j)**rij_kro_gamma * (watsat(c,j) + ratio_diffusivity_water_gas(c,j) * &
biogeochem/NitrifDenitrifMod.F90:            ! total water limitation function (Del Grosso et al., 2000, figure 7a)
biogeochem/CNAllocationBetrMod.F90:  use WaterStateType      , only : waterstate_type
biogeochem/CNAllocationBetrMod.F90:    real(r8):: W_lim_factor(bounds%begp : bounds%endp)                  ! water stress factor that impact dynamic C allocation
biogeochem/CNAllocationBetrMod.F90:    subroutine dynamic_plant_alloc( nutrient_scalar, water_scalar, laindex, alloc_leaf, alloc_stem, alloc_froot, woody)
biogeochem/CNAllocationBetrMod.F90:    ! (2) nutrient/water limited, allocate more C into root
biogeochem/CNAllocationBetrMod.F90:    real(r8), intent(in) :: water_scalar    !  scalar for water availability
biogeochem/CNAllocationBetrMod.F90:    w_scalar = max( 0.1_r8, min( 1.0_r8, water_scalar ) )
biogeochem/SoilLittDecompMod.F90:  use WaterStateType         , only : waterstate_type
biogeochem/SoilLittDecompMod.F90:                temperature_vars, waterstate_vars,              &
biogeochem/SoilLittDecompMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/SoilLittDecompMod.F90:              soilstate_vars, waterstate_vars, temperature_vars, ch4_vars, &
biogeochem/SoilLittDecompMod.F90:               soilstate_vars,waterstate_vars)
biogeochem/SoilLittDecompMod.F90:       waterstate_vars, cnstate_vars, ch4_vars,                                          &
biogeochem/SoilLittDecompMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/AllocationMod.F90:  use WaterStateType      , only : waterstate_type
biogeochem/AllocationMod.F90:                            soilstate_vars,waterstate_vars)
biogeochem/AllocationMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/AllocationMod.F90:    real(r8):: solution_nh4conc(bounds%begc:bounds%endc, 1:nlevdecomp)    ! temp solution concentration g nutrient per m3 water, because VMAX/KM are measured in hydroponic chamber
biogeochem/AllocationMod.F90:                  ! first need to convert concentration to per soil water based
biogeochem/AllocationMod.F90:                  solution_nh4conc(c,j) = sminn_vr(c,j) / (bd(c,j)*2.76 + h2osoi_vol(c,j)) ! convert to per soil water based
biogeochem/AllocationMod.F90:                  solution_pconc(c,j) = solutionp_vr(c,j)/h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90:                  ! first need to convert concentration to per soil water based
biogeochem/AllocationMod.F90:                  solution_nh4conc(c,j) = smin_nh4_vr(c,j) / (bd(c,j)*2.76 + h2osoi_vol(c,j)) ! convert to per soil water based
biogeochem/AllocationMod.F90:                  solution_no3conc(c,j) = smin_no3_vr(c,j) /  h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90:                  solution_pconc(c,j) = solutionp_vr(c,j)/h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90:    real(r8):: W_lim_factor(bounds%begp : bounds%endp)                  ! water stress factor that impact dynamic C allocation
biogeochem/AllocationMod.F90:    subroutine dynamic_plant_alloc( nutrient_scalar, water_scalar, laindex, alloc_leaf, alloc_stem, alloc_froot, woody)
biogeochem/AllocationMod.F90:    ! (2) nutrient/water limited, allocate more C into root
biogeochem/AllocationMod.F90:    real(r8), intent(in) :: water_scalar    !  scalar for water availability
biogeochem/AllocationMod.F90:    w_scalar = max( 0.1_r8, min( 1.0_r8, water_scalar ) )
biogeochem/CNEcosystemDynBetrMod.F90:  use WaterstateType            , only : waterstate_type
biogeochem/CNEcosystemDynBetrMod.F90:  use WaterfluxType             , only : waterflux_type
biogeochem/CNEcosystemDynBetrMod.F90:         atm2lnd_vars, waterstate_vars, waterflux_vars,                  &
biogeochem/CNEcosystemDynBetrMod.F90:    type(waterstate_type)            , intent(in)    :: waterstate_vars
biogeochem/CNEcosystemDynBetrMod.F90:    type(waterflux_type)             , intent(in)    :: waterflux_vars
biogeochem/CNEcosystemDynBetrMod.F90:               temperature_vars, waterstate_vars, carbonstate_vars, phosphorusstate_vars)
biogeochem/CNEcosystemDynBetrMod.F90:               waterstate_vars, crop_vars, cnstate_vars, &
biogeochem/CNEcosystemDynBetrMod.F90:            waterstate_vars, temperature_vars, crop_vars, canopystate_vars, soilstate_vars, &
biogeochem/CNEcosystemDynBetrMod.F90:            atm2lnd_vars, temperature_vars, energyflux_vars, soilhydrology_vars, waterstate_vars, &
biogeochem/RootDynamicsMod.F90:    real(r8) :: w_limit(bounds%begp:bounds%endp)               ! soil water weighting factor
biogeochem/RootDynamicsMod.F90:    real(r8) :: rswa(bounds%begp:bounds%endp,1:nlevgrnd)       ! soil water availability in each soil layer
biogeochem/RootDynamicsMod.F90:    real(r8) :: sumrswa(bounds%begp:bounds%endp)               ! scaling soil water availability in each soil layer
biogeochem/RootDynamicsMod.F90:    real(r8), parameter :: soil_water_factor_min = 0.9_r8
biogeochem/RootDynamicsMod.F90:         soilpsi                => soilstate_vars%soilpsi_col                  , & ! Input  :  soil water potential in each soil layer (MPa)
biogeochem/RootDynamicsMod.F90:         rresis                 => energyflux_vars%rresis_patch                , & ! Input  :  [real(r8) (:,:) ]  root soil water stress (resistance) by layer (0-1)
biogeochem/RootDynamicsMod.F90:      ! This will be used to weight the temperature and water potential scalars
biogeochem/RootDynamicsMod.F90:               ! First calculate water in the root zone
biogeochem/RootDynamicsMod.F90:                  w_limit(p) = min(soil_water_factor_min,w_limit(p))
biogeochem/RootDynamicsMod.F90:               ! Calculate the water in each soil layer
biogeochem/DUSTMod.F90:  use WaterstateType       , only : waterstate_type
biogeochem/DUSTMod.F90:       atm2lnd_vars, soilstate_vars, canopystate_vars, waterstate_vars, &
biogeochem/DUSTMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/DUSTMod.F90:    real(r8) :: liqfrac             ! fraction of total water that is liquid
biogeochem/DUSTMod.F90:         watsat              => soilstate_vars%watsat_col            , & ! Input:  [real(r8) (:,:) ]  saturated volumetric soil water                 
biogeochem/DUSTMod.F90:         h2osoi_vol          => col_ws%h2osoi_vol       , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat)   
biogeochem/DUSTMod.F90:         h2osoi_liq          => col_ws%h2osoi_liq       , & ! Input:  [real(r8) (:,:) ]  liquid soil water (kg/m2)                       
biogeochem/DUSTMod.F90:         h2osoi_ice          => col_ws%h2osoi_ice       , & ! Input:  [real(r8) (:,:) ]  frozen soil water (kg/m2)                       
biogeochem/DUSTMod.F90:            ! water content
biogeochem/DUSTMod.F90:            ! slevis: adding liqfrac here, because related to effects from soil water
biogeochem/CH4varcon.F90:                                      ! water remains constant through the plant and is released when the water evaporates
biogeochem/CH4varcon.F90:                                    ! CLM water table depth and surface runoff) to calculated finundated which is
biogeochem/CH4varcon.F90:  logical :: anoxicmicrosites = .false. ! Use Arah & Stephen 1998 expression to allow production above the water table
biogeochem/VOCEmissionMod.F90:         !watsat       => soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity) (nlevgrnd)
biogeochem/VOCEmissionMod.F90:         !h2osoi_vol   => col_ws%h2osoi_vol        , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (m3/m3)                   
biogeochem/VOCEmissionMod.F90:    ! convert to volumetric soil water using equation 7.118 of the CLM4 Technical Note
biogeochem/VOCEmissionMod.F90:    real(r8) :: theta_ice               ! water content in ice in m3/m3
biogeochem/EcosystemDynMod.F90:  use WaterstateType      , only : waterstate_type
biogeochem/EcosystemDynMod.F90:  use WaterfluxType       , only : waterflux_type
biogeochem/EcosystemDynMod.F90:       waterstate_vars, waterflux_vars, frictionvel_vars, canopystate_vars,&
biogeochem/EcosystemDynMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/EcosystemDynMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeochem/EcosystemDynMod.F90:            waterstate_vars, waterflux_vars, nitrogenstate_vars, nitrogenflux_vars)
biogeochem/EcosystemDynMod.F90:            waterstate_vars, waterflux_vars, phosphorusstate_vars, phosphorusflux_vars)
biogeochem/EcosystemDynMod.F90:       atm2lnd_vars, waterstate_vars, waterflux_vars,                   &
biogeochem/EcosystemDynMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/EcosystemDynMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeochem/EcosystemDynMod.F90:               waterflux_vars, carbonflux_vars, nitrogenflux_vars)
biogeochem/EcosystemDynMod.F90:               temperature_vars, waterstate_vars, carbonstate_vars, phosphorusstate_vars)
biogeochem/EcosystemDynMod.F90:               waterstate_vars, crop_vars, cnstate_vars, &
biogeochem/EcosystemDynMod.F90:       atm2lnd_vars, waterstate_vars, waterflux_vars,                           &
biogeochem/EcosystemDynMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/EcosystemDynMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeochem/EcosystemDynMod.F90:                       temperature_vars, waterstate_vars,           &
biogeochem/EcosystemDynMod.F90:                waterstate_vars, cnstate_vars, ch4_vars,                                        &
biogeochem/EcosystemDynMod.F90:            waterstate_vars, temperature_vars, crop_vars, canopystate_vars, soilstate_vars, &
biogeochem/EcosystemDynMod.F90:            atm2lnd_vars, temperature_vars, energyflux_vars, soilhydrology_vars, waterstate_vars, &
biogeochem/DryDepVelocity.F90:  use WaterstateType       , only : waterstate_type
biogeochem/DryDepVelocity.F90:       atm2lnd_vars, canopystate_vars, waterstate_vars, frictionvel_vars, &
biogeochem/DryDepVelocity.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/DryDepVelocity.F90:         h2osoi_vol =>    col_ws%h2osoi_vol        , & ! Input:  [real(r8) (:,:) ] volumetric soil water (0<=h2osoi_vol<=watsat)   
biogeochem/DryDepVelocity.F90:                  ! no deposition on snow, ice, desert, and water
biogeochem/DryDepVelocity.F90:               ! no deposition on snow, ice, desert, and water
biogeochem/DryDepVelocity.F90:            ! no effect over water
biogeochem/DryDepVelocity.F90:            no_water: if( wesveg/=1 .and. wesveg/=7 .and. wesveg/=8 .and. index_season/=4 ) then
biogeochem/DryDepVelocity.F90:            endif no_water
biogeochem/DryDepVelocity.F90:               ! assume no surface resistance for SO2 over water
biogeochem/SharedParamsMod.F90:      real(r8) :: minpsi      ! minimum soil water potential for heterotrophic resp	  
biogeochem/PhosphorusDynamicsMod.F90:  use WaterStateType      , only : waterstate_type
biogeochem/PhosphorusDynamicsMod.F90:  use WaterFluxType       , only : waterflux_type
biogeochem/PhosphorusDynamicsMod.F90:       waterstate_vars, waterflux_vars, phosphorusstate_vars, phosphorusflux_vars)
biogeochem/PhosphorusDynamicsMod.F90:    ! as a function of solution P and total soil water outflow.
biogeochem/PhosphorusDynamicsMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/PhosphorusDynamicsMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeochem/PhosphorusDynamicsMod.F90:    real(r8) :: disp_conc                              ! dissolved mineral N concentration (gP/kg water)
biogeochem/PhosphorusDynamicsMod.F90:    real(r8) :: tot_water(bounds%begc:bounds%endc)     ! total column liquid water (kg water/m2)
biogeochem/PhosphorusDynamicsMod.F90:    real(r8) :: surface_water(bounds%begc:bounds%endc) ! liquid water to shallow surface depth (kg water/m2)
biogeochem/PhosphorusDynamicsMod.F90:    real(r8), parameter :: depth_runoff_Ploss = 0.05   ! (m) depth over which runoff mixes with soil water for P loss to runoff
biogeochem/PhosphorusDynamicsMod.F90:         h2osoi_liq          => col_ws%h2osoi_liq            , & !Input:  [real(r8) (:,:) ]  liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
biogeochem/PhosphorusDynamicsMod.F90:      ! calculate the total soil water
biogeochem/PhosphorusDynamicsMod.F90:      tot_water(bounds%begc:bounds%endc) = 0._r8
biogeochem/PhosphorusDynamicsMod.F90:            tot_water(c) = tot_water(c) + h2osoi_liq(c,j)
biogeochem/PhosphorusDynamicsMod.F90:      ! for runoff calculation; calculate total water to a given depth
biogeochem/PhosphorusDynamicsMod.F90:      surface_water(bounds%begc:bounds%endc) = 0._r8
biogeochem/PhosphorusDynamicsMod.F90:               surface_water(c) = surface_water(c) + h2osoi_liq(c,j)
biogeochem/PhosphorusDynamicsMod.F90:               surface_water(c) = surface_water(c) + h2osoi_liq(c,j) * ((depth_runoff_Ploss - zisoi(j-1)) / col_pp%dz(c,j))
biogeochem/PhosphorusDynamicsMod.F90:                  if (tot_water(c) > 0._r8) then
biogeochem/PhosphorusDynamicsMod.F90:                     disp_conc = ( solutionp_vr(c,j) ) / tot_water(c)
biogeochem/PhosphorusDynamicsMod.F90:                  sminp_leached_vr(c,j) = disp_conc * drain_tot(c) *h2osoi_liq(c,j) / ( tot_water(c) * col_pp%dz(c,j) )
biogeochem/PhosphorusDynamicsMod.F90:    ! as a function of solution P and total soil water outflow.
biogeochem/NitrogenDynamicsMod.F90:  use WaterStateType      , only : waterstate_type
biogeochem/NitrogenDynamicsMod.F90:  use WaterFluxType       , only : waterflux_type
biogeochem/NitrogenDynamicsMod.F90:  subroutine NitrogenFixation(num_soilc, filter_soilc, waterflux_vars, &
biogeochem/NitrogenDynamicsMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars    
biogeochem/NitrogenDynamicsMod.F90:       waterstate_vars, waterflux_vars, nitrogenstate_vars, nitrogenflux_vars)
biogeochem/NitrogenDynamicsMod.F90:    ! as a function of soluble mineral N and total soil water outflow.
biogeochem/NitrogenDynamicsMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/NitrogenDynamicsMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeochem/NitrogenDynamicsMod.F90:    real(r8) :: disn_conc                              ! dissolved mineral N concentration (gN/kg water)
biogeochem/NitrogenDynamicsMod.F90:    real(r8) :: tot_water(bounds%begc:bounds%endc)     ! total column liquid water (kg water/m2)
biogeochem/NitrogenDynamicsMod.F90:    real(r8) :: surface_water(bounds%begc:bounds%endc) ! liquid water to shallow surface depth (kg water/m2)
biogeochem/NitrogenDynamicsMod.F90:    real(r8), parameter :: depth_runoff_Nloss = 0.05   ! (m) depth over which runoff mixes with soil water for N loss to runoff
biogeochem/NitrogenDynamicsMod.F90:         h2osoi_liq          => col_ws%h2osoi_liq            , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
biogeochem/NitrogenDynamicsMod.F90:      ! calculate the total soil water
biogeochem/NitrogenDynamicsMod.F90:      tot_water(bounds%begc:bounds%endc) = 0._r8
biogeochem/NitrogenDynamicsMod.F90:            tot_water(c) = tot_water(c) + h2osoi_liq(c,j)
biogeochem/NitrogenDynamicsMod.F90:      ! for runoff calculation; calculate total water to a given depth
biogeochem/NitrogenDynamicsMod.F90:      surface_water(bounds%begc:bounds%endc) = 0._r8
biogeochem/NitrogenDynamicsMod.F90:               surface_water(c) = surface_water(c) + h2osoi_liq(c,j)
biogeochem/NitrogenDynamicsMod.F90:               surface_water(c) = surface_water(c) + h2osoi_liq(c,j) * ( (depth_runoff_Nloss - zisoi(j-1)) / col_pp%dz(c,j))
biogeochem/NitrogenDynamicsMod.F90:                  ! calculate the dissolved mineral N concentration (gN/kg water)
biogeochem/NitrogenDynamicsMod.F90:                  if (tot_water(c) > 0._r8) then
biogeochem/NitrogenDynamicsMod.F90:                     disn_conc = (sf * sminn_vr(c,j) ) / tot_water(c)
biogeochem/NitrogenDynamicsMod.F90:                  ! calculate the dissolved mineral N concentration (gN/kg water)
biogeochem/NitrogenDynamicsMod.F90:                  sminn_leached_vr(c,j) = disn_conc * drain_tot(c) * h2osoi_liq(c,j) / ( tot_water(c) * col_pp%dz(c,j) )
biogeochem/NitrogenDynamicsMod.F90:                  ! calculate the dissolved mineral N concentration (gN/kg water)
biogeochem/NitrogenDynamicsMod.F90:                  if (tot_water(c) > 0._r8) then
biogeochem/NitrogenDynamicsMod.F90:                     disn_conc = (sf_no3 * smin_no3_vr(c,j) )/tot_water(c)
biogeochem/NitrogenDynamicsMod.F90:                  ! calculate the dissolved mineral N concentration (gN/kg water)
biogeochem/NitrogenDynamicsMod.F90:                  smin_no3_leached_vr(c,j) = disn_conc * drain_tot(c) * h2osoi_liq(c,j) / ( tot_water(c) * col_pp%dz(c,j) )
biogeochem/NitrogenDynamicsMod.F90:                  ! calculate the N loss from surface runoff, assuming a shallow mixing of surface waters into soil and removal based on runoff
biogeochem/NitrogenDynamicsMod.F90:                          h2osoi_liq(c,j) / ( surface_water(c) * col_pp%dz(c,j) )
biogeochem/NitrogenDynamicsMod.F90:                          col_pp%dz(c,j)) / ( surface_water(c) * (depth_runoff_Nloss-zisoi(j-1) ))
biogeochem/NitrogenDynamicsMod.F90:       waterstate_vars, crop_vars, cnstate_vars, nitrogenstate_vars, nitrogenflux_vars)
biogeochem/NitrogenDynamicsMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/NitrogenDynamicsMod.F90:    real(r8):: fxw,fxn,fxg,fxr             ! soil water factor, nitrogen factor, growth stage factor
biogeochem/NitrogenDynamicsMod.F90:         wf               =>  col_ws%wf                 , & ! Input:  [real(r8) (:) ]  soil water as frac. of whc for top 0.5 m          
biogeochem/NitrogenDynamicsMod.F90:               ! fixation depends on nitrogen, soil water, and growth stage
biogeochem/NitrogenDynamicsMod.F90:               ! soil water factor
biogeochem/NitrogenDynamicsMod.F90:             nitrogenstate_vars, nitrogenflux_vars, temperature_vars, waterstate_vars, carbonstate_vars, phosphorusstate_vars)
biogeochem/NitrogenDynamicsMod.F90:    type(waterstate_type)   , intent(in)    :: waterstate_vars
biogeochem/NitrogenDynamicsMod.F90:                  ! 78% atm * 6.1e-4 mol/L/atm * 28 g/mol * 1e3L/m3 * water content m3/m3 at 10 cm
biogeochem/SharedParamsMod.F90_backup06252020:      real(r8) :: minpsi      ! minimum soil water potential for heterotrophic resp	  
biogeochem/AllocationMod.F90_orig:  use WaterStateType      , only : waterstate_type
biogeochem/AllocationMod.F90_orig:                            soilstate_vars,waterstate_vars)
biogeochem/AllocationMod.F90_orig:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/AllocationMod.F90_orig:    real(r8):: solution_nh4conc(bounds%begc:bounds%endc, 1:nlevdecomp)    ! temp solution concentration g nutrient per m3 water, because VMAX/KM are measured in hydroponic chamber
biogeochem/AllocationMod.F90_orig:                  ! first need to convert concentration to per soil water based
biogeochem/AllocationMod.F90_orig:                  solution_nh4conc(c,j) = sminn_vr(c,j) / (bd(c,j)*2.76 + h2osoi_vol(c,j)) ! convert to per soil water based
biogeochem/AllocationMod.F90_orig:                  solution_pconc(c,j) = solutionp_vr(c,j)/h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90_orig:                  ! first need to convert concentration to per soil water based
biogeochem/AllocationMod.F90_orig:                  solution_nh4conc(c,j) = smin_nh4_vr(c,j) / (bd(c,j)*2.76 + h2osoi_vol(c,j)) ! convert to per soil water based
biogeochem/AllocationMod.F90_orig:                  solution_no3conc(c,j) = smin_no3_vr(c,j) /  h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90_orig:                  solution_pconc(c,j) = solutionp_vr(c,j)/h2osoi_vol(c,j) ! convert to per soil water based
biogeochem/AllocationMod.F90_orig:    real(r8):: W_lim_factor(bounds%begp : bounds%endp)                  ! water stress factor that impact dynamic C allocation
biogeochem/AllocationMod.F90_orig:    subroutine dynamic_plant_alloc( nutrient_scalar, water_scalar, laindex, alloc_leaf, alloc_stem, alloc_froot, woody)
biogeochem/AllocationMod.F90_orig:    ! (2) nutrient/water limited, allocate more C into root
biogeochem/AllocationMod.F90_orig:    real(r8), intent(in) :: water_scalar    !  scalar for water availability
biogeochem/AllocationMod.F90_orig:    w_scalar = max( 0.1_r8, min( 1.0_r8, water_scalar ) )
biogeochem/SatellitePhenologyMod.F90:  use WaterstateType  , only : waterstate_type
biogeochem/SatellitePhenologyMod.F90:       waterstate_vars, canopystate_vars, temperature_vars, soilstate_vars)
biogeochem/SatellitePhenologyMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/SatellitePhenologyMod.F90:         soilpsi            => soilstate_vars%soilpsi_col     ,          & ! Input: [real(r8)  (:,:) ]  soil water potential in each soil layer (MPa) 
biogeochem/CH4Mod.F90:  use WaterfluxType      , only : waterflux_type
biogeochem/CH4Mod.F90:  use WaterstateType     , only : waterstate_type
biogeochem/CH4Mod.F90:     real(r8) :: f_sat                ! volumetric soil water defining top of water table or where production is allowed (=0.95)
biogeochem/CH4Mod.F90:     real(r8), pointer, private :: zwt_ch4_unsat_col          (:)   ! col depth of water table for unsaturated fraction (m)
biogeochem/CH4Mod.F90:         avgflag='A', long_name='depth of water table for methane production used in non-inundated area', &
biogeochem/CH4Mod.F90:       temperature_vars, energyflux_vars, waterstate_vars, waterflux_vars, &
biogeochem/CH4Mod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeochem/CH4Mod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeochem/CH4Mod.F90:    integer  :: jwt(bounds%begc:bounds%endc)           ! index of the soil layer right above the water table (-)
biogeochem/CH4Mod.F90:         zwt                  =>   soilhydrology_vars%zwt_col                , & ! Input:  [real(r8) (:)   ]  water table depth (m) 
biogeochem/CH4Mod.F90:         zwt_perched          =>   soilhydrology_vars%zwt_perched_col        , & ! Input:  [real(r8) (:)   ]  perched water table depth (m)                     
biogeochem/CH4Mod.F90:         frac_h2osfc          =>   col_ws%frac_h2osfc           , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeochem/CH4Mod.F90:         zwt_ch4_unsat        =>   ch4_vars%zwt_ch4_unsat_col                , & ! Output: [real(r8) (:)   ]  depth of water table for unsaturated fraction (m) 
biogeochem/CH4Mod.F90:         ! Get index of water table
biogeochem/CH4Mod.F90:                 soilstate_vars, waterstate_vars, temperature_vars)
biogeochem/CH4Mod.F90:              soilstate_vars, temperature_vars, waterstate_vars, &
biogeochem/CH4Mod.F90:              waterstate_vars, soilstate_vars, temperature_vars, ch4_vars)
biogeochem/CH4Mod.F90:              waterstate_vars, waterflux_vars, carbonstate_vars, carbonflux_vars, ch4_vars)
biogeochem/CH4Mod.F90:              atm2lnd_vars, temperature_vars, lakestate_vars, soilstate_vars, waterstate_vars, &
biogeochem/CH4Mod.F90:              soilstate_vars, temperature_vars, waterstate_vars, energyflux_vars, ch4_vars)
biogeochem/CH4Mod.F90:              soilstate_vars, temperature_vars, waterstate_vars, &
biogeochem/CH4Mod.F90:              waterstate_vars, soilstate_vars, temperature_vars, ch4_vars)
biogeochem/CH4Mod.F90:              waterstate_vars, waterflux_vars, carbonstate_vars, carbonflux_vars, ch4_vars)
biogeochem/CH4Mod.F90:              atm2lnd_vars, temperature_vars, lakestate_vars, soilstate_vars, waterstate_vars, &
biogeochem/CH4Mod.F90:              soilstate_vars, temperature_vars, waterstate_vars, energyflux_vars, ch4_vars)
biogeochem/CH4Mod.F90:       soilstate_vars, temperature_vars, waterstate_vars, &
biogeochem/CH4Mod.F90:    ! Production is done below the water table, based on CN heterotrophic respiration.
biogeochem/CH4Mod.F90:    integer                 , intent(in)    :: jwt( bounds%begc: ) ! index of the soil layer right above the water table (-) [col]
biogeochem/CH4Mod.F90:    type(waterstate_type)   , intent(in)    :: waterstate_vars
biogeochem/CH4Mod.F90:         h2osoi_vol     =>    col_ws%h2osoi_vol     , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeochem/CH4Mod.F90:         watsat         =>    soilstate_vars%watsat_col          , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at saturation (porosity)  
biogeochem/CH4Mod.F90:         pH             =>    ch4_vars%pH_col                    , & ! Input:  [real(r8) (:)    ]  soil water pH                                     
biogeochem/CH4Mod.F90:            ! If using VERTSOILC, it is OK to use base_decomp as given because liquid water stress will limit decomp.
biogeochem/CH4Mod.F90:            if (j  >  jwt(c)) then ! Below the water table so anaerobic CH4 production can occur
biogeochem/CH4Mod.F90:       waterstate_vars, soilstate_vars, temperature_vars, ch4_vars)
biogeochem/CH4Mod.F90:    integer                , intent(in) :: jwt( bounds%begc: ) ! index of the soil layer right above the water table (-) [col]
biogeochem/CH4Mod.F90:    type(waterstate_type)  , intent(in) :: waterstate_vars
biogeochem/CH4Mod.F90:    real(r8):: conc_ch4_rel                   ! concentration with respect to water volume (mol/m^3 water)
biogeochem/CH4Mod.F90:    real(r8):: conc_o2_rel                    ! concentration with respect to water volume (mol/m^3 water)
biogeochem/CH4Mod.F90:    real(r8):: porewatfrac                    ! fraction of soil pore space that is filled with water
biogeochem/CH4Mod.F90:         h2osoi_vol => col_ws%h2osoi_vol , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeochem/CH4Mod.F90:         watsat     => soilstate_vars%watsat_col      , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at saturation (porosity)  
biogeochem/CH4Mod.F90:            if (j  <=  jwt(c)) then ! Above the water table
biogeochem/CH4Mod.F90:       waterstate_vars, waterflux_vars, carbonstate_vars, carbonflux_vars, ch4_vars)
biogeochem/CH4Mod.F90:    integer                , intent(in)    :: jwt( bounds%begc: ) ! index of the soil layer right above the water table (-) [col]
biogeochem/CH4Mod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/CH4Mod.F90:    type(waterflux_type)   , intent(in)    :: waterflux_vars
biogeochem/CH4Mod.F90:         watsat        =>    soilstate_vars%watsat_col           , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at saturation (porosity)   
biogeochem/CH4Mod.F90:         h2osoi_vol    =>    col_ws%h2osoi_vol      , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeochem/CH4Mod.F90:                  ! Calculate water concentration
biogeochem/CH4Mod.F90:               end if ! veg type, below water table, & above freezing
biogeochem/CH4Mod.F90:       atm2lnd_vars, temperature_vars, lakestate_vars, soilstate_vars, waterstate_vars, &
biogeochem/CH4Mod.F90:    ! Bubbles are released to the water table surface in ch4_tran.
biogeochem/CH4Mod.F90:    integer                , intent(in)    :: jwt( bounds%begc: ) ! index of the soil layer right above the water table (-) [col]
biogeochem/CH4Mod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/CH4Mod.F90:         watsat       =>    soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)  
biogeochem/CH4Mod.F90:         h2osoi_vol   =>    col_ws%h2osoi_vol        , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeochem/CH4Mod.F90:         h2osfc       =>    col_ws%h2osfc            , & ! Input:  [real(r8) (:)   ]  surface water (mm)                                
biogeochem/CH4Mod.F90:         frac_h2osfc  =>    col_ws%frac_h2osfc         & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeochem/CH4Mod.F90:            if (j  >  jwt(c) .and. t_soisno(c,j) > tfrz) then ! Ebullition occurs only below the water table
biogeochem/CH4Mod.F90:            else ! above the water table or freezing
biogeochem/CH4Mod.F90:            endif ! below the water table and not freezing
biogeochem/CH4Mod.F90:       soilstate_vars, temperature_vars, waterstate_vars, energyflux_vars, ch4_vars)
biogeochem/CH4Mod.F90:    ! fraction is considered for diffusion in unsat.  Snow and lake water resistance to diffusion is added as
biogeochem/CH4Mod.F90:    ! are not tracked and oxidation is not allowed inside snow and lake water.
biogeochem/CH4Mod.F90:    integer                , intent(in)    :: jwt( bounds%begc: ) ! index of the soil layer right above the water table (-) [col]
biogeochem/CH4Mod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeochem/CH4Mod.F90:    real(r8) :: conc_ch4_rel(bounds%begc:bounds%endc,0:nlevsoi)            ! Concentration per volume of air or water
biogeochem/CH4Mod.F90:    real(r8) :: conc_o2_rel(bounds%begc:bounds%endc,0:nlevsoi)             ! Concentration per volume of air or water
biogeochem/CH4Mod.F90:    real(r8) :: pondres                                                    ! Additional resistance from ponding, up to pondmx water on top of top soil layer (s/m)
biogeochem/CH4Mod.F90:    real(r8) :: ponddiff                                                   ! Pondwater diffusivity (m^2/s)
biogeochem/CH4Mod.F90:    real(r8) :: waterfrac                                                  ! water fraction in snow
biogeochem/CH4Mod.F90:         watsat        =>    soilstate_vars%watsat_col       , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)  
biogeochem/CH4Mod.F90:         t_h2osfc      =>    col_es%t_h2osfc   , & ! Input:  [real(r8) (:)   ]  surface water temperature               
biogeochem/CH4Mod.F90:         frac_h2osfc   =>    col_ws%frac_h2osfc , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeochem/CH4Mod.F90:         h2osoi_vol    =>    col_ws%h2osoi_vol  , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeochem/CH4Mod.F90:         h2osoi_liq    =>    col_ws%h2osoi_liq  , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2) [for snow & soil layers]   
biogeochem/CH4Mod.F90:         h2osno        =>    col_ws%h2osno      , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                               
biogeochem/CH4Mod.F90:         h2osfc        =>    col_ws%h2osfc      , & ! Input:  [real(r8) (:)   ]  surface water (mm)                                
biogeochem/CH4Mod.F90:      ! Accumulate ebullition to place in first layer above water table, or directly to atmosphere
biogeochem/CH4Mod.F90:      ! Calculate concentration relative to m^3 of air or water: needed for the diffusion
biogeochem/CH4Mod.F90:                  waterfrac = h2osoi_liq(c,j)/denh2o/dz(c,j)
biogeochem/CH4Mod.F90:                  airfrac = max(1._r8 - icefrac - waterfrac, 0._r8)
biogeochem/CH4Mod.F90:                     f_a = airfrac / (airfrac + waterfrac)
biogeochem/CH4Mod.F90:                          f_a**(10._r8/3._r8) / (airfrac+waterfrac)**2 &
biogeochem/CH4Mod.F90:                  else !solute diffusion in water only
biogeochem/CH4Mod.F90:                     eps = waterfrac  ! Water-filled fraction of total soil volume
biogeochem/CH4Mod.F90:               else ! Below the WT use saturated diffusivity and only water in epsilon_t
biogeochem/CH4Mod.F90:               else if (j == 1) then ! water table at surface: multiply ground resistance by k_h_cc
biogeochem/CH4Mod.F90:       soilstate_vars, waterstate_vars, temperature_vars)
biogeochem/CH4Mod.F90:    ! Finds the first unsaturated layer going up. Also allows a perched water table over ice.
biogeochem/CH4Mod.F90:    integer                , intent(out) :: jwt( bounds%begc: ) ! index of the soil layer right above the water table (-) [col]
biogeochem/CH4Mod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_vars
biogeochem/CH4Mod.F90:    real(r8) :: f_sat    ! volumetric soil water defining top of water table or where production is allowed
biogeochem/CH4Mod.F90:         watsat     => soilstate_vars%watsat_col      , & ! Input:  [real(r8) (:,:)  ] volumetric soil water at saturation (porosity)   
biogeochem/CH4Mod.F90:         h2osoi_vol => col_ws%h2osoi_vol , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeochem/CH4Mod.F90:      ! the water table.
biogeochem/CH4Mod.F90:         ! such layer.  This is potentially important for perched water tables in the Tundra.
biogeophys/UrbanFluxesMod.F90:  use WaterstateType       , only : waterstate_type
biogeophys/UrbanFluxesMod.F90:  use WaterfluxType        , only : waterflux_type
biogeophys/UrbanFluxesMod.F90:       waterstate_vars, frictionvel_vars, energyflux_vars, waterflux_vars) 
biogeophys/UrbanFluxesMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/UrbanFluxesMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/UrbanFluxesMod.F90:    real(r8) :: qflx(bounds%begl:bounds%endl)                        ! total water vapor flux for error check (kg/m**2/s)
biogeophys/UrbanFluxesMod.F90:    real(r8) :: qflx_scale(bounds%begl:bounds%endl)                  ! sum of scaled water vapor fluxes for urban columns for error check (kg/m**2/s)
biogeophys/UrbanFluxesMod.F90:    real(r8) :: qflx_err(bounds%begl:bounds%endl)                    ! water vapor flux error (kg/m**2/s)
biogeophys/UrbanFluxesMod.F90:         h2osoi_liq          =>   col_ws%h2osoi_liq            , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                            
biogeophys/UrbanFluxesMod.F90:         h2osno              =>   col_ws%h2osno                , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                               
biogeophys/UrbanFluxesMod.F90:            ! or if no liquid water available in soil column
biogeophys/UrbanFluxesMod.F90:         write(iulog,*)'WARNING:  Total water vapor flux does not equal sum of scaled water vapor fluxes for urban columns ',&
biogeophys/SoilHydrologyMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/SoilHydrologyMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/SoilHydrologyMod.F90:  public :: WaterTable           ! Calculate water table before imposing drainage
biogeophys/SoilHydrologyMod.F90:       num_urbanc, filter_urbanc, soilhydrology_vars, soilstate_vars, waterflux_vars, &
biogeophys/SoilHydrologyMod.F90:       waterstate_vars)
biogeophys/SoilHydrologyMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/SoilHydrologyMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/SoilHydrologyMod.F90:    real(r8) :: xs(bounds%begc:bounds%endc)                !excess soil water above urban ponding limit
biogeophys/SoilHydrologyMod.F90:         watsat           =>    soilstate_vars%watsat_col           , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)  
biogeophys/SoilHydrologyMod.F90:         h2osoi_liq       =>    col_ws%h2osoi_liq      , & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)                            
biogeophys/SoilHydrologyMod.F90:         h2osfc           =>    col_ws%h2osfc          , & !Output: [real(r8) (:)   ]  surface water (mm) 
biogeophys/SoilHydrologyMod.F90:         qflx_snow_h2osfc =>    col_wf%qflx_snow_h2osfc , & ! Input:  [real(r8) (:)   ]  snow falling on surface water (mm/s)              
biogeophys/SoilHydrologyMod.F90:         qflx_floodc      =>    col_wf%qflx_floodc      , & ! Input:  [real(r8) (:)   ]  column flux of flood water from RTM               
biogeophys/SoilHydrologyMod.F90:         qflx_top_soil    =>    col_wf%qflx_top_soil    , & ! Output: [real(r8) (:)   ]  net water input into soil from top (mm/s)         
biogeophys/SoilHydrologyMod.F90:         zwt              =>    soilhydrology_vars%zwt_col          , & ! Input:  [real(r8) (:)   ]  water table depth (m)                             
biogeophys/SoilHydrologyMod.F90:         zwt_perched      =>    soilhydrology_vars%zwt_perched_col  , & ! Input:  [real(r8) (:)   ]  perched water table depth (m)                     
biogeophys/SoilHydrologyMod.F90:         fsat             =>    soilhydrology_vars%fsat_col         , & ! Output: [real(r8) (:)   ]  fractional area with water table at surface       
biogeophys/SoilHydrologyMod.F90:         ! use perched water table to determine fsat (if present)
biogeophys/SoilHydrologyMod.F90:      ! Determine water in excess of ponding limit for urban roof and impervious road.
biogeophys/SoilHydrologyMod.F90:         ! send flood water flux to runoff for all urban columns
biogeophys/SoilHydrologyMod.F90:         ! add flood water flux to qflx_top_soil
biogeophys/SoilHydrologyMod.F90:        waterflux_vars, waterstate_vars)
biogeophys/SoilHydrologyMod.F90:     type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/SoilHydrologyMod.F90:     type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/SoilHydrologyMod.F90:     real(r8) :: wx                                         ! partial volume of ice and water of surface layer
biogeophys/SoilHydrologyMod.F90:          frac_h2osfc          =>    col_ws%frac_h2osfc         , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/SoilHydrologyMod.F90:          h2osoi_liq           =>    col_ws%h2osoi_liq          , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                            
biogeophys/SoilHydrologyMod.F90:          h2osno               =>    col_ws%h2osno              , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                               
biogeophys/SoilHydrologyMod.F90:          h2osfc               =>    col_ws%h2osfc              , & ! Output: [real(r8) (:)   ]  surface water (mm)                                
biogeophys/SoilHydrologyMod.F90:          qflx_top_soil        =>    col_wf%qflx_top_soil        , & ! Input:  [real(r8) (:)   ]  net water input into soil from top (mm/s)         
biogeophys/SoilHydrologyMod.F90:          qflx_h2osfc_surf     =>    col_wf%qflx_h2osfc_surf     , & ! Output: [real(r8) (:)   ]  surface water runoff (mm/s)                       
biogeophys/SoilHydrologyMod.F90:          watsat               =>    soilstate_vars%watsat_col               , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)  
biogeophys/SoilHydrologyMod.F90:          zwt                  =>    soilhydrology_vars%zwt_col              , & ! Input:  [real(r8) (:)   ]  water table depth (m)                             
biogeophys/SoilHydrologyMod.F90:          zwt_perched          =>    soilhydrology_vars%zwt_perched_col      , & ! Input:  [real(r8) (:)   ]  perched water table depth (m)                     
biogeophys/SoilHydrologyMod.F90:          fcov                 =>    soilhydrology_vars%fcov_col             , & ! Input:  [real(r8) (:)   ]  fractional area with water table at surface       
biogeophys/SoilHydrologyMod.F90:          fsat                 =>    soilhydrology_vars%fsat_col             , & ! Input:  [real(r8) (:)   ]  fractional area with water table at surface       
biogeophys/SoilHydrologyMod.F90:          h2osoi_vol           =>    waterstate_vars%h2osoi_vol_col          , & ! Input: [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeophys/SoilHydrologyMod.F90:       ! the water table
biogeophys/SoilHydrologyMod.F90:             !--  if all water evaporates, there will be no bottom drainage
biogeophys/SoilHydrologyMod.F90:               !DMR 9/21/15 - only inlcude h2osfc if water table near surfce, use
biogeophys/SoilHydrologyMod.F90:                 !water table
biogeophys/SoilHydrologyMod.F90:        soilhydrology_vars, soilstate_vars, temperature_vars, waterstate_vars, waterflux_vars) 
biogeophys/SoilHydrologyMod.F90:     ! Calculate watertable, considering aquifer recharge but no drainage.
biogeophys/SoilHydrologyMod.F90:     type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/SoilHydrologyMod.F90:     type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xs(bounds%begc:bounds%endc)             ! water needed to bring soil moisture to watmin (mm)
biogeophys/SoilHydrologyMod.F90:     integer  :: jwt(bounds%begc:bounds%endc)            ! index of the soil layer right above the water table (-)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xsi(bounds%begc:bounds%endc)            ! excess soil water above saturation at layer i (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: ws                                      ! summation of pore space of layers below water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: dzsum                                   ! summation of dzmm of layers below water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: icefracsum                              ! summation of icefrac*dzmm of layers below water table (-)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: available_h2osoi_liq                    ! available soil liquid water in a layer
biogeophys/SoilHydrologyMod.F90:          h2osfc             =>    col_ws%h2osfc            , & ! Input:  [real(r8) (:)   ]  surface water (mm)                                
biogeophys/SoilHydrologyMod.F90:          h2osoi_liq         =>    col_ws%h2osoi_liq        , & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)                            
biogeophys/SoilHydrologyMod.F90:          h2osoi_vol         =>    col_ws%h2osoi_vol        , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeophys/SoilHydrologyMod.F90:          watsat             =>    soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)  
biogeophys/SoilHydrologyMod.F90:          qflx_grnd_irrig_col=>    col_wf%qflx_grnd_irrig    , & ! Output: [real(r8) (:)   ]  col real groundwater irrigation flux (mm H2O /s)                                                                                                                                                               
biogeophys/SoilHydrologyMod.F90:          zwt                =>    soilhydrology_vars%zwt_col            , & ! Output: [real(r8) (:)   ]  water table depth (m)                             
biogeophys/SoilHydrologyMod.F90:          zwt_perched        =>    soilhydrology_vars%zwt_perched_col    , & ! Output: [real(r8) (:)   ]  perched water table depth (m)                     
biogeophys/SoilHydrologyMod.F90:          wa                 =>    soilhydrology_vars%wa_col             , & ! Output: [real(r8) (:)   ]  water in the unconfined aquifer (mm)              
biogeophys/SoilHydrologyMod.F90:       ! the water table
biogeophys/SoilHydrologyMod.F90:          !--  water table is below the soil column  --------------------------------------
biogeophys/SoilHydrologyMod.F90:             !-- water table within soil layers 1-9  -------------------------------------
biogeophys/SoilHydrologyMod.F90:             ! try to raise water table to account for qcharge
biogeophys/SoilHydrologyMod.F90:             if(qcharge_tot > 0.) then !rising water table
biogeophys/SoilHydrologyMod.F90:             else ! deepening water table (negative qcharge)
biogeophys/SoilHydrologyMod.F90:       !-  water table is below the soil column -----------------------------------
biogeophys/SoilHydrologyMod.F90:   !-- water table within soil layers 1-9  -------------------------------------
biogeophys/SoilHydrologyMod.F90:   ! try to raise water table to account for lateral flux qflx_lat_aqu
biogeophys/SoilHydrologyMod.F90:             if(qflx_lat_aqu_tot > 0.) then !rising water table
biogeophys/SoilHydrologyMod.F90:                       ! if (c .eq. 2) then !hollow:  send excess to surface water
biogeophys/SoilHydrologyMod.F90:              else ! deepening water table (negative lateral flux)
biogeophys/SoilHydrologyMod.F90:                !Remove from surface water first if available
biogeophys/SoilHydrologyMod.F90:       ! perched water table code
biogeophys/SoilHydrologyMod.F90:          ! initialize perched water table to frost table, and qflx_drain_perched(c) to zero
biogeophys/SoilHydrologyMod.F90:          !===================  water table above frost table  =============================
biogeophys/SoilHydrologyMod.F90:          ! if water table is above frost table, do not use topmodel baseflow formulation
biogeophys/SoilHydrologyMod.F90:             !===================  water table below frost table  =============================
biogeophys/SoilHydrologyMod.F90:             !--  compute possible perched water table *and* groundwater table afterwards
biogeophys/SoilHydrologyMod.F90:             ! locate perched water table from bottom up starting at frost table
biogeophys/SoilHydrologyMod.F90:             ! sat_lev is an arbitrary saturation level used to determine perched water table
biogeophys/SoilHydrologyMod.F90:             ! if frost_table = nlevsoi, only compute perched water table if frozen
biogeophys/SoilHydrologyMod.F90:             ! if perched water table exists
biogeophys/SoilHydrologyMod.F90:                ! interpolate between k_perch and k_perch+1 to find perched water table height
biogeophys/SoilHydrologyMod.F90:        temperature_vars, soilhydrology_vars, soilstate_vars, waterstate_vars, waterflux_vars)
biogeophys/SoilHydrologyMod.F90:     type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/SoilHydrologyMod.F90:     type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xs(bounds%begc:bounds%endc)             ! water needed to bring soil moisture to watmin (mm)
biogeophys/SoilHydrologyMod.F90:     integer  :: jwt(bounds%begc:bounds%endc)            ! index of the soil layer right above the water table (-)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xsi(bounds%begc:bounds%endc)            ! excess soil water above saturation at layer i (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xs1(bounds%begc:bounds%endc)            ! excess soil water above saturation at layer 1 (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: smpfz(1:nlevsoi)                        ! matric potential of layer right above water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: wtsub                                   ! summation of hk*dzmm for layers below water table (mm**2/s)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: wh_zwt                                  ! water head at the water table depth (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: ws                                      ! summation of pore space of layers below water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: dzsum                                   ! summation of dzmm of layers below water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: icefracsum                              ! summation of icefrac*dzmm of layers below water table (-)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: available_h2osoi_liq                    ! available soil liquid water in a layer
biogeophys/SoilHydrologyMod.F90:          h2osfc             =>    col_ws%h2osfc            , & ! Input:  [real(r8) (:)   ] surface water (mm)                                
biogeophys/SoilHydrologyMod.F90:          watsat             =>    soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ] volumetric soil water at saturation (porosity)  
biogeophys/SoilHydrologyMod.F90:          zwt                =>    soilhydrology_vars%zwt_col            , & ! Input:  [real(r8) (:)   ] water table depth (m)                             
biogeophys/SoilHydrologyMod.F90:          zwt_perched        =>    soilhydrology_vars%zwt_perched_col    , & ! Input:  [real(r8) (:)   ] perched water table depth (m)                     
biogeophys/SoilHydrologyMod.F90:          wa                 =>    soilhydrology_vars%wa_col             , & ! Input:  [real(r8) (:)   ] water in the unconfined aquifer (mm)              
biogeophys/SoilHydrologyMod.F90:          h2osoi_liq         =>    col_ws%h2osoi_liq        , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)                            
biogeophys/SoilHydrologyMod.F90:       ! the water table
biogeophys/SoilHydrologyMod.F90:       ! perched water table code
biogeophys/SoilHydrologyMod.F90:          ! if layer containing water table is frozen, compute the following:
biogeophys/SoilHydrologyMod.F90:          !     frost table, perched water table, and drainage from perched saturated layer
biogeophys/SoilHydrologyMod.F90:          ! initialize perched water table to frost table, and qflx_drain_perched(c) to zero
biogeophys/SoilHydrologyMod.F90:          !===================  water table above frost table  =============================
biogeophys/SoilHydrologyMod.F90:          ! if water table is above frost table, do not use topmodel baseflow formulation
biogeophys/SoilHydrologyMod.F90:             ! if rsub_top_tot is greater than available water (above frost table), 
biogeophys/SoilHydrologyMod.F90:             !     then decrease qflx_drain_perched by residual amount for water balance
biogeophys/SoilHydrologyMod.F90:             !===================  water table below frost table  =============================
biogeophys/SoilHydrologyMod.F90:             !--  compute possible perched water table *and* groundwater table afterwards
biogeophys/SoilHydrologyMod.F90:             ! locate perched water table from bottom up starting at frost table
biogeophys/SoilHydrologyMod.F90:             ! sat_lev is an arbitrary saturation level used to determine perched water table
biogeophys/SoilHydrologyMod.F90:             ! if frost_table = nlevsoi, only compute perched water table if frozen
biogeophys/SoilHydrologyMod.F90:             ! if perched water table exists
biogeophys/SoilHydrologyMod.F90:                ! interpolate between k_perch and k_perch+1 to find perched water table height
biogeophys/SoilHydrologyMod.F90:                ! no perched water table drainage if using original formulation
biogeophys/SoilHydrologyMod.F90:                ! if rsub_top_tot is greater than available water (above frost table), 
biogeophys/SoilHydrologyMod.F90:                !     then decrease qflx_drain_perched by residual amount for water balance
biogeophys/SoilHydrologyMod.F90:             !--  water table is below the soil column  --------------------------------------
biogeophys/SoilHydrologyMod.F90:                !-- water table within soil layers 1-9  -------------------------------------
biogeophys/SoilHydrologyMod.F90:                !--  Now remove water via rsub_top
biogeophys/SoilHydrologyMod.F90:                if(rsub_top_tot > 0.) then !rising water table
biogeophys/SoilHydrologyMod.F90:                else ! deepening water table
biogeophys/SoilHydrologyMod.F90:       !  excessive water above saturation added to the above unsaturated layer like a bucket
biogeophys/SoilHydrologyMod.F90:       !  if column fully saturated, excess water goes to runoff
biogeophys/SoilHydrologyMod.F90:          !scs: watmin addition to fix water balance errors
biogeophys/SoilHydrologyMod.F90:                ! send this water up to h2osfc rather than sending to drainage
biogeophys/SoilHydrologyMod.F90:                ! use original code to send water to drainage (non-h2osfc case)
biogeophys/SoilHydrologyMod.F90:       ! Get water needed to bring h2osoi_liq equal watmin from lower layer.
biogeophys/SoilHydrologyMod.F90:       ! If insufficient water in soil layers, get from aquifer water
biogeophys/SoilHydrologyMod.F90:                ! deepen water table if water is passed from below zwt layer
biogeophys/SoilHydrologyMod.F90:       ! Get water for bottom layer from layers above if possible
biogeophys/SoilHydrologyMod.F90:             searchforwater: do i = nlevbed-1, 1, -1
biogeophys/SoilHydrologyMod.F90:                   exit searchforwater
biogeophys/SoilHydrologyMod.F90:             end do searchforwater
biogeophys/SoilHydrologyMod.F90:          ! Needed in case there is no water to be found
biogeophys/SoilHydrologyMod.F90:          ! Instead of removing water from aquifer where it eventually
biogeophys/SoilHydrologyMod.F90:        temperature_vars, soilhydrology_vars, soilstate_vars, waterstate_vars, waterflux_vars)
biogeophys/SoilHydrologyMod.F90:     type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/SoilHydrologyMod.F90:     type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xs(bounds%begc:bounds%endc)             ! water needed to bring soil moisture to watmin (mm)
biogeophys/SoilHydrologyMod.F90:     integer  :: jwt(bounds%begc:bounds%endc)            ! index of the soil layer right above the water table (-)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xsi(bounds%begc:bounds%endc)            ! excess soil water above saturation at layer i (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: xs1(bounds%begc:bounds%endc)            ! excess soil water above saturation at layer 1 (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: smpfz(1:nlevgrnd)                        ! matric potential of layer right above water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: wtsub                                   ! summation of hk*dzmm for layers below water table (mm**2/s)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: wh_zwt                                  ! water head at the water table depth (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: ws                                      ! summation of pore space of layers below water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: dzsum                                   ! summation of dzmm of layers below water table (mm)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: icefracsum                              ! summation of icefrac*dzmm of layers below water table (-)
biogeophys/SoilHydrologyMod.F90:     real(r8) :: available_h2osoi_liq                    ! available soil liquid water in a layer
biogeophys/SoilHydrologyMod.F90:          h2osfc             =>    col_ws%h2osfc            , & ! Input:  [real(r8) (:)   ] surface water (mm)
biogeophys/SoilHydrologyMod.F90:          watsat             =>    soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ] volumetric soil water at saturation (porosity)
biogeophys/SoilHydrologyMod.F90:          zwt                =>    soilhydrology_vars%zwt_col            , & ! Input:  [real(r8) (:)   ] water table depth (m)
biogeophys/SoilHydrologyMod.F90:          zwt_perched        =>    soilhydrology_vars%zwt_perched_col    , & ! Input:  [real(r8) (:)   ] perched water table depth (m)
biogeophys/SoilHydrologyMod.F90:          wa                 =>    soilhydrology_vars%wa_col             , & ! Input:  [real(r8) (:)   ] water in the unconfined aquifer (mm)
biogeophys/SoilHydrologyMod.F90:          mflx_drain_perched_col_1d =>    col_wf%mflx_drain_perched_1d   , & ! Input:  [real(r8) (:)   ]  drainage from perched water table (kg H2O /s)
biogeophys/SoilHydrologyMod.F90:          h2osoi_liq         =>    col_ws%h2osoi_liq        , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)
biogeophys/SoilHydrologyMod.F90:       ! the water table
biogeophys/SoilHydrologyMod.F90:       ! perched water table code
biogeophys/SoilHydrologyMod.F90:          ! if layer containing water table is frozen, compute the following:
biogeophys/SoilHydrologyMod.F90:          !     frost table, perched water table, and drainage from perched saturated layer
biogeophys/SoilHydrologyMod.F90:          ! initialize perched water table to frost table, and qflx_drain_perched(c) to zero
biogeophys/SoilHydrologyMod.F90:          !===================  water table above frost table  =============================
biogeophys/SoilHydrologyMod.F90:          ! if water table is above frost table, do not use topmodel baseflow formulation
biogeophys/SoilHydrologyMod.F90:             ! if rsub_top_tot is greater than available water (above frost table),
biogeophys/SoilHydrologyMod.F90:             !     then decrease qflx_drain_perched by residual amount for water balance
biogeophys/SoilHydrologyMod.F90:             !===================  water table below frost table  =============================
biogeophys/SoilHydrologyMod.F90:             !--  compute possible perched water table *and* groundwater table afterwards
biogeophys/SoilHydrologyMod.F90:             ! locate perched water table from bottom up starting at frost table
biogeophys/SoilHydrologyMod.F90:             ! sat_lev is an arbitrary saturation level used to determine perched water table
biogeophys/SoilHydrologyMod.F90:             ! if frost_table = nlevsoi, only compute perched water table if frozen
biogeophys/SoilHydrologyMod.F90:             ! if perched water table exists
biogeophys/SoilHydrologyMod.F90:                ! interpolate between k_perch and k_perch+1 to find perched water table height
biogeophys/SoilHydrologyMod.F90:                ! no perched water table drainage if using original formulation
biogeophys/SoilHydrologyMod.F90:                ! if rsub_top_tot is greater than available water (above frost table),
biogeophys/SoilHydrologyMod.F90:                !     then decrease qflx_drain_perched by residual amount for water balance
biogeophys/SoilHydrologyMod.F90:       soilhydrology_vars, waterstate_vars)
biogeophys/SoilHydrologyMod.F90:     type(waterstate_type)    , intent(in)    :: waterstate_vars 
biogeophys/SoilHydrologyMod.F90:     real(r8) :: moist0(1:nlayer)          ! last step soil water (mm)  (new)
biogeophys/SoilHydrologyMod.F90:     ! h2osoi_ice is actually water equivalent ice content.
biogeophys/SoilHydrologyMod.F90:          h2osoi_liq    => col_ws%h2osoi_liq       , & ! Input:  [real(r8) (:,:)   ] liquid water (kg/m2)                   
biogeophys/SoilHydrologyMod.F90:          h2osoi_vol    => col_ws%h2osoi_vol       , & ! Input:  [real(r8) (:,:)   ] volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
biogeophys/SoilHydrologyMod.F90:          moist         => soilhydrology_vars%moist_col         , & ! Output: [real(r8) (:,:)   ] liquid water (mm)                      
biogeophys/WaterStateType.F90:  type, public :: waterstate_type
biogeophys/WaterStateType.F90:     real(r8), pointer :: snowliq_col            (:)   ! col average snow liquid water
biogeophys/WaterStateType.F90:     real(r8), pointer :: bw_col                 (:,:) ! col partial density of water in the snow pack (ice + liquid) [kg/m3] 
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osno_col             (:)   ! col snow water (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osoi_liq_col         (:,:) ! col liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)    
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osoi_liqice_10cm_col (:)   ! col liquid water + ice lens in top 10cm of soil (kg/m2)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osoi_vol_col         (:,:) ! col volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osoi_liqvol_col      (:,:) ! col volumetric liquid water content (v/v)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2ocan_patch           (:)   ! patch canopy water (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2ocan_col             (:)   ! col canopy water (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osfc_col             (:)   ! col surface water (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: swe_old_col            (:,:) ! col initial snow water
biogeophys/WaterStateType.F90:     real(r8), pointer :: tws_grc                (:)   ! grc total water storage (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2o_moss_wc_patch      (:)   ! patch total moss water content (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2o_moss_inter_patch   (:)   ! patch internal moss water content (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: tws_month_beg_grc      (:)   ! grc total water storage at the beginning of a month
biogeophys/WaterStateType.F90:     real(r8), pointer :: tws_month_end_grc      (:)   ! grc total water storage at the end of a month
biogeophys/WaterStateType.F90:     real(r8), pointer :: total_plant_stored_h2o_col(:) ! col water that is bound in plants, including roots, sapwood, leaves, etc
biogeophys/WaterStateType.F90:                                                        ! water storage in plants, and thus 0.0 is a suitable for the trivial case.
biogeophys/WaterStateType.F90:     real(r8), pointer :: sno_liq_top_col        (:)   ! col snow liquid water fraction (mass), top layer  [fraction]
biogeophys/WaterStateType.F90:     real(r8), pointer :: frac_iceold_col        (:,:) ! col fraction of ice relative to the tot water (new) (-nlevsno+1:nlevgrnd) 
biogeophys/WaterStateType.F90:     real(r8), pointer :: frac_h2osfc_col        (:)   ! col fractional area with surface water greater than zero
biogeophys/WaterStateType.F90:     real(r8), pointer :: wf_col                 (:)   ! col soil water as frac. of whc for top 0.05 m (0-1) 
biogeophys/WaterStateType.F90:     real(r8), pointer :: wf2_col                (:)   ! col soil water as frac. of whc for top 0.17 m (0-1) 
biogeophys/WaterStateType.F90:     real(r8), pointer :: begwb_patch            (:)   ! water mass begining of the time step
biogeophys/WaterStateType.F90:     real(r8), pointer :: begwb_col              (:)   ! water mass begining of the time step
biogeophys/WaterStateType.F90:     real(r8), pointer :: begwb_grc              (:)   ! water mass begining of the time step
biogeophys/WaterStateType.F90:     real(r8), pointer :: endwb_patch            (:)   ! water mass end of the time step
biogeophys/WaterStateType.F90:     real(r8), pointer :: endwb_col              (:)   ! water mass end of the time step
biogeophys/WaterStateType.F90:     real(r8), pointer :: endwb_grc              (:)   ! water mass end of the time step
biogeophys/WaterStateType.F90:     real(r8), pointer :: errh2o_patch           (:)   ! water conservation error (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: errh2o_col             (:)   ! water conservation error (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: errh2o_grc             (:)   ! water conservation error (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: errh2osno_col          (:)   ! snow water conservation error(mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osoi_liq_depth_intg_col(:) ! grid-level depth integrated liquid soil water
biogeophys/WaterStateType.F90:     real(r8), pointer :: h2osoi_ice_depth_intg_col(:) ! grid-level depth integrated ice soil water
biogeophys/WaterStateType.F90:     real(r8), pointer :: beg_h2ocan_grc         (:)   ! grid-level canopy water at begining of the time step (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: beg_h2osno_grc         (:)   ! grid-level snow water at begining of the time step (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: beg_h2osfc_grc         (:)   ! grid-level surface water at begining of the time step (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: beg_h2osoi_liq_grc     (:)   ! grid-level liquid water at begining of the time step (kg/m2)
biogeophys/WaterStateType.F90:     real(r8), pointer :: end_h2ocan_grc         (:)   ! grid-level canopy water at end of the time step (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: end_h2osno_grc         (:)   ! grid-level snow water at end of the time step (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: end_h2osfc_grc         (:)   ! grid-level surface water at end of the time step (mm H2O)
biogeophys/WaterStateType.F90:     real(r8), pointer :: end_h2osoi_liq_grc     (:)   ! grid-level liquid water at end of the time step (kg/m2)
biogeophys/WaterStateType.F90:  end type waterstate_type
biogeophys/WaterStateType.F90:    class(waterstate_type)            :: this
biogeophys/WaterStateType.F90:    !real(r8)          , intent(inout) :: watsat_col(bounds%begc:, 1:)          ! volumetric soil water at saturation (porosity)
biogeophys/WaterStateType.F90:    real(r8)              , intent(inout)    :: watsat_col(bounds%begc:bounds%endc, 1:nlevgrnd)          ! volumetric soil water at saturation (porosity)
biogeophys/WaterStateType.F90:    class(waterstate_type) :: this
biogeophys/WaterStateType.F90:    class(waterstate_type) :: this
biogeophys/WaterStateType.F90:    class(waterstate_type)                :: this
biogeophys/WaterStateType.F90:    real(r8)              , intent(in)    :: watsat_col(bounds%begc:, 1:)          ! volumetric soil water at saturation (porosity)
biogeophys/WaterStateType.F90:      ! Set snow water
biogeophys/WaterStateType.F90:    class(waterstate_type) :: this
biogeophys/WaterStateType.F90:    real(r8)         , intent(in)    :: watsat_col (bounds%begc:, 1:)  ! volumetric soil water at saturation (porosity)
biogeophys/WaterStateType.F90:    real(r8) :: excess       ! excess volumetric soil water
biogeophys/WaterStateType.F90:    real(r8) :: totwat       ! total soil water (mm)
biogeophys/WaterStateType.F90:    class(waterstate_type) :: this
biogeophys/WaterStateType.F90:    ! save current water status to old
biogeophys/WaterStateType.F90:    class(waterstate_type) :: this
biogeophys/SnowSnicarMod.F90:  use WaterStateType  , only : waterstate_type
biogeophys/SnowSnicarMod.F90:  use WaterFluxType   , only : waterflux_type
biogeophys/SnowSnicarMod.F90:  !real(r8), parameter :: C1_liq_Brun89 = 1.28E-17_r8    ! constant for liquid water grain growth [m3 s-1],
biogeophys/SnowSnicarMod.F90:  real(r8), parameter :: C1_liq_Brun89 = 0._r8           ! constant for liquid water grain growth [m3 s-1],
biogeophys/SnowSnicarMod.F90:  real(r8), parameter :: C2_liq_Brun89 = 4.22E-13_r8     ! constant for liquid water grain growth [m3 s-1],
biogeophys/SnowSnicarMod.F90:                        mss_cnc_aer_in, albsfc, albout, flx_abs, waterstate_vars)
biogeophys/SnowSnicarMod.F90:    real(r8)          , intent(in)  :: h2osno_liq     ( bounds%begc: , -nlevsno+1: )      ! liquid water content (col,lyr) [kg/m2]
biogeophys/SnowSnicarMod.F90:    type(waterstate_type) , intent(in)  :: waterstate_vars
biogeophys/SnowSnicarMod.F90:    real(r8):: h2osno_liq_lcl(-nlevsno+1:0)       ! liquid water mass [kg/m2]
biogeophys/SnowSnicarMod.F90:         h2osno      =>   col_ws%h2osno        , & ! Input:  [real(r8) (:)]  snow liquid water equivalent (col) [kg/m2]
biogeophys/SnowSnicarMod.F90:       waterflux_vars, waterstate_vars, temperature_vars)
biogeophys/SnowSnicarMod.F90:    !   2. liquid water redistribution (wet snow)
biogeophys/SnowSnicarMod.F90:    !   3. re-freezing of liquid water
biogeophys/SnowSnicarMod.F90:    ! Liquid water redistribution: Apply the grain growth function from:
biogeophys/SnowSnicarMod.F90:    !   liquid-water content, Annals of Glaciology, 13, 22-26.
biogeophys/SnowSnicarMod.F90:    !   a function of snow liquid water content (LWC). The "LWC=0" parameter
biogeophys/SnowSnicarMod.F90:    ! Re-freezing of liquid water: Assume that re-frozen liquid water clumps
biogeophys/SnowSnicarMod.F90:    type(waterflux_type)   , intent(in)    :: waterflux_vars
biogeophys/SnowSnicarMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SnowSnicarMod.F90:    real(r8) :: frc_liq                     ! fraction of layer mass that is liquid water[frc]    
biogeophys/SnowSnicarMod.F90:         h2osno             => col_ws%h2osno         , & ! Input:  [real(r8) (:)   ]  snow water (col) [mm H2O]               
biogeophys/SnowSnicarMod.F90:         h2osoi_liq         => col_ws%h2osoi_liq     , & ! Input:  [real(r8) (:,:) ]  liquid water content (col,lyr) [kg m-2]
biogeophys/SnowSnicarMod.F90:         sno_liq_top        => col_ws%sno_liq_top    , & ! Output: [real(r8) (:)   ]  liquid water fraction (mass) in top snow layer (col) [frc]
biogeophys/SnowSnicarMod.F90:            ! liquid water faction
biogeophys/SnowSnicarMod.F90:                         mss_cnc_aer_in, albsfc, albout, flx_abs, waterstate_vars)
biogeophys/SnowSnicarMod.F90:     real(r8)          , intent(in)  :: h2osno_liq     ( bounds%begc: , -nlevsno+1: )      ! liquid water content (col,lyr) [kg/m2]
biogeophys/SnowSnicarMod.F90:     type(waterstate_type) , intent(in)  :: waterstate_vars
biogeophys/SnowSnicarMod.F90:     real(r8):: h2osno_liq_lcl(-nlevsno+1:0)       ! liquid water mass [kg/m2]
biogeophys/SnowSnicarMod.F90:         mu       , & ! cosine solar zenith for either snow or water
biogeophys/SnowSnicarMod.F90:          h2osno      =>   waterstate_vars%h2osno_col        , & ! Input:  [real(r8) (:)]  snow liquid water equivalent (col) [kg/m2]
biogeophys/SnowSnicarMod.F90:          frac_sno    =>   waterstate_vars%frac_sno_eff_col    & ! Input:  [real(r8) (:)]  fraction of ground covered by snow (0 to 1)
biogeophys/SoilStateType.F90:     real(r8), pointer :: watsat_col           (:,:) ! col volumetric soil water at saturation (porosity) 
biogeophys/SoilStateType.F90:     real(r8), pointer :: watfc_col            (:,:) ! col volumetric soil water at field capacity (nlevsoi)
biogeophys/SoilStateType.F90:     real(r8), pointer :: watmin_col           (:,:) ! col minimum volumetric soil water (nlevsoi)
biogeophys/SoilStateType.F90:     real(r8), pointer :: soilpsi_col          (:,:) ! col soil water potential in each soil layer (MPa) (CN)
biogeophys/SoilStateType.F90:            avgflag='A', long_name='soil water potential in each soil layer', &
biogeophys/SoilStateType.F90:            avgflag='A', long_name='water saturated', &
biogeophys/SoilStateType.F90:            avgflag='A', long_name='water field capacity', &
biogeophys/SoilStateType.F90:    real(r8), parameter :: min_liquid_pressure = -10132500._r8 ! Minimum soil liquid water pressure [mm]
biogeophys/SoilStateType.F90:                ! water content at field capacity, defined as hk = 0.1 mm/day
biogeophys/SoilStateType.F90:             ! water content at field capacity, defined as hk = 0.1 mm/day
biogeophys/CanopyFluxesMod.F90:  use WaterfluxType         , only : waterflux_type
biogeophys/CanopyFluxesMod.F90:  use WaterstateType        , only : waterstate_type
biogeophys/CanopyFluxesMod.F90:       temperature_vars, waterflux_vars, waterstate_vars, ch4_vars, photosyns_vars, &
biogeophys/CanopyFluxesMod.F90:       soil_water_retention_curve, nitrogenstate_vars, phosphorusstate_vars, &
biogeophys/CanopyFluxesMod.F90:    !     of water flux from the leaf between the iteration step (n+1) and (n)
biogeophys/CanopyFluxesMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/CanopyFluxesMod.F90:    type(waterstate_type)     , intent(inout) :: waterstate_vars
biogeophys/CanopyFluxesMod.F90:    type(waterflux_type)      , intent(inout) :: waterflux_vars
biogeophys/CanopyFluxesMod.F90:    class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
biogeophys/CanopyFluxesMod.F90:    real(r8) :: efe(bounds%begp:bounds%endp)         ! water flux from leaf [mm/s]
biogeophys/CanopyFluxesMod.F90:    real(r8) :: vol_liq                              ! partial volume of liquid water in layer
biogeophys/CanopyFluxesMod.F90:    real(r8) :: rdl                                  ! dry litter layer resistance for water vapor  (s/m)
biogeophys/CanopyFluxesMod.F90:    real(r8) :: vol_liq_so                               ! partial volume of liquid water in layer for which smp_node = smpso
biogeophys/CanopyFluxesMod.F90:    real(r8) :: h2osoi_liq_so                            ! liquid water corresponding to vol_liq_so for this layer [kg/m2]
biogeophys/CanopyFluxesMod.F90:    real(r8) :: h2osoi_liq_sat                           ! liquid water corresponding to eff_porosity for this layer [kg/m2]
biogeophys/CanopyFluxesMod.F90:         smpso                => veg_vp%smpso                          , & ! Input:  [real(r8) (:)   ]  soil water potential at full stomatal opening (mm)                    
biogeophys/CanopyFluxesMod.F90:         smpsc                => veg_vp%smpsc                          , & ! Input:  [real(r8) (:)   ]  soil water potential at full stomatal closure (mm)                    
biogeophys/CanopyFluxesMod.F90:         watsat               => soilstate_vars%watsat_col                 , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)   (constant)                     
biogeophys/CanopyFluxesMod.F90:         t_h2osfc             => col_es%t_h2osfc             , & ! Input:  [real(r8) (:)   ]  surface water temperature                                             
biogeophys/CanopyFluxesMod.F90:         frac_h2osfc          => col_ws%frac_h2osfc           , & ! Input:  [real(r8) (:)   ]  fraction of surface water                                             
biogeophys/CanopyFluxesMod.F90:         h2osoi_vol           => col_ws%h2osoi_vol            , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3] by F. Li and S. Levis
biogeophys/CanopyFluxesMod.F90:         h2osoi_liq           => col_ws%h2osoi_liq            , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                                                
biogeophys/CanopyFluxesMod.F90:         h2osoi_liqvol        => col_ws%h2osoi_liqvol         , & ! Output: [real(r8) (:,:) ]  volumetric liquid water (v/v) 
biogeophys/CanopyFluxesMod.F90:         h2ocan               => veg_ws%h2ocan              , & ! Output: [real(r8) (:)   ]  canopy water (mm H2O)                                                 
biogeophys/CanopyFluxesMod.F90:         h2o_moss_inter       => veg_ws%h2o_moss_inter       , & ! Output: [real(r8) (:)   ]  Internal Moss water content
biogeophys/CanopyFluxesMod.F90:         h2o_moss_wc          => veg_ws%h2o_moss_wc          , & ! Output: [real(r8) (:)   ]  Total Moss water content
biogeophys/CanopyFluxesMod.F90:      !compute volumetric liquid water content
biogeophys/CanopyFluxesMod.F90:      ! calc_root_moist_stress already calculated root soil water stress 'rresis'
biogeophys/CanopyFluxesMod.F90:         call alm_fates%wrap_btran(bounds, fn, filterc_tmp(1:fn), soilstate_vars, waterstate_vars, &
biogeophys/CanopyFluxesMod.F90:               temperature_vars, energyflux_vars, soil_water_retention_curve)
biogeophys/CanopyFluxesMod.F90:              waterstate_vars=waterstate_vars,   &
biogeophys/CanopyFluxesMod.F90:              soil_water_retention_curve=soil_water_retention_curve)
biogeophys/CanopyFluxesMod.F90:      ! First, determine in what grid cells we need to bother 'measuring' soil water, to see if we need irrigation
biogeophys/CanopyFluxesMod.F90:      ! Now 'measure' soil water for the grid cells identified above and see if the 
biogeophys/CanopyFluxesMod.F90:                  ! determine soil water deficit in this layer:
biogeophys/CanopyFluxesMod.F90:            ! XShi 11/20/15 - Calculate the internal water (tissue water
biogeophys/CanopyFluxesMod.F90:                    atm2lnd_vars, temperature_vars, soilstate_vars, waterstate_vars, surfalb_vars, solarabs_vars,    &
biogeophys/CanopyFluxesMod.F90:                    canopystate_vars, photosyns_vars, waterflux_vars, &
biogeophys/CanopyFluxesMod.F90:                 canopystate_vars, photosyns_vars, nitrogenstate_vars, phosphorusstate_vars, waterstate_vars, phase='sun')
biogeophys/CanopyFluxesMod.F90:                 canopystate_vars, photosyns_vars, nitrogenstate_vars, phosphorusstate_vars, waterstate_vars, phase='sha')
biogeophys/CanopyFluxesMod.F90:            ! holds the excess energy if all intercepted water is evaporated
biogeophys/CanopyFluxesMod.F90:               waterstate_vars,waterflux_vars,solarabs_vars,energyflux_vars)
biogeophys/TridiagonalMod.F90:     !Attention: Now the code is specifically written for the soil water coupling with hydraulic
biogeophys/TridiagonalMod.F90:     !water transport equation, but I did not make any attempt here.
biogeophys/PhotosynthesisMod.F90_backup06252020:  use WaterStateType      , only : waterstate_type
biogeophys/PhotosynthesisMod.F90_backup06252020:  use WaterFluxType              , only : waterflux_type
biogeophys/PhotosynthesisMod.F90_backup06252020:  use WaterStateType             , only : waterstate_type
biogeophys/PhotosynthesisMod.F90_backup06252020:  private :: calcstress     ! compute the root water stress
biogeophys/PhotosynthesisMod.F90_backup06252020:  private :: getvegwp       ! calculate vegetation water potential (sun, sha, xylem, root)
biogeophys/PhotosynthesisMod.F90_backup06252020:       waterstate_vars, phase)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type),  intent(in)     :: waterstate_vars
biogeophys/PhotosynthesisMod.F90_backup06252020:    ! Temperature and soil water response functions
biogeophys/PhotosynthesisMod.F90_backup06252020:         h2o_moss_wc   => veg_ws%h2o_moss_wc                  , & !Input: [real(r8) (:)   ]  Total Moss water content
biogeophys/PhotosynthesisMod.F90_backup06252020:         h2osfc        => col_ws%h2osfc                         & !Input: [real(r8) (:)   ]  Surface water
biogeophys/PhotosynthesisMod.F90_backup06252020:         ! Soil water stress applied to Ball-Berry parameters
biogeophys/PhotosynthesisMod.F90_backup06252020:            ! Adjust for soil water
biogeophys/PhotosynthesisMod.F90_backup06252020:                    atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type), intent(in)   :: waterstate_vars
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:            atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:               atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:               atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type), intent(in)   :: waterstate_vars
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:       rh_can, gs_mol, atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type), intent(in)    :: waterstate_vars
biogeophys/PhotosynthesisMod.F90_backup06252020:         h2o_moss_wc   => veg_ws%h2o_moss_wc                   , & ! Input: [real(r8) (:)   ]  Total Moss water content
biogeophys/PhotosynthesisMod.F90_backup06252020:         h2osfc        => col_ws%h2osfc                          & ! Input: [real(r8) (:)   ]  Surface water
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_inst, temperature_inst, soilstate_inst, waterstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:       photosyns_inst, waterflux_inst, nitrogenstate_vars,phosphorusstate_vars)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(inout) :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(inout) :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8) , pointer :: vegwp           (:,:) ! vegetation water matric potential (mm)
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8) :: fs(nlevsoi)             ! root conductance scale factor (reduction in conductance due to decreasing (more negative) root water potential)
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8) :: fs_n(nlevsoi)             ! root conductance scale factor (reduction in conductance due to decreasing (more negative) root water potential)
biogeophys/PhotosynthesisMod.F90_backup06252020:    ! Temperature and soil water response functions
biogeophys/PhotosynthesisMod.F90_backup06252020:      vegwp         => canopystate_inst%vegwp_patch           ! Input/Output: [real(r8) (:,:) ]  vegetation water matric potential (mm)
biogeophys/PhotosynthesisMod.F90_backup06252020:         ! Soil water stress applied to Ball-Berry parameters
biogeophys/PhotosynthesisMod.F90_backup06252020:                    qsatl(p),qaf(p), atm2lnd_inst,canopystate_inst,waterstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:                    soilstate_inst,temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:                               canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:       canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(inout) :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(inout) :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:         vegwp         => canopystate_inst%vegwp_patch            & ! Input/Output: [real(r8) (:,:) ]  vegetation water matric potential (mm)
biogeophys/PhotosynthesisMod.F90_backup06252020:            qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:            qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:               qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:               temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:                  canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:                  qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:                  temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:       canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(inout)    :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(inout)    :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:            qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:       qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(in)    :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(in)    :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:            atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(in)  :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:            atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst,temperature_inst,waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:            atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst,temperature_inst,waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:               atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    ! compute water stress
biogeophys/PhotosynthesisMod.F90_backup06252020:            atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8)               , intent(in)  :: x(nvegwcs)      ! working copy of veg water potential for patch p [mm H2O] 
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(in)  :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90_backup06252020:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8)               , intent(in)  :: x(nvegwcs)      ! working copy of veg water potential for patch p [mm H2O]
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8)               , intent(out) :: f(nvegwcs)      ! water flux divergence [mm/s]
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterflux_type)   , intent(in)  :: waterflux_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    waterflux_inst%sapflow_patch = & 
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8)               , intent(out) :: x(nvegwcs)       ! working copy of veg water potential for patch p
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:         atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    !calculate root water potential
biogeophys/PhotosynthesisMod.F90_backup06252020:    !calculate xylem water potential
biogeophys/PhotosynthesisMod.F90_backup06252020:    !calculate sun/sha leaf water potential
biogeophys/PhotosynthesisMod.F90_backup06252020:       atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90_backup06252020:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8) , intent(in)  :: x             ! water potential input
biogeophys/PhotosynthesisMod.F90_backup06252020:    real(r8) , intent(in) :: x                ! water potential input
biogeophys/SurfaceAlbedoMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/SurfaceAlbedoMod.F90:  ! albedo of melting lakes due to puddling, open water, or white ice
biogeophys/SurfaceAlbedoMod.F90:        aerosol_vars, canopystate_vars, waterstate_vars, &
biogeophys/SurfaceAlbedoMod.F90:     type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/SurfaceAlbedoMod.F90:          h2osno        =>    col_ws%h2osno          , & ! Input:  [real(r8)  (:)   ]  snow water (mm H2O)                     
biogeophys/SurfaceAlbedoMod.F90:          h2osoi_liq    =>    col_ws%h2osoi_liq      , & ! Input:  [real(r8)  (:,:) ]  liquid water content (col,lyr) [kg/m2]
biogeophys/SurfaceAlbedoMod.F90:            lakestate_vars, temperature_vars, waterstate_vars, surfalb_vars)
biogeophys/SurfaceAlbedoMod.F90:       !  2) When 'water-soluble' OPAC optical properties are applied to OC in snow,
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                                waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                           waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                             waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:                           waterstate_vars)
biogeophys/SurfaceAlbedoMod.F90:               canopystate_vars, temperature_vars, waterstate_vars, surfalb_vars)
biogeophys/SurfaceAlbedoMod.F90:        lakestate_vars, temperature_vars, waterstate_vars, surfalb_vars)
biogeophys/SurfaceAlbedoMod.F90:     type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/SurfaceAlbedoMod.F90:    real(r8) :: inc           ! soil water correction factor for soil albedo
biogeophys/SurfaceAlbedoMod.F90:          h2osoi_vol   => col_ws%h2osoi_vol  , & ! Input:  [real(r8) (:,:) ]  volumetric soil water [m3/m3]         
biogeophys/SurfaceAlbedoMod.F90:                   ! Make sure this is no less than the open water albedo above.
biogeophys/SurfaceAlbedoMod.F90:        canopystate_vars, temperature_vars, waterstate_vars, surfalb_vars)
biogeophys/SurfaceAlbedoMod.F90:     type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/CanopyHydrologyMod.F90:  ! (1) water storage of intercepted precipitation
biogeophys/CanopyHydrologyMod.F90:  ! (3) the fraction of foliage covered by water and the fraction
biogeophys/CanopyHydrologyMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/CanopyHydrologyMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/CanopyHydrologyMod.F90:        aerosol_vars, waterstate_vars, waterflux_vars)
biogeophys/CanopyHydrologyMod.F90:     ! (1) water storage of intercepted precipitation
biogeophys/CanopyHydrologyMod.F90:     ! (3) the fraction of foliage covered by water and the fraction
biogeophys/CanopyHydrologyMod.F90:     type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/CanopyHydrologyMod.F90:     type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/CanopyHydrologyMod.F90:     real(r8) :: h2ocanmx                                     ! maximum allowed water on canopy [mm]
biogeophys/CanopyHydrologyMod.F90:     real(r8) :: xrun                                         ! excess water that exceeds the leaf capacity [mm/s]
biogeophys/CanopyHydrologyMod.F90:          qflx_floodg          => atm2lnd_vars%forc_flood_grc              , & ! Input:  [real(r8) (:)   ]  gridcell flux of flood water from RTM   
biogeophys/CanopyHydrologyMod.F90:          h2ocan               => veg_ws%h2ocan             , & ! Output: [real(r8) (:)   ]  total canopy water (mm H2O)             
biogeophys/CanopyHydrologyMod.F90:          h2osfc               => col_ws%h2osfc               , & ! Output: [real(r8) (:)   ]  surface water (mm)                      
biogeophys/CanopyHydrologyMod.F90:          h2osno               => col_ws%h2osno               , & ! Output: [real(r8) (:)   ]  snow water (mm H2O)                     
biogeophys/CanopyHydrologyMod.F90:          frac_h2osfc          => col_ws%frac_h2osfc          , & ! Output: [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/CanopyHydrologyMod.F90:          frac_iceold          => col_ws%frac_iceold          , & ! Output: [real(r8) (:,:) ]  fraction of ice relative to the tot water
biogeophys/CanopyHydrologyMod.F90:          h2osoi_liq           => col_ws%h2osoi_liq           , & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)                  
biogeophys/CanopyHydrologyMod.F90:          swe_old              => col_ws%swe_old              , & ! Output: [real(r8) (:,:) ]  snow water before update              
biogeophys/CanopyHydrologyMod.F90:          qflx_floodc          => col_wf%qflx_floodc           , & ! Output: [real(r8) (:)   ]  column flux of flood water from RTM     
biogeophys/CanopyHydrologyMod.F90:          qflx_snow_h2osfc     => col_wf%qflx_snow_h2osfc      , & ! Output: [real(r8) (:)   ]  snow falling on surface water (mm/s)     
biogeophys/CanopyHydrologyMod.F90:          qflx_prec_grnd       => veg_wf%qflx_prec_grnd      , & ! Output: [real(r8) (:)   ]  water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/CanopyHydrologyMod.F90:          qflx_irrig           => veg_wf%qflx_irrig_patch          , & ! Output: [real(r8) (:)   ]  total water demand or irrigation amount if one-way (mm/s)      
biogeophys/CanopyHydrologyMod.F90:          qflx_surf_irrig_col  => col_wf%qflx_surf_irrig       , & ! Output: [real(r8) (:)   ]  col real surface water irrigation flux (mm H2O /s)  
biogeophys/CanopyHydrologyMod.F90:          qflx_grnd_irrig_col  => col_wf%qflx_grnd_irrig       , & ! Output: [real(r8) (:)   ]  col real groundwater irrigation flux (mm H2O /s)          
biogeophys/CanopyHydrologyMod.F90:          qflx_surf_irrig      => veg_wf%qflx_surf_irrig_patch     , & ! Output: [real(r8) (:)   ]  actual surface water irrigation (mm/s)      
biogeophys/CanopyHydrologyMod.F90:          qflx_grnd_irrig      => veg_wf%qflx_grnd_irrig_patch     , & ! Output: [real(r8) (:)   ]  actual groundwater irrigation (mm/s)     
biogeophys/CanopyHydrologyMod.F90:           if (qflx_irrig_grid(g)*ldomain%f_surf(g) > 0._r8 ) then  ! total supply in grids that need water
biogeophys/CanopyHydrologyMod.F90:             total_sup_irrigrid = total_sup_irrigrid + atm2lnd_vars%supply_grc(g)*ldomain%area(g)  !total volumetric supply across grids that need water
biogeophys/CanopyHydrologyMod.F90:        if (total_sup .eq. 0._r8) then ! no surface water supply at all, no need to adjust
biogeophys/CanopyHydrologyMod.F90:        if (total_sup .gt. 0._r8 .and. total_sup_irrigrid .eq. 0._r8 ) then !no grid needs water but supply > 0, supply don't know where to go
biogeophys/CanopyHydrologyMod.F90:            !This is the ratio between supply over gridcells need water and supply over all gridcells
biogeophys/CanopyHydrologyMod.F90:            !This value should be ranging from 0 to 1 and will be used to concentrate the water supply into gridcells that need irrigation
biogeophys/CanopyHydrologyMod.F90:          ! Add precipitation to leaf water
biogeophys/CanopyHydrologyMod.F90:                   ! The leaf water capacities for solid and liquid are different,
biogeophys/CanopyHydrologyMod.F90:                   ! significance for the water budget because of lower evap. rate at
biogeophys/CanopyHydrologyMod.F90:                   ! vegetation storage of solid water is the same as liquid water.
biogeophys/CanopyHydrologyMod.F90:                   ! Excess water that exceeds the leaf capacity
biogeophys/CanopyHydrologyMod.F90:          ! Add irrigation water directly onto ground (bypassing canopy interception)
biogeophys/CanopyHydrologyMod.F90:          ! Note that it's still possible that (some of) this irrigation water will runoff (as runoff is computed later)
biogeophys/CanopyHydrologyMod.F90:               if (qflx_irrig(p) > 0._r8) then	!this pft needs water	   
biogeophys/CanopyHydrologyMod.F90:                                                                                    ! to grid cells that need water  and then project 
biogeophys/CanopyHydrologyMod.F90:               if (qflx_surf_irrig(p) > qflx_irrig(p)) then  !projected surface water supply is more than total demand, spill the excessive water on the ground
biogeophys/CanopyHydrologyMod.F90:                   !groundwater irrigation may be less than 'ldomain%f_grd(g)*qflx_irrig(p)' if real irrigation is greater than demand
biogeophys/CanopyHydrologyMod.F90:                   !applying irrigation, the over supply is included to balance water             
biogeophys/CanopyHydrologyMod.F90:             else !this pft doesn't need water             
biogeophys/CanopyHydrologyMod.F90:             qflx_rain_grnd(p)     = qflx_prec_grnd_rain(p)           ! liquid water onto ground (mm/s)
biogeophys/CanopyHydrologyMod.F90:       ! Determine the fraction of foliage covered by water and the
biogeophys/CanopyHydrologyMod.F90:            canopystate_vars, waterstate_vars)
biogeophys/CanopyHydrologyMod.F90:       ! apply gridcell flood water flux to non-lake columns
biogeophys/CanopyHydrologyMod.F90:       ! Determine snow height and snow water
biogeophys/CanopyHydrologyMod.F90:             ! no snow on surface water
biogeophys/CanopyHydrologyMod.F90:          ! Currently, the water temperature for the precipitation is simply set
biogeophys/CanopyHydrologyMod.F90:             ! call waterstate_vars%Reset(column=c)
biogeophys/CanopyHydrologyMod.F90:       ! update surface water fraction (this may modify frac_sno)
biogeophys/CanopyHydrologyMod.F90:            waterstate_vars, col_wf%qflx_h2osfc2topsoi)
biogeophys/CanopyHydrologyMod.F90:   subroutine FracWet(numf, filter, canopystate_vars, waterstate_vars)
biogeophys/CanopyHydrologyMod.F90:     type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/CanopyHydrologyMod.F90:          h2ocan         => veg_ws%h2ocan          , & ! Input:  [real(r8) (:) ]  total canopy water (mm H2O)             
biogeophys/CanopyHydrologyMod.F90:        waterstate_vars, qflx_h2osfc2topsoi, no_update)
biogeophys/CanopyHydrologyMod.F90:     ! based on surface microtopography and surface water storage.
biogeophys/CanopyHydrologyMod.F90:     type(waterstate_type) , intent(inout)        :: waterstate_vars
biogeophys/CanopyHydrologyMod.F90:          h2osno       => col_ws%h2osno       , & ! Input:  [real(r8) (:)   ] snow water (mm H2O)                               
biogeophys/CanopyHydrologyMod.F90:          h2osoi_liq   => col_ws%h2osoi_liq   , & ! Output: [real(r8) (:,:) ] liquid water (col,lyr) [kg/m2]                  
biogeophys/CanopyHydrologyMod.F90:          h2osfc       => col_ws%h2osfc       , & ! Output: [real(r8) (:)   ] surface water (mm)                                
biogeophys/CanopyHydrologyMod.F90:          frac_h2osfc  => col_ws%frac_h2osfc    & ! Output: [real(r8) (:)   ] col fractional area with surface water greater than zero 
biogeophys/CanopyHydrologyMod.F90:             !  based on amount of surface water storage (h2osfc) and 
biogeophys/SoilTemperatureMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/SoilTemperatureMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/SoilTemperatureMod.F90:  public :: ComputeGroundHeatFluxAndDeriv       ! Computes G and dG/dT on surface of standing water, snow and soil
biogeophys/SoilTemperatureMod.F90:  public :: SetRHSVec                           ! Sets up the RHS vector for the numerical solution of temperature for snow/standing-water/soil
biogeophys/SoilTemperatureMod.F90:  public :: SetRHSVec_StandingSurfaceWater      ! Sets up the RHS vector corresponding to standing water layers for Urban+Non-Urban columns
biogeophys/SoilTemperatureMod.F90:  public :: SetRHSVec_Soil_StandingSurfaceWater ! Adds contribution from standing water in the RHS vector corresponding to soil layers
biogeophys/SoilTemperatureMod.F90:  public :: SetMatrix                           ! Sets up the matrix for the numerical solution of temperature for snow/standing-water/soil
biogeophys/SoilTemperatureMod.F90:  public :: SetMatrix_StandingSurfaceWater      ! Set up the matrix entries corresponding to standing surface water
biogeophys/SoilTemperatureMod.F90:  public :: SetMatrix_StandingSurfaceWater_Soil ! Set up the matrix entries corresponding to standing surface water-soil interaction
biogeophys/SoilTemperatureMod.F90:  public :: SetMatrix_Soil_StandingSurfaceWater ! Set up the matrix entries corresponding to soil-standing surface water interction
biogeophys/SoilTemperatureMod.F90:  private :: PhaseChangeH2osfc  ! When surface water freezes move ice to bottom snow layer
biogeophys/SoilTemperatureMod.F90:       atm2lnd_vars, urbanparams_vars, canopystate_vars, waterstate_vars, waterflux_vars,&
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/SoilTemperatureMod.F90:    real(r8) :: fn_h2osfc(bounds%begc:bounds%endc)                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8) :: dz_h2osfc(bounds%begc:bounds%endc)                          ! height of standing surface water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8) :: hs_h2osfc(bounds%begc:bounds%endc)                          ! heat flux on standing water [W/m2]
biogeophys/SoilTemperatureMod.F90:         h2osfc                  => col_ws%h2osfc              , & ! Input:  [real(r8) (:)   ]  surface water (mm)                      
biogeophys/SoilTemperatureMod.F90:         frac_h2osfc             => col_ws%frac_h2osfc         , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/SoilTemperatureMod.F90:         htvp                    => col_ef%htvp               , & ! Input:  [real(r8) (:)   ]  latent heat of vapor of water (or sublimation) [j/kg]
biogeophys/SoilTemperatureMod.F90:         eflx_sh_h2osfc          => veg_ef%eflx_sh_h2osfc    , & ! Input:  [real(r8) (:)   ]  sensible heat flux from surface water (W/m**2) [+ to atm]
biogeophys/SoilTemperatureMod.F90:         t_h2osfc                => col_es%t_h2osfc                         , & ! Output: [real(r8) (:)   ]  surface water temperature               
biogeophys/SoilTemperatureMod.F90:         xmf_h2osfc              => col_ef%xmf_h2osfc                       , & ! Output: [real(r8) (:)   ] latent heat of phase change of surface water [col]
biogeophys/SoilTemperatureMod.F90:         c_h2osfc                => col_es%c_h2osfc                         , & ! Output: [real(r8) (:)   ] heat capacity of surface water [col] 
biogeophys/SoilTemperatureMod.F90:           urbanparams_vars, temperature_vars, waterstate_vars, soilstate_vars)
biogeophys/SoilTemperatureMod.F90:           atm2lnd_vars, urbanparams_vars, canopystate_vars, waterstate_vars, &
biogeophys/SoilTemperatureMod.F90:           waterflux_vars, solarabs_vars, energyflux_vars, temperature_vars)
biogeophys/SoilTemperatureMod.F90:         ! surface water layer has two coefficients
biogeophys/SoilTemperatureMod.F90:              waterstate_vars,                        &
biogeophys/SoilTemperatureMod.F90:              waterstate_vars = waterstate_vars,                         &
biogeophys/SoilTemperatureMod.F90:           waterstate_vars,                        &
biogeophys/SoilTemperatureMod.F90:               t_h2osfc(c)         = tvector_urbanc(c,0)          !surface water
biogeophys/SoilTemperatureMod.F90:                  t_h2osfc(c)         = tvector_nourbanc(c,0)          !surface water
biogeophys/SoilTemperatureMod.F90:           waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars)
biogeophys/SoilTemperatureMod.F90:           soilstate_vars, waterstate_vars, waterflux_vars, energyflux_vars, temperature_vars)
biogeophys/SoilTemperatureMod.F90:       temperature_vars, waterstate_vars, urban_column, tvector)
biogeophys/SoilTemperatureMod.F90:    real(r8)               , intent(in)  :: hs_h2osfc( bounds%begc: )                  ! heat flux on standing water [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8)               , intent(in)  :: c_h2osfc( bounds%begc: )                   ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8)               , intent(in)  :: dz_h2osfc( bounds%begc: )                  ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_vars                            !
biogeophys/SoilTemperatureMod.F90:         waterstate_vars,                        &
biogeophys/SoilTemperatureMod.F90:         waterstate_vars,                        &
biogeophys/SoilTemperatureMod.F90:       urbanparams_vars, temperature_vars, waterstate_vars, soilstate_vars)
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    real(r8) :: fl                        ! volume fraction of liquid or unfrozen water to total water
biogeophys/SoilTemperatureMod.F90:    real(r8) :: satw                      ! relative total water content of soil.
biogeophys/SoilTemperatureMod.F90:         h2osno       =>    col_ws%h2osno	     , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                     
biogeophys/SoilTemperatureMod.F90:         h2osoi_liq   =>    col_ws%h2osoi_liq   , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                  
biogeophys/SoilTemperatureMod.F90:         bw           =>    col_ws%bw	     , & ! Output: [real(r8) (:,:) ]  partial density of water in the snow pack (ice + liquid) [kg/m3] 
biogeophys/SoilTemperatureMod.F90:         watsat       =>    soilstate_vars%watsat_col	     , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)
biogeophys/SoilTemperatureMod.F90:       dhsdT, waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars)
biogeophys/SoilTemperatureMod.F90:    ! Only freezing is considered.  When water freezes, move ice to bottom snow layer.
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/SoilTemperatureMod.F90:    real(r8) :: smp                         !frozen water potential (mm)
biogeophys/SoilTemperatureMod.F90:         frac_h2osfc               =>    col_ws%frac_h2osfc       , & ! Input:  [real(r8) (:)   ] fraction of ground covered by surface water (0 to 1)
biogeophys/SoilTemperatureMod.F90:         h2osno                    =>    col_ws%h2osno            , & ! Input:  [real(r8) (:)   ] snow water (mm H2O)                     
biogeophys/SoilTemperatureMod.F90:         h2osfc                    =>    col_ws%h2osfc            , & ! Output: [real(r8) (:)   ] surface water (mm)                      
biogeophys/SoilTemperatureMod.F90:         t_h2osfc                  =>    col_es%t_h2osfc           & ! Output: [real(r8) (:)   ] surface water temperature               
biogeophys/SoilTemperatureMod.F90:            ! mass of water converted from liquid to ice
biogeophys/SoilTemperatureMod.F90:            if(temp1 >= 0._r8) then ! add some frozen water to snow column
biogeophys/SoilTemperatureMod.F90:       soilstate_vars, waterstate_vars, waterflux_vars, energyflux_vars, temperature_vars)
biogeophys/SoilTemperatureMod.F90:    !     and the liquid water mass is greater than the allowable supercooled 
biogeophys/SoilTemperatureMod.F90:    !     liquid water calculated from freezing point depression (i.e. freezing).
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/SoilTemperatureMod.F90:    real(r8) :: supercool(bounds%begc:bounds%endc,nlevgrnd)        !supercooled water in soil (kg/m2) 
biogeophys/SoilTemperatureMod.F90:    real(r8) :: smp                                !frozen water potential (mm)
biogeophys/SoilTemperatureMod.F90:         watsat           =>    soilstate_vars%watsat_col           , & ! Input:  [real(r8) (:,:) ] volumetric soil water at saturation (porosity)
biogeophys/SoilTemperatureMod.F90:         frac_h2osfc      =>    col_ws%frac_h2osfc     , & ! Input:  [real(r8) (:)   ] fraction of ground covered by surface water (0 to 1)
biogeophys/SoilTemperatureMod.F90:         h2osno           =>    col_ws%h2osno          , & ! Output: [real(r8) (:)   ] snow water (mm H2O)                     
biogeophys/SoilTemperatureMod.F90:         h2osoi_liq       =>    col_ws%h2osoi_liq      , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2) (new)             
biogeophys/SoilTemperatureMod.F90:               if (j>=1 .and. h2osoi_liq(c,j) > 0._r8) then   ! ice layer with meltwater
biogeophys/SoilTemperatureMod.F90:               endif  ! liquid water is present
biogeophys/SoilTemperatureMod.F90:       atm2lnd_vars, urbanparams_vars, canopystate_vars, waterstate_vars, &
biogeophys/SoilTemperatureMod.F90:       waterflux_vars, solarabs_vars, energyflux_vars, temperature_vars)
biogeophys/SoilTemperatureMod.F90:    ! (1) The surface of standing water,
biogeophys/SoilTemperatureMod.F90:    real(r8)               , intent(out)   :: hs_h2osfc( bounds%begc: )                 ! heat flux on standing water [W/m2]
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    type(waterflux_type)   , intent(in)    :: waterflux_vars
biogeophys/SoilTemperatureMod.F90:         t_h2osfc                => col_es%t_h2osfc           , & ! Input:  [real(r8) (:)   ]  surface water temperature               
biogeophys/SoilTemperatureMod.F90:         htvp                    => col_ef%htvp                , & ! Input:  [real(r8) (:)   ]  latent heat of vapor of water (or sublimation) [j/kg]
biogeophys/SoilTemperatureMod.F90:         eflx_sh_h2osfc          => veg_ef%eflx_sh_h2osfc    , & ! Input:  [real(r8) (:)   ]  sensible heat flux from surface water (W/m**2) [+ to atm]
biogeophys/SoilTemperatureMod.F90:       temperature_vars, waterstate_vars, urban_column, rvector)
biogeophys/SoilTemperatureMod.F90:    ! standing surface water and soil layers.
biogeophys/SoilTemperatureMod.F90:    real(r8) , intent(in)  :: hs_h2osfc( bounds%begc: )                  ! heat flux on standing water [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8) , intent(in)  :: c_h2osfc( bounds%begc: )                   ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8) , intent(in)  :: dz_h2osfc( bounds%begc: )                  ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type)  , intent(in) :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    real(r8) :: fn_h2osfc(bounds%begc:bounds%endc)                      ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8) :: rt_ssw(bounds%begc:bounds%endc,1)                       ! RHS vector corresponding to standing surface water
biogeophys/SoilTemperatureMod.F90:         t_h2osfc     => col_es%t_h2osfc    , & ! Input: [real(r8) (:)   ]  surface water temperature               
biogeophys/SoilTemperatureMod.F90:         frac_h2osfc  => col_ws%frac_h2osfc  , & ! Input: [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/SoilTemperatureMod.F90:      ! Set entries in RHS vector for surface water layer
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: t_h2osfc(bounds%begc:)                     ! surface water temperature (Kelvin) 
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: t_h2osfc(bounds%begc:)                     ! surface water temperature (Kelvin) 
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: t_h2osfc(bounds%begc: )                    ! surface water temperature (Kelvin) 
biogeophys/SoilTemperatureMod.F90:    ! Sets up RHS vector corresponding to standing surface water
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )            ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )            ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(out) :: fn_h2osfc (bounds%begc: )           ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: t_h2osfc(bounds%begc:)              ! surface water temperature temperature (Kelvin) 
biogeophys/SoilTemperatureMod.F90:    ! surface water ------------------------------------------------------------------
biogeophys/SoilTemperatureMod.F90:       ! surface water layer has two coefficients
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: fn_h2osfc (bounds%begc: )                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                           ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: frac_h2osfc(bounds%begc: )                         ! fractional area with surface water greater than zero
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: fn_h2osfc (bounds%begc: )                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                           ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: fn_h2osfc (bounds%begc: )                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                           ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: fn_h2osfc (bounds%begc: )                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                           ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: fn_h2osfc (bounds%begc: )                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                           ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: frac_sno_eff(bounds%begc: )                        ! fractional area with surface water greater than zero
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: fn_h2osfc (bounds%begc: )                          ! heat diffusion through standing-water/soil interface [W/m2]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                           ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: frac_h2osfc(bounds%begc: )                         ! fractional area with surface water greater than zero
biogeophys/SoilTemperatureMod.F90:    ! surface water  -----------------------------------------------------------------
biogeophys/SoilTemperatureMod.F90:       dhsdT, tk, tk_h2osfc, fact, c_h2osfc, dz_h2osfc, waterstate_vars, urban_column, &
biogeophys/SoilTemperatureMod.F90:    ! standing surface water and soil layers.
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                          ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                          ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    type(waterstate_type), intent(in) :: waterstate_vars
biogeophys/SoilTemperatureMod.F90:    real(r8) :: bmatrix_ssw(bounds%begc:bounds%endc,nband,       0:0       )   ! block-diagonal matrix for standing surface water
biogeophys/SoilTemperatureMod.F90:    real(r8) :: bmatrix_ssw_soil(bounds%begc:bounds%endc,nband, 0:0 )          ! off-diagonal matrix for standing surface water-soil interaction
biogeophys/SoilTemperatureMod.F90:    real(r8) :: bmatrix_soil_ssw(bounds%begc:bounds%endc,nband, 1:1 )          ! off-diagonal matrix for soil-standing surface water interaction
biogeophys/SoilTemperatureMod.F90:         frac_h2osfc  => col_ws%frac_h2osfc  , & ! Input: [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: bmatrix_ssw(bounds%begc:bounds%endc,nband,       0:0       )   ! block-diagonal matrix for standing surface water
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: bmatrix_ssw_soil(bounds%begc:bounds%endc,nband, 0:0 )          ! off-diagonal matrix for standing surface water-soil interaction
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: bmatrix_soil_ssw(bounds%begc:bounds%endc,nband, 1:1 )          ! off-diagonal matrix for soil-standing surface water interaction
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )             ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: frac_h2osfc(bounds%begc: )           ! fractional area with surface water greater than zero
biogeophys/SoilTemperatureMod.F90:         ! surface water layer has two coefficients
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    ! Setup the matrix entries corresponding to internal standing water layer
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )              ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )              ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:       ! surface water layer has two coefficients
biogeophys/SoilTemperatureMod.F90:    ! Setup the matrix entries corresponding to standing surface water-soil layer interaction
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: c_h2osfc( bounds%begc: )                   ! heat capacity of surface water [col]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                   ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:       ! surface water layer has two coefficients
biogeophys/SoilTemperatureMod.F90:    ! Setup the matrix entries corresponding to soil layer-standing surface water interaction
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: dz_h2osfc(bounds%begc: )                   ! Thickness of standing water [m]
biogeophys/SoilTemperatureMod.F90:    real(r8), intent(in)  :: frac_h2osfc(bounds%begc: )                 ! fractional area with surface water greater than zero
biogeophys/SoilTemperatureMod.F90:       ! surface water layer has two coefficients
biogeophys/SoilTemperatureMod.F90:    real(r8)               , intent(in)    :: hs_h2osfc(bounds%begc:bounds%endc)                 ! heat flux on standing water [W/m2]
biogeophys/SurfaceRadiationMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/SurfaceRadiationMod.F90:       atm2lnd_vars, waterstate_vars, canopystate_vars, surfalb_vars, &
biogeophys/SurfaceRadiationMod.F90:     type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/AerosolType.F90:    real(r8)            , intent(in)    :: h2osoi_liq_col( bounds%begc: , -nlevsno+1: ) ! liquid water content (col,lyr) [kg/m2]
biogeophys/LakeFluxesMod.F90:  use WaterfluxType        , only : waterflux_type
biogeophys/LakeFluxesMod.F90:  use WaterstateType       , only : waterstate_type
biogeophys/LakeFluxesMod.F90:       energyflux_vars, waterstate_vars, waterflux_vars, lakestate_vars) 
biogeophys/LakeFluxesMod.F90:    ! Lakes have variable depth, possible snow layers above, freezing & thawing of lake water,
biogeophys/LakeFluxesMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/LakeFluxesMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/LakeFluxesMod.F90:    real(r8) :: eg                                 ! water vapor pressure at temperature T [pa]
biogeophys/LakeFluxesMod.F90:    real(r8) :: htvp(bounds%begc:bounds%endc)      ! latent heat of vapor of water (or sublimation) [j/kg]
biogeophys/LakeFluxesMod.F90:    real(r8) :: bw                                 ! partial density of water (ice + liquid)
biogeophys/LakeFluxesMod.F90:    real(r8), parameter :: sch = 0.66              ! Schmidt # for water in air at neutral stability
biogeophys/LakeFluxesMod.F90:         h2osoi_liq       =>    col_ws%h2osoi_liq         , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                            
biogeophys/LakeFluxesMod.F90:         qflx_prec_grnd   =>    veg_wf%qflx_prec_grnd    , & ! Output: [real(r8) (:)   ]  water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/SoilFluxesMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/SoilFluxesMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/SoilFluxesMod.F90:       waterstate_vars, energyflux_vars, waterflux_vars)            
biogeophys/SoilFluxesMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/SoilFluxesMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/SoilFluxesMod.F90:         frac_h2osfc             => col_ws%frac_h2osfc         , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/SoilFluxesMod.F90:         h2osfc                  => col_ws%h2osfc              , & ! Input:  [real(r8) (:)   ]  surface water (mm)                      
biogeophys/SoilFluxesMod.F90:         h2osoi_liq              => col_ws%h2osoi_liq          , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2) (new)            
biogeophys/SoilFluxesMod.F90:         t_h2osfc                => col_es%t_h2osfc           , & ! Input:  [real(r8) (:)   ]  surface water temperature (K)              
biogeophys/SoilFluxesMod.F90:         t_h2osfc_bef            => col_es%t_h2osfc_bef       , & ! Input:  [real(r8) (:)   ]  saved surface water temperature (K)        
biogeophys/SoilFluxesMod.F90:         htvp                    => col_ef%htvp                , & ! Input:  [real(r8) (:)   ]  latent heat of vapor of water (or sublimation) [j/kg]
biogeophys/SoilFluxesMod.F90:         ! added to trap very small negative soil water,ice
biogeophys/SoilFluxesMod.F90:         ! Correct soil fluxes for possible evaporation in excess of top layer water
biogeophys/SoilHydrologyType.F90:     integer :: h2osfcflag              ! true => surface water is active (namelist)       
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: zwt_col           (:)     ! col water table depth
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: zwts_col          (:)     ! col water table depth, the shallower of the two water depths     
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: zwt_perched_col   (:)     ! col perched water table depth
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: wa_col            (:)     ! col water in the unconfined aquifer (mm)
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: beg_wa_grc        (:)     ! grid-level water in the unconfined aquifer at beginning of the time step (mm)
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: end_wa_grc        (:)     ! grid-level water in the unconfined aquifer at end of the time step (mm)
biogeophys/SoilHydrologyType.F90:     real(r8), pointer :: fsat_col          (:)     ! col fractional area with water table at surface
biogeophys/SoilHydrologyType.F90:         avgflag='A', long_name='water in the unconfined aquifer (vegetated landunits only)', &
biogeophys/SoilHydrologyType.F90:         avgflag='A', long_name='fractional area with water table at surface', &
biogeophys/SoilHydrologyType.F90:         avgflag='A', long_name='water table depth (vegetated landunits only)', &
biogeophys/SoilHydrologyType.F90:         avgflag='A', long_name='perched water table depth (vegetated landunits only)', &
biogeophys/SoilHydrologyType.F90:         long_name='water in the unconfined aquifer', units='mm', &
biogeophys/SoilHydrologyType.F90:         long_name='water table depth', units='m', &
biogeophys/SoilHydrologyType.F90:         long_name='perched water table depth', units='m', &
biogeophys/SoilHydrologyType.F90:     ! h2osoi_ice is actually water equavlent ice content.
biogeophys/SoilHydrologyType.F90:     integer :: h2osfcflag=1          !If surface water is active or not
biogeophys/BareGroundFluxesMod.F90:  use WaterfluxType        , only : waterflux_type
biogeophys/BareGroundFluxesMod.F90:  use WaterstateType       , only : waterstate_type
biogeophys/BareGroundFluxesMod.F90:       waterflux_vars, waterstate_vars)
biogeophys/BareGroundFluxesMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/BareGroundFluxesMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/BareGroundFluxesMod.F90:         watsat           =>    soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)
biogeophys/BareGroundFluxesMod.F90:         t_h2osfc         =>    col_es%t_h2osfc         , & ! Input:  [real(r8) (:)   ]  surface water temperature
biogeophys/BareGroundFluxesMod.F90:         h2osoi_liq       =>    col_ws%h2osoi_liq        , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
biogeophys/BareGroundFluxesMod.F90:         ! water fluxes from soil
biogeophys/SoilWaterMovementMod.F90:  ! module contains different subroutines to couple soil and root water interactions
biogeophys/SoilWaterMovementMod.F90:  public :: init_soilwater_movement
biogeophys/SoilWaterMovementMod.F90:  integer, public :: soilroot_water_method     !0: use the Zeng and deck method, this will be readin from namelist in the future
biogeophys/SoilWaterMovementMod.F90:  subroutine init_soilwater_movement()
biogeophys/SoilWaterMovementMod.F90:    !specify method for doing soil&root water interactions
biogeophys/SoilWaterMovementMod.F90:    soilroot_water_method = zengdecker_2009
biogeophys/SoilWaterMovementMod.F90:    if (use_vsfm) soilroot_water_method = vsfm
biogeophys/SoilWaterMovementMod.F90:    if (use_var_soil_thick .and. soilroot_water_method .eq. zengdecker_2009) then
biogeophys/SoilWaterMovementMod.F90:    if (use_var_soil_thick .and. soilroot_water_method .ne. zengdecker_2009) then
biogeophys/SoilWaterMovementMod.F90:  end subroutine init_soilwater_movement
biogeophys/SoilWaterMovementMod.F90:       waterflux_vars, waterstate_vars, temperature_vars, soil_water_retention_curve)
biogeophys/SoilWaterMovementMod.F90:    ! select one subroutine to do the soil and root water coupling
biogeophys/SoilWaterMovementMod.F90:    use WaterFluxType              , only : waterflux_type
biogeophys/SoilWaterMovementMod.F90:    use WaterStateType             , only : waterstate_type
biogeophys/SoilWaterMovementMod.F90:    use SoilWaterRetentionCurveMod , only : soil_water_retention_curve_type
biogeophys/SoilWaterMovementMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/SoilWaterMovementMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/SoilWaterMovementMod.F90:    class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
biogeophys/SoilWaterMovementMod.F90:    real(r8)                                 :: xs(bounds%begc:bounds%endc) !excess soil water above urban ponding limit
biogeophys/SoilWaterMovementMod.F90:      wa                 =>    soilhydrology_vars%wa_col             , & ! Input:  [real(r8) (:)   ] water in the unconfined aquifer (mm)
biogeophys/SoilWaterMovementMod.F90:      zwt                =>    soilhydrology_vars%zwt_col            , & ! Input:  [real(r8) (:)   ]  water table depth (m)
biogeophys/SoilWaterMovementMod.F90:      h2osoi_ice         =>    col_ws%h2osoi_ice        , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)
biogeophys/SoilWaterMovementMod.F90:      h2osoi_vol         =>    col_ws%h2osoi_vol        , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)
biogeophys/SoilWaterMovementMod.F90:      h2osoi_liq         =>    col_ws%h2osoi_liq          & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)
biogeophys/SoilWaterMovementMod.F90:    select case(soilroot_water_method)
biogeophys/SoilWaterMovementMod.F90:       call soilwater_zengdecker2009(bounds, num_hydrologyc, filter_hydrologyc, &
biogeophys/SoilWaterMovementMod.F90:            waterflux_vars, waterstate_vars, temperature_vars, soil_water_retention_curve)
biogeophys/SoilWaterMovementMod.F90:            waterflux_vars, waterstate_vars, temperature_vars)
biogeophys/SoilWaterMovementMod.F90:            waterflux_vars=waterflux_vars, waterstate_vars=waterstate_vars, &
biogeophys/SoilWaterMovementMod.F90:    !a work around of the negative liquid water embarrassment, which is
biogeophys/SoilWaterMovementMod.F90:  subroutine soilwater_zengdecker2009(bounds, num_hydrologyc, filter_hydrologyc, &
biogeophys/SoilWaterMovementMod.F90:       waterflux_vars, waterstate_vars, temperature_vars, soil_water_retention_curve)
biogeophys/SoilWaterMovementMod.F90:    ! extraction through canopy transpiration.  The net water applied to the
biogeophys/SoilWaterMovementMod.F90:    ! The vertical water flow in an unsaturated porous media is described by
biogeophys/SoilWaterMovementMod.F90:    ! potential vary with soil water content and soil texture based on the work
biogeophys/SoilWaterMovementMod.F90:    ! water mass must equal the net flow across the bounding interface, plus the
biogeophys/SoilWaterMovementMod.F90:    ! rate of internal source or sink. The terms of water flow across the layer
biogeophys/SoilWaterMovementMod.F90:    ! where: wat = volume of water per volume of soil (mm**3/mm**3)
biogeophys/SoilWaterMovementMod.F90:    use WaterFluxType        , only : waterflux_type
biogeophys/SoilWaterMovementMod.F90:    use WaterStateType       , only : waterstate_type
biogeophys/SoilWaterMovementMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/SoilWaterMovementMod.F90:    type(waterflux_type)    , intent(inout) :: waterflux_vars
biogeophys/SoilWaterMovementMod.F90:    type(waterstate_type)   , intent(inout) :: waterstate_vars
biogeophys/SoilWaterMovementMod.F90:    class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
biogeophys/SoilWaterMovementMod.F90:    real(r8) :: qin(bounds%begc:bounds%endc,1:nlevgrnd+1)     ! flux of water into soil layer [mm h2o/s]
biogeophys/SoilWaterMovementMod.F90:    real(r8) :: qout(bounds%begc:bounds%endc,1:nlevgrnd+1)    ! flux of water out of soil layer [mm h2o/s]
biogeophys/SoilWaterMovementMod.F90:    integer  :: jwt(bounds%begc:bounds%endc)                 ! index of the soil layer right above the water table (-)
biogeophys/SoilWaterMovementMod.F90:    real(r8) :: vol_eq(bounds%begc:bounds%endc,1:nlevgrnd+1)  ! equilibrium volumetric water content
biogeophys/SoilWaterMovementMod.F90:    real(r8) :: zwtmm(bounds%begc:bounds%endc)               ! water table depth [mm]
biogeophys/SoilWaterMovementMod.F90:    real(r8) :: vwc_liq(bounds%begc:bounds%endc,1:nlevgrnd+1) ! liquid volumetric water content
biogeophys/SoilWaterMovementMod.F90:         zwt               =>    soilhydrology_vars%zwt_col         , & ! Input:  [real(r8) (:)   ]  water table depth (m)                             
biogeophys/SoilWaterMovementMod.F90:         watsat            =>    soilstate_vars%watsat_col          , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)  
biogeophys/SoilWaterMovementMod.F90:         h2osoi_ice        =>    col_ws%h2osoi_ice     , & ! Input:  [real(r8) (:,:) ]  ice water (kg/m2)
biogeophys/SoilWaterMovementMod.F90:         h2osoi_liq        =>    col_ws%h2osoi_liq     , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
biogeophys/SoilWaterMovementMod.F90:         h2osoi_vol        =>    col_ws%h2osoi_vol     , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeophys/SoilWaterMovementMod.F90:         qflx_deficit      =>    col_wf%qflx_deficit    , & ! Input:  [real(r8) (:)   ]  water deficit to keep non-negative liquid water content
biogeophys/SoilWaterMovementMod.F90:         qflx_rootsoi_col  =>    col_wf%qflx_rootsoi    , & ! Input: [real(r8) (:,:) ]  vegetation/soil water exchange (mm H2O/s) (+ = to atm)
biogeophys/SoilWaterMovementMod.F90:      ! the water table
biogeophys/SoilWaterMovementMod.F90:         ! compute vwc at water table depth (mainly for case when t < tfrz)
biogeophys/SoilWaterMovementMod.F90:                  ! for temperatures close to tfrz, limit vwc to total water content 
biogeophys/SoilWaterMovementMod.F90:      ! calculate the equilibrium water content based on the water table depth
biogeophys/SoilWaterMovementMod.F90:      ! If water table is below soil column calculate zq for the 11th layer
biogeophys/SoilWaterMovementMod.F90:            ! compute hydraulic conductivity based on liquid water content only
biogeophys/SoilWaterMovementMod.F90:            !call soil_water_retention_curve%soil_hk(hksat(c,j), imped(c,j), s1, bsw(c,j), hktmp, dhkds)
biogeophys/SoilWaterMovementMod.F90:            ! compute matric potential and derivative based on liquid water content only
biogeophys/SoilWaterMovementMod.F90:            !call soil_water_retention_curve%soil_suction(sucsat(c,j), s_node, bsw(c,j), smp(c,j), dsmpds)
biogeophys/SoilWaterMovementMod.F90:      !DMR 3/5/15 - fix problem of transpiration drawn below water table not being replaced
biogeophys/SoilWaterMovementMod.F90:      !  This term will be removed from the soil water calculation and subtracted
biogeophys/SoilWaterMovementMod.F90:         if (j == jwt(c)+1) then !water table in this layer
biogeophys/SoilWaterMovementMod.F90:         else                    !water table below this layer
biogeophys/SoilWaterMovementMod.F90:            else if (j == jwt(c)+1) then               !water table in this layer
biogeophys/SoilWaterMovementMod.F90:         if(j > jwt(c)) then !water table is in soil column
biogeophys/SoilWaterMovementMod.F90:            else if (j == jwt(c)+1) then               !water table in this layer
biogeophys/SoilWaterMovementMod.F90:         else ! water table is below soil column
biogeophys/SoilWaterMovementMod.F90:            !call soil_water_retention_curve%soil_suction(sucsat(c,j), s_node, bsw(c,j), smp1, dsmpds)
biogeophys/SoilWaterMovementMod.F90:            else if (j == jwt(c)+1) then               !water table in this layer
biogeophys/SoilWaterMovementMod.F90:      ! Renew the mass of liquid water
biogeophys/SoilWaterMovementMod.F90:               ! Recharge rate qcharge to groundwater (positive to aquifer)
biogeophys/SoilWaterMovementMod.F90:               !call soil_water_retention_curve%soil_hk(hksat(c,jwt(c)+1), s1, bsw(c,jwt(c)+1), ka)
biogeophys/SoilWaterMovementMod.F90:               ! Recharge rate qcharge to groundwater (positive to aquifer)
biogeophys/SoilWaterMovementMod.F90:               ! if water table is below soil column, compute qcharge from dwat2(11)
biogeophys/SoilWaterMovementMod.F90:               ! Recharge rate qcharge to groundwater (positive to aquifer)
biogeophys/SoilWaterMovementMod.F90:               !call soil_water_retention_curve%soil_hk(hksat(c,jwt(c)+1), s1, bsw(c,jwt(c)+1), ka)
biogeophys/SoilWaterMovementMod.F90:               ! Recharge rate qcharge to groundwater (positive to aquifer)
biogeophys/SoilWaterMovementMod.F90:            ! if water table is below soil column, compute qcharge from dwat2(11)
biogeophys/SoilWaterMovementMod.F90:      ! compute the water deficit and reset negative liquid water content
biogeophys/SoilWaterMovementMod.F90:  end subroutine soilwater_zengdecker2009
biogeophys/SoilWaterMovementMod.F90:       waterflux_vars, waterstate_vars, temperature_vars)
biogeophys/SoilWaterMovementMod.F90:    use WaterFluxType             , only : waterflux_type
biogeophys/SoilWaterMovementMod.F90:    use WaterStateType            , only : waterstate_type
biogeophys/SoilWaterMovementMod.F90:    type(waterflux_type)    , intent(inout) :: waterflux_vars
biogeophys/SoilWaterMovementMod.F90:    type(waterstate_type)   , intent(inout) :: waterstate_vars
biogeophys/SoilWaterMovementMod.F90:    real(r8)             :: dzsum                         ! summation of dzmm of layers below water table (mm)
biogeophys/SoilWaterMovementMod.F90:         zwt                       =>    soilhydrology_vars%zwt_col                 , & ! Input:  [real(r8) (:)   ]  water table depth (m)
biogeophys/SoilWaterMovementMod.F90:         watsat                    =>    soilstate_vars%watsat_col                  , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)
biogeophys/SoilWaterMovementMod.F90:         h2osoi_liq                =>    col_ws%h2osoi_liq             , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
biogeophys/SoilWaterMovementMod.F90:         vsfm_soilp_col_1d         =>    col_ws%vsfm_soilp_col_1d      , & ! Output: [real(r8) (:)   ]  1D soil water pressure from VSFM [Pa]
biogeophys/SoilWaterMovementMod.F90:         soilp_col                 =>    col_ws%soilp                  , & ! Output: [real(r8) (:,:) ]  soil water pressure (Pa)
biogeophys/SoilWaterMovementMod.F90:         qflx_rootsoi_col          =>    col_wf%qflx_rootsoi            , & ! Input:  [real(r8) (:,:) ]  vegetation/soil water exchange (mm H2O/s) (+ = to atm)
biogeophys/SoilWaterMovementMod.F90:         qflx_deficit              =>    col_wf%qflx_deficit            , & ! Input:  [real(r8) (:)   ]  water deficit to keep non-negative liquid water content
biogeophys/SoilWaterMovementMod.F90:         mflx_drain_col            =>    col_wf%mflx_drain              , & ! Output: [real(r8) (:)   ]  drainage from groundwater and perched water table (kg H2O /s)
biogeophys/SoilWaterMovementMod.F90:         mflx_neg_snow_col_1d      =>    col_wf%mflx_neg_snow_1d        , & ! Input:  [real(r8) (:)   ]  mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
biogeophys/SoilWaterMovementMod.F90:            ! Find soil layer just above water table
biogeophys/SoilWaterMovementMod.F90:            ! Now ensure the soil layer index corresponding to the water table
biogeophys/SoilWaterMovementMod.F90:               ! if the amount of water being drained from a given layer
biogeophys/SoilWaterMovementMod.F90:               ! exceeds the allowable water, limit the drainage
biogeophys/SoilWaterMovementMod.F90:      ! compute the water deficit and reset negative liquid water content
biogeophys/SoilWaterMovementMod.F90:         filter_hydrologyc, soilstate_inst, canopystate_inst, waterflux_inst, energyflux_inst)
biogeophys/SoilWaterMovementMod.F90:      ! water sink due to plant transpiration. 
biogeophys/SoilWaterMovementMod.F90:      ! The super-set of all columns that should have a root water sink
biogeophys/SoilWaterMovementMod.F90:      !   waterflux_inst%qflx_rootsoi_col(c,j)
biogeophys/SoilWaterMovementMod.F90:      use WaterFluxType       , only : waterflux_type
biogeophys/SoilWaterMovementMod.F90:      type(waterflux_type)    , intent(inout) :: waterflux_inst
biogeophys/SoilWaterMovementMod.F90:               num_filterc,filterc, soilstate_inst, waterflux_inst)
biogeophys/SoilWaterMovementMod.F90:               num_filterc, filterc, waterflux_inst, soilstate_inst, &
biogeophys/SoilWaterMovementMod.F90:               num_filterc,filterc, soilstate_inst, waterflux_inst)
biogeophys/SoilWaterMovementMod.F90:          write(iulog,*) 'The total number of columns flagged to root water uptake'
biogeophys/SoilWaterMovementMod.F90:         filterc, soilstate_vars, waterflux_vars)
biogeophys/SoilWaterMovementMod.F90:    use WaterFluxType    , only : waterflux_type
biogeophys/SoilWaterMovementMod.F90:    type(waterflux_type) , intent(inout) :: waterflux_vars
biogeophys/SoilWaterMovementMod.F90:                                                                        ! vegetation/soil water exchange (m H2O/s) (+ = to atm)
biogeophys/SoilWaterMovementMod.F90:          qflx_rootsoi_frac_patch  =>    veg_wf%qflx_rootsoi_frac    , & ! Output: [real(r8) (:,:) ]  vegetation/soil water exchange (m H2O/s) (+ = to atm)
biogeophys/SoilWaterMovementMod.F90:           num_filterc, filterc, waterflux_vars, soilstate_vars, &
biogeophys/SoilWaterMovementMod.F90:        use WaterFluxType    , only : waterflux_type
biogeophys/SoilWaterMovementMod.F90:        type(waterflux_type) , intent(inout) :: waterflux_vars
biogeophys/SoilWaterMovementMod.F90:              qflx_phs_neg_col    => waterflux_vars%qflx_phs_neg_col    , & ! Input:  [real(r8) (:)   ]  n
biogeophys/SoilWaterMovementMod.F90:                                                                            ! col root and soil water 
biogeophys/SoilWaterMovementMod.F90:              vegwp               => canopystate_vars%vegwp_patch         & ! Input: [real(r8) (:,:) ]  vegetation water 
biogeophys/BalanceCheckMod.F90:  use WaterstateType     , only : waterstate_type
biogeophys/BalanceCheckMod.F90:  use WaterfluxType      , only : waterflux_type
biogeophys/BalanceCheckMod.F90:  public :: BeginColWaterBalance  ! Initialize water balance check
biogeophys/BalanceCheckMod.F90:       soilhydrology_vars, waterstate_vars)
biogeophys/BalanceCheckMod.F90:    ! Initialize column-level water balance at beginning of time step
biogeophys/BalanceCheckMod.F90:    type(waterstate_type)     , intent(inout) :: waterstate_vars
biogeophys/BalanceCheckMod.F90:         h2ocan_patch           =>    veg_ws%h2ocan               , & ! Input:  [real(r8) (:)   ]  canopy water (mm H2O) (pft-level)       
biogeophys/BalanceCheckMod.F90:         h2osfc                 =>    col_ws%h2osfc                 , & ! Input:  [real(r8) (:)   ]  surface water (mm)                      
biogeophys/BalanceCheckMod.F90:         h2osno                 =>    col_ws%h2osno                 , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                     
biogeophys/BalanceCheckMod.F90:         h2osoi_liq             =>    col_ws%h2osoi_liq             , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                  
biogeophys/BalanceCheckMod.F90:         total_plant_stored_h2o =>    col_ws%total_plant_stored_h2o , & ! Input: [real(r8) (:) dynamic water stored in plants
biogeophys/BalanceCheckMod.F90:         zwt                    =>    soilhydrology_vars%zwt_col                 , & ! Input:  [real(r8) (:)   ]  water table depth (m)                   
biogeophys/BalanceCheckMod.F90:         wa                     =>    soilhydrology_vars%wa_col                  , & ! Output: [real(r8) (:)   ]  water in the unconfined aquifer (mm)    
biogeophys/BalanceCheckMod.F90:         h2ocan_col             =>    col_ws%h2ocan                 , & ! Output: [real(r8) (:)   ]  canopy water (mm H2O) (column level)    
biogeophys/BalanceCheckMod.F90:         begwb                  =>    col_ws%begwb                    & ! Output: [real(r8) (:)   ]  water mass begining of the time step    
biogeophys/BalanceCheckMod.F90:      ! Determine beginning water balance for time step
biogeophys/BalanceCheckMod.F90:      ! pft-level canopy water averaged to column
biogeophys/BalanceCheckMod.F90:      ! Add stored plant water to the column water balance
biogeophys/BalanceCheckMod.F90:      ! currently, stored plant water is only dynamic when FATES is turned on.
biogeophys/BalanceCheckMod.F90:        atm2lnd_vars, glc2lnd_vars, solarabs_vars, waterflux_vars, waterstate_vars, &
biogeophys/BalanceCheckMod.F90:     ! This subroutine accumulates the numerical truncation errors of the water
biogeophys/BalanceCheckMod.F90:     ! The error for water balance:
biogeophys/BalanceCheckMod.F90:     ! error = abs(precipitation - change of water storage - evaporation - runoff)
biogeophys/BalanceCheckMod.F90:     type(waterflux_type)  , intent(inout) :: waterflux_vars
biogeophys/BalanceCheckMod.F90:     type(waterstate_type) , intent(inout) :: waterstate_vars
biogeophys/BalanceCheckMod.F90:          volr                       =>    atm2lnd_vars%volr_grc                      , & ! Input:  [real(r8) (:)   ]  river water storage (m3)                 
biogeophys/BalanceCheckMod.F90:          h2osno                     =>    col_ws%h2osno                 , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                     
biogeophys/BalanceCheckMod.F90:          h2osno_old                 =>    col_ws%h2osno_old             , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O) at previous time step
biogeophys/BalanceCheckMod.F90:          begwb                      =>    col_ws%begwb                  , & ! Input:  [real(r8) (:)   ]  water mass begining of the time step    
biogeophys/BalanceCheckMod.F90:          errh2o                     =>    col_ws%errh2o                 , & ! Output: [real(r8) (:)   ]  water conservation error (mm H2O)       
biogeophys/BalanceCheckMod.F90:          endwb                      =>    col_ws%endwb                  , & ! Output: [real(r8) (:)   ]  water mass end of the time step         
biogeophys/BalanceCheckMod.F90:          total_plant_stored_h2o_col =>    col_ws%total_plant_stored_h2o , & ! Input: [real(r8) (:)   ]  water mass in plant tissues (kg m-2)
biogeophys/BalanceCheckMod.F90:          dwb                        =>    col_wf%dwb                     , & ! Output: [real(r8) (:)   ]  change of water mass within the time step [kg/m2/s]
biogeophys/BalanceCheckMod.F90:          qflx_prec_grnd             =>    col_wf%qflx_prec_grnd          , & ! Input:  [real(r8) (:)   ]  water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/BalanceCheckMod.F90:          qflx_snwcp_liq             =>    col_wf%qflx_snwcp_liq          , & ! Input:  [real(r8) (:)   ]  excess liquid water due to snow capping (mm H2O /s) [+]`
biogeophys/BalanceCheckMod.F90:          qflx_snow_h2osfc           =>    col_wf%qflx_snow_h2osfc        , & ! Input:  [real(r8) (:)   ]  snow falling on surface water (mm/s)    
biogeophys/BalanceCheckMod.F90:          qflx_h2osfc_surf           =>    col_wf%qflx_h2osfc_surf        , & ! Input:  [real(r8) (:)   ]  surface water runoff (mm/s)              
biogeophys/BalanceCheckMod.F90:          qflx_top_soil              =>    col_wf%qflx_top_soil           , & ! Input:  [real(r8) (:)   ]  net water input into soil from top (mm/s)
biogeophys/BalanceCheckMod.F90:          qflx_sl_top_soil           =>    col_wf%qflx_sl_top_soil        , & ! Input:  [real(r8) (:)   ]  liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
biogeophys/BalanceCheckMod.F90:          qflx_surf_input            =>    col_wf%qflx_surf_input         , & ! Input:   [real(r8) (:)   ] input to hollow surface water from hummock (mm H2O /s)
biogeophys/BalanceCheckMod.F90:          qflx_lateral               =>    col_wf%qflx_lateral            , & ! Input:  [real(r8) (:)   ]  lateral flux of water to neighboring column (mm H2O /s)
biogeophys/BalanceCheckMod.F90:       !     This flux must be included here to complete the water balance, because it is a
biogeophys/BalanceCheckMod.F90:       !     sink of water as far as CLM is concerned (this water will now be owned by CISM).
biogeophys/BalanceCheckMod.F90:       ! (2) Meltwater from ice (qflx_glcice_melt) is allowed to run off and is included in qflx_qrgwl,
biogeophys/BalanceCheckMod.F90:       !     but the water content of the ice column has not changed (at least for now) because
biogeophys/BalanceCheckMod.F90:          write(iulog,*)'WARNING:  water balance error ',&
biogeophys/BalanceCheckMod.F90:       soilhydrology_vars, waterstate_vars)
biogeophys/BalanceCheckMod.F90:    ! Initialize column-level water balance at beginning of time step
biogeophys/BalanceCheckMod.F90:    type(waterstate_type)     , intent(inout) :: waterstate_vars
biogeophys/BalanceCheckMod.F90:         h2ocan_patch              =>    veg_ws%h2ocan               , & ! Input:  [real(r8) (:)   ]  canopy water (mm H2O) (pft-level)
biogeophys/BalanceCheckMod.F90:         h2osfc                    =>    col_ws%h2osfc                 , & ! Input:  [real(r8) (:)   ]  surface water (mm)
biogeophys/BalanceCheckMod.F90:         h2osno                    =>    col_ws%h2osno                 , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)
biogeophys/BalanceCheckMod.F90:         h2osoi_liq                =>    col_ws%h2osoi_liq             , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
biogeophys/BalanceCheckMod.F90:         total_plant_stored_h2o    =>    col_ws%total_plant_stored_h2o , & ! Input:  [real(r8) (:)   ]  dynamic water stored in plants
biogeophys/BalanceCheckMod.F90:         zwt                       =>    soilhydrology_vars%zwt_col                 , & ! Input:  [real(r8) (:)   ]  water table depth (m)
biogeophys/BalanceCheckMod.F90:         wa                        =>    soilhydrology_vars%wa_col                  , & ! Output: [real(r8) (:)   ]  water in the unconfined aquifer (mm)
biogeophys/BalanceCheckMod.F90:         beg_wa_grc                =>    soilhydrology_vars%beg_wa_grc              , & ! Output: [real(r8) (:)   ]  grid-level water in the unconfined aquifer at begining of the time step (mm)
biogeophys/BalanceCheckMod.F90:         begwb_grc                 =>    grc_ws%begwb                  , & ! Output: [real(r8) (:)   ]  grid-level water mass at begining of the time step (mm)
biogeophys/BalanceCheckMod.F90:         beg_h2ocan_grc            =>    grc_ws%beg_h2ocan             , & ! Output: [real(r8) (:)   ]  grid-level canopy water at begining of the time step (mm)
biogeophys/BalanceCheckMod.F90:         beg_h2osfc_grc            =>    grc_ws%beg_h2osfc             , & ! Output: [real(r8) (:)   ]  grid-level surface water at begining of the time step (mm)
biogeophys/BalanceCheckMod.F90:         beg_h2osoi_liq_grc        =>    grc_ws%beg_h2osoi_liq         , & ! Output: [real(r8) (:)   ]  grid-level depth integrated liquid soil water at begining of the time step (mm)
biogeophys/BalanceCheckMod.F90:         beg_h2osoi_ice_grc        =>    grc_ws%beg_h2osoi_ice         , & ! Output: [real(r8) (:)   ]  grid-level depth integrated ice soil water at begining of the time step (mm)
biogeophys/BalanceCheckMod.F90:      ! Determine beginning water balance for time step
biogeophys/BalanceCheckMod.F90:      ! pft-level canopy water averaged to column
biogeophys/BalanceCheckMod.F90:        atm2lnd_vars, glc2lnd_vars, solarabs_vars, waterflux_vars, &
biogeophys/BalanceCheckMod.F90:        waterstate_vars, energyflux_vars, canopystate_vars, soilhydrology_vars)
biogeophys/BalanceCheckMod.F90:     type(waterflux_type)  , intent(inout) :: waterflux_vars
biogeophys/BalanceCheckMod.F90:     type(waterstate_type) , intent(inout) :: waterstate_vars
biogeophys/BalanceCheckMod.F90:          volr                       =>    atm2lnd_vars%volr_grc                      , & ! Input:  [real(r8) (:)   ]  river water storage (m3)                 
biogeophys/BalanceCheckMod.F90:          h2osno_col                 =>    col_ws%h2osno                 , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)
biogeophys/BalanceCheckMod.F90:          h2osno_old                 =>    col_ws%h2osno_old             , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O) at previous time step
biogeophys/BalanceCheckMod.F90:          begwb_col                  =>    col_ws%begwb                  , & ! Input:  [real(r8) (:)   ]  water mass begining of the time step    
biogeophys/BalanceCheckMod.F90:          begwb_grc                  =>    grc_ws%begwb                  , & ! Input:  [real(r8) (:)   ]  water mass begining of the time step    
biogeophys/BalanceCheckMod.F90:          errh2o                     =>    col_ws%errh2o                 , & ! Output: [real(r8) (:)   ]  water conservation error (mm H2O)       
biogeophys/BalanceCheckMod.F90:          errh2o_grc                 =>    grc_ws%errh2o                 , & ! Output: [real(r8) (:)   ]  water conservation error (mm H2O)
biogeophys/BalanceCheckMod.F90:          endwb_col                  =>    col_ws%endwb                  , & ! Output: [real(r8) (:)   ]  water mass end of the time step         
biogeophys/BalanceCheckMod.F90:          endwb_grc                  =>    grc_ws%endwb                  , & ! Output: [real(r8) (:)   ]  water mass end of the time step         
biogeophys/BalanceCheckMod.F90:          total_plant_stored_h2o_col =>    col_ws%total_plant_stored_h2o , & ! Input: [real(r8) (:)   ]  water mass in plant tissues (kg m-2)
biogeophys/BalanceCheckMod.F90:          dwb                        =>    col_wf%dwb                     , & ! Output: [real(r8) (:)   ]  change of water mass within the time step [kg/m2/s]
biogeophys/BalanceCheckMod.F90:          qflx_prec_grnd             =>    col_wf%qflx_prec_grnd          , & ! Input:  [real(r8) (:)   ]  water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/BalanceCheckMod.F90:          qflx_snwcp_liq             =>    col_wf%qflx_snwcp_liq          , & ! Input:  [real(r8) (:)   ]  excess liquid water due to snow capping (mm H2O /s) [+]`
biogeophys/BalanceCheckMod.F90:          qflx_snow_h2osfc           =>    col_wf%qflx_snow_h2osfc        , & ! Input:  [real(r8) (:)   ]  snow falling on surface water (mm/s)    
biogeophys/BalanceCheckMod.F90:          qflx_h2osfc_surf           =>    col_wf%qflx_h2osfc_surf        , & ! Input:  [real(r8) (:)   ]  surface water runoff (mm/s)              
biogeophys/BalanceCheckMod.F90:          qflx_top_soil              =>    col_wf%qflx_top_soil           , & ! Input:  [real(r8) (:)   ]  net water input into soil from top (mm/s)
biogeophys/BalanceCheckMod.F90:          qflx_sl_top_soil           =>    col_wf%qflx_sl_top_soil        , & ! Input:  [real(r8) (:)   ]  liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
biogeophys/BalanceCheckMod.F90:          qflx_lateral               =>    col_wf%qflx_lateral            , & ! Input:  [real(r8) (:)   ]  lateral flux of water to neighboring column (mm H2O /s)
biogeophys/BalanceCheckMod.F90:          h2ocan_patch               =>    veg_ws%h2ocan               , & ! Input:  [real(r8) (:)   ]  canopy water (mm H2O) (pft-level)
biogeophys/BalanceCheckMod.F90:          wa                         =>    soilhydrology_vars%wa_col                  , & ! Output: [real(r8) (:)   ]  water in the unconfined aquifer (mm)
biogeophys/BalanceCheckMod.F90:          h2ocan_col                 =>    col_ws%h2ocan                 , & ! Input:  [real(r8) (:)   ]  canopy water (mm H2O)
biogeophys/BalanceCheckMod.F90:          h2osfc_col                 =>    col_ws%h2osfc                 , & ! Input:  [real(r8) (:)   ]  surface water (mm)
biogeophys/BalanceCheckMod.F90:          h2osoi_liq_depth_intg      =>    col_ws%h2osoi_liq_depth_intg  , & ! Input:  [real(r8) (:)   ]  depth integrated liquid soil water (kg/m**2)
biogeophys/BalanceCheckMod.F90:          h2osoi_ice_depth_intg      =>    col_ws%h2osoi_ice_depth_intg  , & ! Input:  [real(r8) (:)   ]  depth integrated ice soil water (kg/m**2)
biogeophys/BalanceCheckMod.F90:          end_wa_grc                 =>    soilhydrology_vars%end_wa_grc              , & ! Output: [real(r8) (:)   ]  grid-level water in the unconfined aquifer at end of the time step (mm)
biogeophys/BalanceCheckMod.F90:          end_h2ocan_grc             =>    grc_ws%end_h2ocan             , & ! Output: [real(r8) (:)   ]  grid-level canopy water at end of the time step (mm)
biogeophys/BalanceCheckMod.F90:          end_h2osfc_grc             =>    grc_ws%end_h2osfc             , & ! Output: [real(r8) (:)   ]  grid-level surface water at end of the time step (mm)
biogeophys/BalanceCheckMod.F90:          end_h2osoi_liq_grc         =>    grc_ws%end_h2osoi_liq         , & ! Output: [real(r8) (:)   ]  grid-level depth integrated liquid soil water at end of the time step (mm)
biogeophys/BalanceCheckMod.F90:          end_h2osoi_ice_grc         =>    grc_ws%end_h2osoi_ice           & ! Output: [real(r8) (:)   ]  grid-level depth integrated liquid soil water at end of the time step (mm)
biogeophys/UrbanRadiationMod.F90:  use WaterStateType    , only : waterstate_type
biogeophys/UrbanRadiationMod.F90:       atm2lnd_vars, waterstate_vars, temperature_vars, urbanparams_vars, &
biogeophys/UrbanRadiationMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/LakeHydrologyMod.F90:  ! done. However, there is no infiltration, and the water budget is balanced with 
biogeophys/LakeHydrologyMod.F90:  ! qflx_qrgwl. Lake water mass is kept constant. The soil is simply maintained at
biogeophys/LakeHydrologyMod.F90:  ! volumetric saturation if ice melting frees up pore space. Likewise, if the water
biogeophys/LakeHydrologyMod.F90:  ! the snow-water is runoff and the latent heat is subtracted from the lake.
biogeophys/LakeHydrologyMod.F90:  use WaterfluxType        , only : waterflux_type
biogeophys/LakeHydrologyMod.F90:  use WaterstateType       , only : waterstate_type
biogeophys/LakeHydrologyMod.F90:       atm2lnd_vars, temperature_vars, soilstate_vars, waterstate_vars, waterflux_vars, &
biogeophys/LakeHydrologyMod.F90:    !    -> SnowWater:             change of snow mass and snow water onto soil
biogeophys/LakeHydrologyMod.F90:    !    Add water to soil if melting has left it with open pore space.
biogeophys/LakeHydrologyMod.F90:    !    Cleanup and do water balance.
biogeophys/LakeHydrologyMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/LakeHydrologyMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/LakeHydrologyMod.F90:         qflx_floodg          =>  atm2lnd_vars%forc_flood_grc           , & ! Input:  [real(r8) (:)   ]  gridcell flux of flood water from RTM   
biogeophys/LakeHydrologyMod.F90:         watsat               =>  soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)
biogeophys/LakeHydrologyMod.F90:         begwb                =>  col_ws%begwb             , & ! Input:  [real(r8) (:)   ]  water mass begining of the time step    
biogeophys/LakeHydrologyMod.F90:         endwb                =>  col_ws%endwb             , & ! Output: [real(r8) (:)   ]  water mass end of the time step         
biogeophys/LakeHydrologyMod.F90:         h2osoi_liq_depth_intg=>  col_ws%h2osoi_liq_depth_intg, & ! Output: [real(r8) (:)   ]  grid-level depth integrated liquid soil water
biogeophys/LakeHydrologyMod.F90:         h2osoi_ice_depth_intg=>  col_ws%h2osoi_ice_depth_intg, & ! Output: [real(r8) (:)   ]  grid-level depth integrated ice soil water
biogeophys/LakeHydrologyMod.F90:         sno_liq_top          =>  col_ws%sno_liq_top       , & ! Output: [real(r8) (:)   ]  liquid water fraction in top snow layer [frc] 
biogeophys/LakeHydrologyMod.F90:         frac_iceold          =>  col_ws%frac_iceold       , & ! Output: [real(r8) (:,:) ]  fraction of ice relative to the tot water
biogeophys/LakeHydrologyMod.F90:         h2osno               =>  col_ws%h2osno            , & ! Output: [real(r8) (:)   ]  snow water (mm H2O)                     
biogeophys/LakeHydrologyMod.F90:         snowliq              =>  col_ws%snowliq           , & ! Output: [real(r8) (:)   ]  average snow liquid water               
biogeophys/LakeHydrologyMod.F90:         h2osoi_liq           =>  col_ws%h2osoi_liq        , & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)                  
biogeophys/LakeHydrologyMod.F90:         h2osoi_vol           =>  col_ws%h2osoi_vol        , & ! Output: [real(r8) (:,:) ]  volumetric soil water [m3/m3]         
biogeophys/LakeHydrologyMod.F90:         qflx_floodc          =>  col_wf%qflx_floodc        , & ! Output: [real(r8) (:)   ]  column flux of flood water from RTM     
biogeophys/LakeHydrologyMod.F90:         qflx_prec_grnd       =>  veg_wf%qflx_prec_grnd   , & ! Output: [real(r8) (:)   ]  water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/LakeHydrologyMod.F90:         qflx_prec_grnd_col   =>  col_wf%qflx_prec_grnd     , & ! Output: [real(r8) (:)   ]  water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/LakeHydrologyMod.F90:         qflx_h2osfc_surf     =>  col_wf%qflx_h2osfc_surf   , & ! Output: [real(r8) (:)   ]  surface water runoff (mm H2O /s)        
biogeophys/LakeHydrologyMod.F90:         qflx_top_soil        =>  col_wf%qflx_top_soil      , & ! Output: [real(r8) (:)   ]  net water input into soil from top (mm/s)
biogeophys/LakeHydrologyMod.F90:         qflx_sl_top_soil     =>  col_wf%qflx_sl_top_soil   , & ! Output: [real(r8) (:)   ]  liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
biogeophys/LakeHydrologyMod.F90:      ! Add soil water to water balance.
biogeophys/LakeHydrologyMod.F90:            qflx_rain_grnd(p)     = qflx_prec_grnd_rain(p)           ! liquid water onto ground (mm/s)
biogeophys/LakeHydrologyMod.F90:      ! Determine snow height and snow water
biogeophys/LakeHydrologyMod.F90:            h2osno(c) = h2osno(c) + qflx_snow_grnd_col(c)*dtime  ! snow water equivalent (mm)
biogeophys/LakeHydrologyMod.F90:         ! Currently, the water temperature for the precipitation is simply set
biogeophys/LakeHydrologyMod.F90:             ! call waterstate_vars%Reset(column=c)
biogeophys/LakeHydrologyMod.F90:      ! Determine the change of snow mass and the snow water onto soil
biogeophys/LakeHydrologyMod.F90:           atm2lnd_vars, waterflux_vars, waterstate_vars, aerosol_vars)
biogeophys/LakeHydrologyMod.F90:      ! pore space opens up. Conversely, if excess ice is melting and the liquid water exceeds the
biogeophys/LakeHydrologyMod.F90:      ! saturation value, then remove water.
biogeophys/LakeHydrologyMod.F90:               ! h2osoi_vol will be updated below, and this water addition will come from qflx_qrgwl
biogeophys/LakeHydrologyMod.F90:               ! e.g. heaving soil.  (As with > 10% excess ice modeling, and for the lake water,
biogeophys/LakeHydrologyMod.F90:           temperature_vars, waterstate_vars)
biogeophys/LakeHydrologyMod.F90:           aerosol_vars, temperature_vars, waterflux_vars, waterstate_vars)
biogeophys/LakeHydrologyMod.F90:           aerosol_vars, temperature_vars, waterstate_vars, is_lake=.true.)
biogeophys/LakeHydrologyMod.F90:      ! Determine ending water balance and volumetric soil water
biogeophys/LakeHydrologyMod.F90:         ! Insure water balance using qflx_qrgwl
biogeophys/RootBiophysMod.F90:    ! compute root profile for soil water uptake
biogeophys/HydrologyDrainageMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/HydrologyDrainageMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/HydrologyDrainageMod.F90:       soilhydrology_vars, soilstate_vars, waterstate_vars, waterflux_vars, ep_betr)
biogeophys/HydrologyDrainageMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/HydrologyDrainageMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/HydrologyDrainageMod.F90:         qflx_floodg            => atm2lnd_vars%forc_flood_grc                , & ! Input:  [real(r8) (:)   ]  gridcell flux of flood water from RTM             
biogeophys/HydrologyDrainageMod.F90:         wa                     => soilhydrology_vars%wa_col                  , & ! Input:  [real(r8) (:)   ]  water in the unconfined aquifer (mm)              
biogeophys/HydrologyDrainageMod.F90:         h2osoi_liq_depth_intg  => col_ws%h2osoi_liq_depth_intg , & ! Output: [real(r8) (:)   ]  grid-level depth integrated liquid soil water
biogeophys/HydrologyDrainageMod.F90:         h2osoi_ice_depth_intg  => col_ws%h2osoi_ice_depth_intg , & ! Output: [real(r8) (:)   ]  grid-level depth integrated ice soil water
biogeophys/HydrologyDrainageMod.F90:         h2ocan                 => col_ws%h2ocan                 , & ! Input:  [real(r8) (:)   ]  canopy water (mm H2O)                             
biogeophys/HydrologyDrainageMod.F90:         h2osfc                 => col_ws%h2osfc                 , & ! Input:  [real(r8) (:)   ]  surface water (mm)                                
biogeophys/HydrologyDrainageMod.F90:         h2osno                 => col_ws%h2osno                 , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                               
biogeophys/HydrologyDrainageMod.F90:         begwb                  => col_ws%begwb                  , & ! Input:  [real(r8) (:)   ]  water mass begining of the time step              
biogeophys/HydrologyDrainageMod.F90:         endwb                  => col_ws%endwb                  , & ! Output: [real(r8) (:)   ]  water mass end of the time step                   
biogeophys/HydrologyDrainageMod.F90:         h2osoi_liq             => col_ws%h2osoi_liq             , & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)                            
biogeophys/HydrologyDrainageMod.F90:         h2osoi_vol             => col_ws%h2osoi_vol             , & ! Output: [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeophys/HydrologyDrainageMod.F90:         total_plant_stored_h2o => col_ws%total_plant_stored_h2o , & ! Input [real(r8) (:) dynamic water stored in plants]
biogeophys/HydrologyDrainageMod.F90:         qflx_h2osfc_surf       => col_wf%qflx_h2osfc_surf        , & ! Output: [real(r8) (:)   ]  surface water runoff (mm/s)                        
biogeophys/HydrologyDrainageMod.F90:              soilhydrology_vars, waterstate_vars)
biogeophys/HydrologyDrainageMod.F90:        call ep_betr%BeTRSetBiophysForcing(bounds, col_pp, veg_pp, 1, nlevsoi, waterstate_vars=waterstate_vars)
biogeophys/HydrologyDrainageMod.F90:              waterstate_vars, waterflux_vars)
biogeophys/HydrologyDrainageMod.F90:        call ep_betr%BeTRSetBiophysForcing(bounds, col_pp, veg_pp, 1, nlevsoi, waterstate_vars=waterstate_vars, &
biogeophys/HydrologyDrainageMod.F90:          waterflux_vars=waterflux_vars)
biogeophys/HydrologyDrainageMod.F90:        call ep_betr%RetrieveBiogeoFlux(bounds, 1, nlevsoi, waterflux_vars=waterflux_vars)
biogeophys/HydrologyDrainageMod.F90:            ! add h2osfc to water balance
biogeophys/HydrologyDrainageMod.F90:      ! Add stored plant water to the column water balance
biogeophys/HydrologyDrainageMod.F90:      ! currently, stored plant water is only dynamic when FATES is turned on.
biogeophys/HydrologyDrainageMod.F90:               ! If glc_dyn_runoff_routing=T, add meltwater from istice_mec ice columns to the runoff.
biogeophys/HydrologyDrainageMod.F90:               !    Note: The meltwater contribution is computed in PhaseChanges (part of Biogeophysics2)
biogeophys/HydrologyDrainageMod.F90:            qflx_irr_demand(c) = -1.0_r8 * ldomain%f_surf(g)*qflx_irrig(c) !surface water demand send to MOSART																																		 
biogeophys/CanopyTemperatureMod.F90:  use WaterfluxType        , only : waterflux_type
biogeophys/CanopyTemperatureMod.F90:  use WaterstateType       , only : waterstate_type
biogeophys/CanopyTemperatureMod.F90:       waterstate_vars, waterflux_vars, energyflux_vars, temperature_vars, &
biogeophys/CanopyTemperatureMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/CanopyTemperatureMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/CanopyTemperatureMod.F90:    real(r8) :: eg           ! water vapor pressure at temperature T [pa]
biogeophys/CanopyTemperatureMod.F90:    real(r8) :: wx           ! partial volume of ice and water of surface layer
biogeophys/CanopyTemperatureMod.F90:    real(r8) :: vol_liq      ! partial volume of liquid water in layer
biogeophys/CanopyTemperatureMod.F90:    real(r8) :: fh2o_eff(bounds%begc:bounds%endc) ! effective surface water fraction (i.e. seen by atm)
biogeophys/CanopyTemperatureMod.F90:         frac_h2osfc      =>    col_ws%frac_h2osfc       , & ! Input:  [real(r8) (:)   ] fraction of ground covered by surface water (0 to 1)
biogeophys/CanopyTemperatureMod.F90:         h2osfc           =>    col_ws%h2osfc            , & ! Input:  [real(r8) (:)   ] surface water (mm)                      
biogeophys/CanopyTemperatureMod.F90:         h2osno           =>    col_ws%h2osno            , & ! Input:  [real(r8) (:)   ] snow water (mm H2O)                      
biogeophys/CanopyTemperatureMod.F90:         h2osoi_liq       =>    col_ws%h2osoi_liq        , & ! Input:  [real(r8) (:,:) ] liquid water (kg/m2)                   
biogeophys/CanopyTemperatureMod.F90:         htvp             =>    col_ef%htvp              , & ! Output: [real(r8) (:)   ] latent heat of vapor of water (or sublimation) [j/kg]
biogeophys/CanopyTemperatureMod.F90:         watsat           =>    soilstate_vars%watsat_col             , & ! Input:  [real(r8) (:,:) ] volumetric soil water at saturation (porosity)
biogeophys/CanopyTemperatureMod.F90:         watfc            =>    soilstate_vars%watfc_col              , & ! Input:  [real(r8) (:,:) ] volumetric soil water at field capacity
biogeophys/CanopyTemperatureMod.F90:         t_h2osfc         =>    col_es%t_h2osfc                       , & ! Input:  [real(r8) (:)   ] surface water temperature (K)              
biogeophys/CanopyTemperatureMod.F90:         t_h2osfc_bef     =>    col_es%t_h2osfc_bef                   , & ! Output: [real(r8) (:)   ] saved surface water temperature (K)         
biogeophys/CanopyTemperatureMod.F90:      call calc_soilevap_stress(bounds, num_nolakec, filter_nolakec, soilstate_vars, waterstate_vars)
biogeophys/CanopyTemperatureMod.F90:               ! Pervious road depends on water in total soil column
biogeophys/CanopyStateType.F90:     real(r8),  pointer :: lbl_rsc_h2o_patch        (:)   ! laminar boundary layer resistance for water over dry leaf (s/m)
biogeophys/CanopyStateType.F90:     real(r8) , pointer :: vegwp_patch              (:,:) ! patch vegetation water matric potential (mm)
biogeophys/CanopyStateType.F90:            avgflag='A', long_name='vegetation water matric potential for sun/sha canopy,xyl,root segments', &
biogeophys/CanopyStateType.F90:            long_name='vegetation water matric potential', units='mm', &
biogeophys/SedYieldMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/SedYieldMod.F90:  use WaterStateType    , only : waterstate_type
biogeophys/SedYieldMod.F90:    atm2lnd_vars, canopystate_vars, soilstate_vars, waterstate_vars, &
biogeophys/SedYieldMod.F90:    waterflux_vars, sedflux_vars)
biogeophys/SedYieldMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
biogeophys/SedYieldMod.F90:    type(waterflux_type)     , intent(in)    :: waterflux_vars
biogeophys/SedYieldMod.F90:    real(r8) :: Qs, Ptot, Ie, Dl                           ! water fluxes
biogeophys/SedYieldMod.F90:         flx_sed_yld      =>    sedflux_vars%sed_yld_col              & ! Output: [real(r8) (:) ] sed flux to inland waters (kg/m2/s)
biogeophys/WaterfluxType.F90:  type, public :: waterflux_type
biogeophys/WaterfluxType.F90:     ! water fluxes are in units or mm/s
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_prec_grnd_patch     (:)   ! patch water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_prec_grnd_col       (:)   ! col water onto ground including canopy runoff [kg/(m2 s)]
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_snow_patch       (:)   ! patch evaporation heat flux from snow       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_snow_col         (:)   ! col evaporation heat flux from snow         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_soil_patch       (:)   ! patch evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_soil_col         (:)   ! col evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_h2osfc_patch     (:)   ! patch evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_h2osfc_col       (:)   ! col evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_rootsoi_col         (:,:) ! col root and soil water exchange [mm H2O/s] [+ into root]     
biogeophys/WaterfluxType.F90:     real(r8), pointer :: dwb_col                  (:)   ! coll water mass change [+ increase] [mm H2O/s] 
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_top_soil_col        (:)   ! col net water input into soil from top (mm/s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_h2osfc_surf_col     (:)   ! col surface water runoff
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_snow_h2osfc_col     (:)   ! col snow falling on surface water
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_deficit_col         (:)   ! col water deficit to keep non-negative liquid water content (mm H2O)   
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_floodc_col          (:)   ! col flood water flux at column level
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_sl_top_soil_col     (:)   ! col liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_drain_vr_col        (:,:) ! col liquid water losted as drainage (m /time step)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_h2osfc2topsoi_col   (:)   ! col liquid water coming from surface standing water top soil (mm H2O/s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_snow2topsoi_col     (:)   ! col liquid water coming from residual snow to topsoil (mm H2O/s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_grnd_irrig_col      (:)   ! col real groundwater irrigation flux (mm H2O/s) 
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_grnd_irrig_patch    (:)   ! groundwater irrigation (mm H2O/s) 
biogeophys/WaterfluxType.F90:     real(r8), pointer :: qflx_surf_irrig_patch    (:)   ! surface water irrigation(mm H2O/s) 
biogeophys/WaterfluxType.F90:     real(r8), pointer :: mflx_drain_col_1d        (:)   ! drainage from groundwater table (kg H2O /s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: mflx_drain_perched_col_1d(:)   ! drainage from perched water table (kg H2O /s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: mflx_neg_snow_col_1d     (:)   ! mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
biogeophys/WaterfluxType.F90:     real(r8), pointer :: mflx_drain_col           (:,:) ! drainage from groundwater table (kg H2O /s)
biogeophys/WaterfluxType.F90:  end type waterflux_type
biogeophys/WaterfluxType.F90:    class(waterflux_type) :: this
biogeophys/WaterfluxType.F90:    class(waterflux_type) :: this
biogeophys/WaterfluxType.F90:    class(waterflux_type) :: this
biogeophys/WaterfluxType.F90:    class(waterflux_type) :: this
biogeophys/WaterfluxType.F90:    class(waterflux_type) :: this
biogeophys/WaterfluxType.F90:    class(waterflux_type)              :: this
biogeophys/SoilWaterRetentionCurveMod.F90:  ! Abstract base class for functions to compute soil water retention curve
biogeophys/SoilWaterRetentionCurveMod.F90:  public :: soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveMod.F90:  type, abstract :: soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveMod.F90:  end type soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveMod.F90:       import :: soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveMod.F90:       class(soil_water_retention_curve_type), intent(in) :: this
biogeophys/SoilWaterRetentionCurveMod.F90:       import :: soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveMod.F90:       class(soil_water_retention_curve_type), intent(in) :: this
biogeophys/SoilWaterRetentionCurveMod.F90:       import :: soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveMod.F90:       class(soil_water_retention_curve_type), intent(in) :: this
biogeophys/EnergyFluxType.F90:     real(r8), pointer :: eflx_sh_h2osfc_patch    (:)   ! patch sensible heat flux from surface water (W/m**2) [+ to atm]
biogeophys/EnergyFluxType.F90:     real(r8), pointer :: eflx_hs_h2osfc_col      (:)   ! heat flux on standing water [W/m2]
biogeophys/EnergyFluxType.F90:     real(r8), pointer :: htvp_col                (:)   ! latent heat of vapor of water (or sublimation) [j/kg]
biogeophys/EnergyFluxType.F90:     real(r8), pointer :: eflx_fgr0_h2osfc_col    (:)   ! col soil-surfacewater heat flux (W/m2) [+ = into soil]
biogeophys/AerosolMod.F90:  use WaterfluxType    , only : waterflux_type
biogeophys/AerosolMod.F90:  use WaterstateType   , only : waterstate_type
biogeophys/AerosolMod.F90:       waterflux_vars, waterstate_vars, aerosol_vars)
biogeophys/AerosolMod.F90:    type(waterflux_type)  , intent(in)    :: waterflux_vars 
biogeophys/AerosolMod.F90:    type(waterstate_type) , intent(inout) :: waterstate_vars
biogeophys/AerosolMod.F90:         h2osoi_liq    => col_ws%h2osoi_liq    , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                  
biogeophys/LakeCon.F90:  ! temperature of maximum water density (K)
biogeophys/LakeCon.F90:  ! absorbed in ~1 m of water (the surface layer za_lake).
biogeophys/LakeCon.F90:       ! on whether there is water over nice, not purely a function of ice top temperature.
biogeophys/QSatMod.F90:    ! For water vapor (temperature range 0C-100C)
biogeophys/QSatMod.F90:    ! For derivative:water vapor
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:  ! Factory to create an instance of soil_water_retention_curve_type. This module figures
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:  public :: create_soil_water_retention_curve  ! create an object of class soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:  function create_soil_water_retention_curve() result(soil_water_retention_curve)
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:    ! Create and return an object of soil_water_retention_curve_type. The particular type
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:    use SoilWaterRetentionCurveClappHornberg1978Mod, only : soil_water_retention_curve_clapp_hornberg_1978_type
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:    class(soil_water_retention_curve_type), allocatable :: soil_water_retention_curve  ! function result
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:    character(len=*), parameter :: subname = 'create_soil_water_retention_curve'
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:       allocate(soil_water_retention_curve, &
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:            source=soil_water_retention_curve_clapp_hornberg_1978_type())
biogeophys/SoilWaterRetentionCurveFactoryMod.F90:  end function create_soil_water_retention_curve
biogeophys/WaterBudgetMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/WaterBudgetMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/WaterBudgetMod.F90:  subroutine WaterBudget_Run(bounds, atm2lnd_vars, lnd2atm_vars, waterstate_vars, &
biogeophys/WaterBudgetMod.F90:    type(waterstate_type)    , intent(in) :: waterstate_vars
biogeophys/WaterBudgetMod.F90:  subroutine WaterBudget_SetBeginningMonthlyStates(bounds, waterstate_vars)
biogeophys/WaterBudgetMod.F90:    ! Set grid-level water states at the beginning of a month
biogeophys/WaterBudgetMod.F90:    type(waterstate_type)     , intent(inout) :: waterstate_vars
biogeophys/WaterBudgetMod.F90:         begwb             =>    col_ws%begwb         , & ! Output: [real(r8) (:)   ]  water mass begining of the time step
biogeophys/WaterBudgetMod.F90:         endwb             =>    col_ws%endwb         , & ! Output: [real(r8) (:)   ]  water mass begining of the time step
biogeophys/WaterBudgetMod.F90:         tws_month_beg_grc =>    grc_ws%tws_month_beg   & ! Output: [real(r8) (:)   ]  grid-level water mass at the begining of a month
biogeophys/WaterBudgetMod.F90:  subroutine WaterBudget_SetEndingMonthlyStates(bounds, waterstate_vars)
biogeophys/WaterBudgetMod.F90:    ! Set grid-level water states at the end of a month
biogeophys/WaterBudgetMod.F90:    type(waterstate_type)     , intent(inout) :: waterstate_vars
biogeophys/WaterBudgetMod.F90:         endwb             =>    col_ws%endwb         , & ! Output: [real(r8) (:)   ]  water mass at end of the time step
biogeophys/WaterBudgetMod.F90:         tws_month_end_grc =>    grc_ws%tws_month_end   & ! Output: [real(r8) (:)   ]  grid-level water mass at the end of a month
biogeophys/WaterBudgetMod.F90:      ! If this is the end of a month, save grid-level total water storage
biogeophys/PhotosynthesisMod.F90:  use WaterStateType      , only : waterstate_type
biogeophys/PhotosynthesisMod.F90:  use WaterFluxType              , only : waterflux_type
biogeophys/PhotosynthesisMod.F90:  use WaterStateType             , only : waterstate_type
biogeophys/PhotosynthesisMod.F90:  private :: calcstress     ! compute the root water stress
biogeophys/PhotosynthesisMod.F90:  private :: getvegwp       ! calculate vegetation water potential (sun, sha, xylem, root)
biogeophys/PhotosynthesisMod.F90:       waterstate_vars, phase)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type),  intent(in)     :: waterstate_vars
biogeophys/PhotosynthesisMod.F90:    ! Temperature and soil water response functions
biogeophys/PhotosynthesisMod.F90:         h2o_moss_wc   => veg_ws%h2o_moss_wc                  , & !Input: [real(r8) (:)   ]  Total Moss water content
biogeophys/PhotosynthesisMod.F90:         h2osfc        => col_ws%h2osfc                         & !Input: [real(r8) (:)   ]  Surface water
biogeophys/PhotosynthesisMod.F90:         ! Soil water stress applied to Ball-Berry parameters
biogeophys/PhotosynthesisMod.F90:            ! Adjust for soil water
biogeophys/PhotosynthesisMod.F90:                    atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:       atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type), intent(in)   :: waterstate_vars
biogeophys/PhotosynthesisMod.F90:         atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:         atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:            atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:               atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:               atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:       atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type), intent(in)   :: waterstate_vars
biogeophys/PhotosynthesisMod.F90:         atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:       rh_can, gs_mol, atm2lnd_vars, photosyns_vars, waterstate_vars)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type), intent(in)    :: waterstate_vars
biogeophys/PhotosynthesisMod.F90:         h2o_moss_wc   => veg_ws%h2o_moss_wc                   , & ! Input: [real(r8) (:)   ]  Total Moss water content
biogeophys/PhotosynthesisMod.F90:         h2osfc        => col_ws%h2osfc                          & ! Input: [real(r8) (:)   ]  Surface water
biogeophys/PhotosynthesisMod.F90:       atm2lnd_inst, temperature_inst, soilstate_inst, waterstate_inst, &
biogeophys/PhotosynthesisMod.F90:       photosyns_inst, waterflux_inst, nitrogenstate_vars,phosphorusstate_vars)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:    real(r8) , pointer :: vegwp           (:,:) ! vegetation water matric potential (mm)
biogeophys/PhotosynthesisMod.F90:    real(r8) :: fs(nlevsoi)             ! root conductance scale factor (reduction in conductance due to decreasing (more negative) root water potential)
biogeophys/PhotosynthesisMod.F90:    real(r8) :: fs_n(nlevsoi)             ! root conductance scale factor (reduction in conductance due to decreasing (more negative) root water potential)
biogeophys/PhotosynthesisMod.F90:    ! Temperature and soil water response functions
biogeophys/PhotosynthesisMod.F90:      vegwp         => canopystate_inst%vegwp_patch           ! Input/Output: [real(r8) (:,:) ]  vegetation water matric potential (mm)
biogeophys/PhotosynthesisMod.F90:         ! Soil water stress applied to Ball-Berry parameters
biogeophys/PhotosynthesisMod.F90:                    qsatl(p),qaf(p), atm2lnd_inst,canopystate_inst,waterstate_inst, &
biogeophys/PhotosynthesisMod.F90:                    soilstate_inst,temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:                               canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:       canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:         vegwp         => canopystate_inst%vegwp_patch            & ! Input/Output: [real(r8) (:,:) ]  vegetation water matric potential (mm)
biogeophys/PhotosynthesisMod.F90:            qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:            qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:               qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:               temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:                  canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:                  qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:                  temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:         atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:       canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(inout)    :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(inout)    :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:            qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:       qsatl, qaf, atm2lnd_inst, photosyns_inst, canopystate_inst, waterstate_inst, soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(in)    :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:            atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:            temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:       atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(in)  :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:         atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:            atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst,temperature_inst,waterflux_inst)
biogeophys/PhotosynthesisMod.F90:            atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst,temperature_inst,waterflux_inst)
biogeophys/PhotosynthesisMod.F90:               atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:         atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:    ! compute water stress
biogeophys/PhotosynthesisMod.F90:            atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:       atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:    real(r8)               , intent(in)  :: x(nvegwcs)      ! working copy of veg water potential for patch p [mm H2O] 
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(in)  :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:       atm2lnd_inst,canopystate_inst,waterstate_inst,soilstate_inst, &
biogeophys/PhotosynthesisMod.F90:       temperature_inst, waterflux_inst)
biogeophys/PhotosynthesisMod.F90:    real(r8)               , intent(in)  :: x(nvegwcs)      ! working copy of veg water potential for patch p [mm H2O]
biogeophys/PhotosynthesisMod.F90:    real(r8)               , intent(out) :: f(nvegwcs)      ! water flux divergence [mm/s]
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    type(waterflux_type)   , intent(in)  :: waterflux_inst
biogeophys/PhotosynthesisMod.F90:    waterflux_inst%sapflow_patch = & 
biogeophys/PhotosynthesisMod.F90:       atm2lnd_inst, canopystate_inst, waterstate_inst, soilstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:    real(r8)               , intent(out) :: x(nvegwcs)       ! working copy of veg water potential for patch p
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:         atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:    !calculate root water potential
biogeophys/PhotosynthesisMod.F90:    !calculate xylem water potential
biogeophys/PhotosynthesisMod.F90:    !calculate sun/sha leaf water potential
biogeophys/PhotosynthesisMod.F90:       atm2lnd_inst, canopystate_inst, waterstate_inst, temperature_inst)
biogeophys/PhotosynthesisMod.F90:    type(waterstate_type)  , intent(in)  :: waterstate_inst
biogeophys/PhotosynthesisMod.F90:    real(r8) , intent(in)  :: x             ! water potential input
biogeophys/PhotosynthesisMod.F90:    real(r8) , intent(in) :: x                ! water potential input
biogeophys/TotalWaterAndHeatMod.F90:  ! Routines for computing total column water and heat contents
biogeophys/TotalWaterAndHeatMod.F90:  use clm_varcon         , only : cpice, cpliq, denh2o, tfrz, hfus, aquifer_water_baseline
biogeophys/TotalWaterAndHeatMod.F90:  use WaterstateType     , only : waterstate_type
biogeophys/TotalWaterAndHeatMod.F90:  ! For water (ComputeWaterMass* / ComputeLiqIceMass*): We have separate routines for lake
biogeophys/TotalWaterAndHeatMod.F90:  ! routines parallel with the water routines.
biogeophys/TotalWaterAndHeatMod.F90:  public :: ComputeWaterMassNonLake  ! Compute total water mass of non-lake columns
biogeophys/TotalWaterAndHeatMod.F90:  public :: ComputeWaterMassLake     ! Compute total water mass of lake columns
biogeophys/TotalWaterAndHeatMod.F90:  public :: ComputeLiqIceMassNonLake ! Compute total water mass of non-lake columns, separated into liquid and ice
biogeophys/TotalWaterAndHeatMod.F90:  public :: ComputeLiqIceMassLake    ! Compute total water mass of lake columns, separated into liquid and ice
biogeophys/TotalWaterAndHeatMod.F90:  public :: LiquidWaterHeat          ! Get the total heat content of some mass of liquid water at a given temperature
biogeophys/TotalWaterAndHeatMod.F90:  ! (1) For liquid water pools that don't have an explicit temperature, we assume a
biogeophys/TotalWaterAndHeatMod.F90:  ! Minimum and maximum temperatures for the water temperature used by AdjustDeltaHeatForDeltaLiq
biogeophys/TotalWaterAndHeatMod.F90:  private :: AccumulateLiquidWaterHeat ! For use by ComputeHeat* routines: accumulate quantities that we need to count for liquid water, for a single column
biogeophys/TotalWaterAndHeatMod.F90:       soilhydrology_inst, waterstate_inst, water_mass)
biogeophys/TotalWaterAndHeatMod.F90:    ! Compute total water mass for all non-lake columns
biogeophys/TotalWaterAndHeatMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_inst
biogeophys/TotalWaterAndHeatMod.F90:    real(r8)                 , intent(inout) :: water_mass( bounds%begc: ) ! computed water mass (kg m-2)
biogeophys/TotalWaterAndHeatMod.F90:    SHR_ASSERT_ALL((ubound(water_mass) == (/bounds%endc/)), errMsg(sourcefile, __LINE__))
biogeophys/TotalWaterAndHeatMod.F90:         waterstate_inst = waterstate_inst, &
biogeophys/TotalWaterAndHeatMod.F90:       water_mass(c) = liquid_mass(c) + ice_mass(c)
biogeophys/TotalWaterAndHeatMod.F90:       waterstate_inst, lakestate_vars, water_mass)
biogeophys/TotalWaterAndHeatMod.F90:    ! Compute total water mass for all lake columns
biogeophys/TotalWaterAndHeatMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_inst
biogeophys/TotalWaterAndHeatMod.F90:    real(r8)                 , intent(inout) :: water_mass( bounds%begc: ) ! computed water mass (kg m-2)
biogeophys/TotalWaterAndHeatMod.F90:    SHR_ASSERT_ALL((ubound(water_mass) == (/bounds%endc/)), errMsg(sourcefile, __LINE__))
biogeophys/TotalWaterAndHeatMod.F90:         waterstate_inst = waterstate_inst, &
biogeophys/TotalWaterAndHeatMod.F90:       water_mass(c) = liquid_mass(c) + ice_mass(c)
biogeophys/TotalWaterAndHeatMod.F90:       soilhydrology_inst, waterstate_inst, liquid_mass, ice_mass)
biogeophys/TotalWaterAndHeatMod.F90:    ! Compute total water mass for all non-lake columns, separated into liquid and ice
biogeophys/TotalWaterAndHeatMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_inst
biogeophys/TotalWaterAndHeatMod.F90:    real(r8)                 , intent(inout) :: liquid_mass( bounds%begc: ) ! computed liquid water mass (kg m-2)
biogeophys/TotalWaterAndHeatMod.F90:    logical  :: has_h2o  ! whether this point potentially has water to add
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: h2ocan_col(bounds%begc:bounds%endc)  ! canopy water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: snocan_col(bounds%begc:bounds%endc)  ! canopy snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: liqcan                               ! canopy liquid water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         h2osfc       =>    col_ws%h2osfc     , & ! Input:  [real(r8) (:)   ]  surface water (mm)
biogeophys/TotalWaterAndHeatMod.F90:         h2osno       =>    col_ws%h2osno     , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         h2ocan_patch =>    veg_ws%h2ocan   , & ! Input:  [real(r8) (:)   ]  canopy water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:!         snocan_patch =>    waterstate_inst%snocan_patch   , & ! Input:  [real(r8) (:)   ]  canopy snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         h2osoi_liq   =>    col_ws%h2osoi_liq , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
biogeophys/TotalWaterAndHeatMod.F90:                                                               ! Input:  [real(r8) (:,:) ] plant internal stored water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         wa           =>    soilhydrology_inst%wa_col        & ! Input:  [real(r8) (:)   ] water in the unconfined aquifer (mm)
biogeophys/TotalWaterAndHeatMod.F90:       ! waterstate_inst%snocan_patch and waterstate_inst%liqcan_patch are only set if
biogeophys/TotalWaterAndHeatMod.F90:          ! no liquid water in this case)
biogeophys/TotalWaterAndHeatMod.F90:    ! Soil water content
biogeophys/TotalWaterAndHeatMod.F90:       waterstate_inst, lakestate_vars, liquid_mass, ice_mass)
biogeophys/TotalWaterAndHeatMod.F90:    ! Compute total water mass for all lake columns, separated into liquid and ice
biogeophys/TotalWaterAndHeatMod.F90:    type(waterstate_type) , intent(in)    :: waterstate_inst
biogeophys/TotalWaterAndHeatMod.F90:    real(r8)              , intent(inout) :: liquid_mass( bounds%begc: ) ! computed liquid water mass (kg m-2)
biogeophys/TotalWaterAndHeatMod.F90:         h2osno       =>    col_ws%h2osno     , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         h2osoi_liq   =>    col_ws%h2osoi_liq   & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
biogeophys/TotalWaterAndHeatMod.F90:    ! Snow water content
biogeophys/TotalWaterAndHeatMod.F90:          ! no liquid water in this case)
biogeophys/TotalWaterAndHeatMod.F90:    ! Soil water content of the soil under the lake
biogeophys/TotalWaterAndHeatMod.F90:       temperature_inst, waterstate_inst, soilhydrology_inst, &
biogeophys/TotalWaterAndHeatMod.F90:    ! Optionally, also return the total heat content just of liquid water for each column
biogeophys/TotalWaterAndHeatMod.F90:    ! (excluding latent heat), and/or the total heat capacity just of liquid water for
biogeophys/TotalWaterAndHeatMod.F90:    ! average liquid water temperature (with weightings done by the water mass).
biogeophys/TotalWaterAndHeatMod.F90:    type(waterstate_type)    , intent(in)  :: waterstate_inst
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) , intent(inout) :: heat_liquid( bounds%begc: ) ! sum of heat content for all columns: liquid water, excluding latent heat [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    logical  :: has_h2o  ! whether this point potentially has water to add
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: h2ocan_col(bounds%begc:bounds%endc)  ! canopy water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: snocan_col(bounds%begc:bounds%endc)  ! canopy snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: liqcan        ! canopy liquid water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: latent_heat_liquid(bounds%begc:bounds%endc) ! sum of latent heat content of liquid water [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:         watsat       => soilstate_inst%watsat_col, & ! volumetric soil water at saturation (porosity)
biogeophys/TotalWaterAndHeatMod.F90:         t_h2osfc     => col_es%t_h2osfc, & ! surface water temperature (Kelvin)
biogeophys/TotalWaterAndHeatMod.F90:         h2osoi_liq   => col_ws%h2osoi_liq, & ! liquid water (kg/m2)
biogeophys/TotalWaterAndHeatMod.F90:         h2osoi_ice   => col_ws%h2osoi_ice, & ! frozen water (kg/m2)
biogeophys/TotalWaterAndHeatMod.F90:         h2osno       => col_ws%h2osno, & ! snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         h2osfc       => col_ws%h2osfc, & ! surface water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         h2ocan_patch => veg_ws%h2ocan, & ! canopy water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:!         snocan_patch => waterstate_inst%snocan_patch, & ! canopy snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:         total_plant_stored_h2o_col => col_ws%total_plant_stored_h2o, & ! Input: [real(r8) (:)   ]  water mass in plant tissues (kg m-2)
biogeophys/TotalWaterAndHeatMod.F90:         wa           => soilhydrology_inst%wa_col & ! water in the unconfined aquifer (mm)
biogeophys/TotalWaterAndHeatMod.F90:       !--- canopy water ---
biogeophys/TotalWaterAndHeatMod.F90:       ! TODO(wjs, 2017-03-11) Canopy water currently doesn't have an explicit
biogeophys/TotalWaterAndHeatMod.F90:       ! water inside the plant, which is zero for all non-dynamic models. FATES hydraulics
biogeophys/TotalWaterAndHeatMod.F90:       ! Commentary (rgk 04-2017): water has moved from the soil to the plant tissues,
biogeophys/TotalWaterAndHeatMod.F90:       ! pools.  The energy in the plant water should "bring with it" the internal
biogeophys/TotalWaterAndHeatMod.F90:       ! energy of the soil-to-root water flux.
biogeophys/TotalWaterAndHeatMod.F90:          ! no liquid water in this case)
biogeophys/TotalWaterAndHeatMod.F90:          ! this should all be irrelevant, because (wa(c) - aquifer_water_baseline)
biogeophys/TotalWaterAndHeatMod.F90:               h2o = (wa(c) - aquifer_water_baseline), &
biogeophys/TotalWaterAndHeatMod.F90:          !--- surface water ---
biogeophys/TotalWaterAndHeatMod.F90:    !--- below ground (soil & soil water) and related urban columns
biogeophys/TotalWaterAndHeatMod.F90:       soilstate_inst, temperature_inst, waterstate_inst, &
biogeophys/TotalWaterAndHeatMod.F90:    ! Optionally, also return the total heat content just of liquid water for each column
biogeophys/TotalWaterAndHeatMod.F90:    ! (excluding latent heat), and/or the total heat capacity just of liquid water for
biogeophys/TotalWaterAndHeatMod.F90:    ! average liquid water temperature (with weightings done by the water mass).
biogeophys/TotalWaterAndHeatMod.F90:    type(waterstate_type)    , intent(in)  :: waterstate_inst
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) , intent(inout) :: heat_liquid( bounds%begc: ) ! sum of heat content for all columns: liquid water, excluding latent heat [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: latent_heat_liquid(bounds%begc:bounds%endc) ! sum of latent heat content of liquid water [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:         watsat       => soilstate_inst%watsat_col, & ! volumetric soil water at saturation (porosity)
biogeophys/TotalWaterAndHeatMod.F90:         h2osoi_liq   => col_ws%h2osoi_liq, & ! liquid water (kg/m2)
biogeophys/TotalWaterAndHeatMod.F90:         h2osoi_ice   => col_ws%h2osoi_ice, & ! frozen water (kg/m2)
biogeophys/TotalWaterAndHeatMod.F90:         h2osno       => col_ws%h2osno & ! snow water (mm H2O)
biogeophys/TotalWaterAndHeatMod.F90:    ! Soil water content of the soil under the lake
biogeophys/TotalWaterAndHeatMod.F90:    ! TODO(wjs, 2017-03-11) Include heat content of water in lakes, once we include
biogeophys/TotalWaterAndHeatMod.F90:    ! lake water as an explicit water state (https://github.com/NCAR/CLM/issues/2)
biogeophys/TotalWaterAndHeatMod.F90:       liquid_water_temp1, liquid_water_temp2, &
biogeophys/TotalWaterAndHeatMod.F90:    ! water heat content on a pool-by-pool (and layer-by-layer) basis, but rather on a
biogeophys/TotalWaterAndHeatMod.F90:    ! average temperature of the liquid water in the grid cell. This can be a poor
biogeophys/TotalWaterAndHeatMod.F90:    ! glacier's liquid water temperature factors into the average liquid water
biogeophys/TotalWaterAndHeatMod.F90:    real(r8), intent(in) :: liquid_water_temp1( bounds%begg: ) ! average liquid water temperature before land cover change [K]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8), intent(in) :: liquid_water_temp2( bounds%begg: ) ! average liquid water temperature after land cover change [K]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: water_temperature  ! [K]
biogeophys/TotalWaterAndHeatMod.F90:    SHR_ASSERT_ALL((ubound(liquid_water_temp1) == (/bounds%endg/)), errMsg(sourcefile, __LINE__))
biogeophys/TotalWaterAndHeatMod.F90:    SHR_ASSERT_ALL((ubound(liquid_water_temp2) == (/bounds%endg/)), errMsg(sourcefile, __LINE__))
biogeophys/TotalWaterAndHeatMod.F90:             ! There was more water in the initial state than in the final state. We'll
biogeophys/TotalWaterAndHeatMod.F90:             ! to the average temperature of liquid water in the initial state.
biogeophys/TotalWaterAndHeatMod.F90:             water_temperature = liquid_water_temp1(g)
biogeophys/TotalWaterAndHeatMod.F90:             ! There is more water in the final state than in the initial state. We'll
biogeophys/TotalWaterAndHeatMod.F90:             ! generate a negative runoff. We assume that we're sucking water out of the
biogeophys/TotalWaterAndHeatMod.F90:             ! ocean at a temperature equal to the average temperature of liquid water in
biogeophys/TotalWaterAndHeatMod.F90:             water_temperature = liquid_water_temp2(g)
biogeophys/TotalWaterAndHeatMod.F90:          ! ensure that the estimated water temperature is in some reasonable bounds.
biogeophys/TotalWaterAndHeatMod.F90:          ! negative water volumes included in the averages.
biogeophys/TotalWaterAndHeatMod.F90:          water_temperature = max(water_temperature, DeltaLiqMinTemp)
biogeophys/TotalWaterAndHeatMod.F90:          water_temperature = min(water_temperature, DeltaLiqMaxTemp)
biogeophys/TotalWaterAndHeatMod.F90:               temp = water_temperature, &
biogeophys/TotalWaterAndHeatMod.F90:    ! Get the total heat content (including latent heat) of some mass of liquid water at
biogeophys/TotalWaterAndHeatMod.F90:    real(r8), intent(in) :: h2o   ! water mass [kg/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: heat_liquid ! heat content of liquid water, excluding latent heat [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8) :: latent_heat_liquid ! latent heat content of liquid water [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    ! count for liquid water, for a single column
biogeophys/TotalWaterAndHeatMod.F90:    real(r8), intent(in) :: h2o   ! water mass [kg/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8), intent(inout) :: heat_liquid        ! accumulated total heat content of liquid water for this column, excluding latent heat [J/m^2]
biogeophys/TotalWaterAndHeatMod.F90:    real(r8), intent(inout) :: latent_heat_liquid ! accumulated total latent heat content of liquid water for this column [J/m^2]
biogeophys/SurfaceResistanceMod.F90:  ! transported with BeTR. The surface here refers to water and soil, not including canopy
biogeophys/SurfaceResistanceMod.F90:  use WaterStateType, only : waterstate_type
biogeophys/SurfaceResistanceMod.F90:        soilstate_vars, waterstate_vars)
biogeophys/SurfaceResistanceMod.F90:     type(waterstate_type) , intent(in)    :: waterstate_vars
biogeophys/SurfaceResistanceMod.F90:               soilstate_vars, waterstate_vars, soilbeta(bounds%begc:bounds%endc))
biogeophys/SurfaceResistanceMod.F90:        soilstate_vars, waterstate_vars, soilbeta)
biogeophys/SurfaceResistanceMod.F90:     type(waterstate_type) , intent(in)    :: waterstate_vars
biogeophys/SurfaceResistanceMod.F90:          watsat      =>    soilstate_vars%watsat_col      , & ! Input:  [real(r8) (:,:)] volumetric soil water at saturation (porosity)
biogeophys/SurfaceResistanceMod.F90:          watfc       =>    soilstate_vars%watfc_col       , & ! Input:  [real(r8) (:,:)] volumetric soil water at field capacity
biogeophys/SurfaceResistanceMod.F90:          watmin      =>    soilstate_vars%watmin_col      , & ! Input:  [real(r8) (:,:)] min volumetric soil water
biogeophys/SurfaceResistanceMod.F90:          sucmin      =>    soilstate_vars%sucmin_col      , & ! Input:  [real(r8) (:,:)] min volumetric soil water
biogeophys/SurfaceResistanceMod.F90:          soilp_col   =>    col_ws%soilp      , & ! Input:  [real(r8) (:,:)] soil water pressure (Pa)
biogeophys/SurfaceResistanceMod.F90:          h2osoi_liq  =>    col_ws%h2osoi_liq , & ! Input:  [real(r8) (:,:)] liquid water (kg/m2)                   
biogeophys/SurfaceResistanceMod.F90:          frac_h2osfc =>    col_ws%frac_h2osfc  & ! Input:  [real(r8) (:)]  fraction of ground covered by surface water (0 to 1)
biogeophys/SurfaceResistanceMod.F90:                if (wx < watfc(c,1) ) then  !when water content of ths top layer is less than that at F.C.
biogeophys/SurfaceResistanceMod.F90:                else   !when water content of ths top layer is more than that at F.C.
biogeophys/SurfaceResistanceMod.F90:                   if (wx < watfc(c,1) ) then  !when water content of ths top layer is less than that at F.C.
biogeophys/SurfaceResistanceMod.F90:                   else   !when water content of ths top layer is more than that at F.C.
biogeophys/SnowHydrologyMod.F90:  ! - Change of snow mass and the snow water onto soil
biogeophys/SnowHydrologyMod.F90:  use WaterfluxType   , only : waterflux_type
biogeophys/SnowHydrologyMod.F90:  use WaterstateType  , only : waterstate_type
biogeophys/SnowHydrologyMod.F90:  public :: SnowWater                  ! Change of snow mass and the snow water onto soil
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_bcphi = 0.20_r8 ! scavenging factor for hydrophillic BC inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_bcpho = 0.03_r8 ! scavenging factor for hydrophobic BC inclusion in meltwater  [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_ocphi = 0.20_r8 ! scavenging factor for hydrophillic OC inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_ocpho = 0.03_r8 ! scavenging factor for hydrophobic OC inclusion in meltwater  [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_dst1  = 0.02_r8 ! scavenging factor for dust species 1 inclusion in meltwater  [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_dst2  = 0.02_r8 ! scavenging factor for dust species 2 inclusion in meltwater  [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_dst3  = 0.01_r8 ! scavenging factor for dust species 3 inclusion in meltwater  [frc]
biogeophys/SnowHydrologyMod.F90:  real(r8), public, parameter :: scvng_fct_mlt_dst4  = 0.01_r8 ! scavenging factor for dust species 4 inclusion in meltwater  [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_bcphi = 1.00_r8   ! scavenging factor for hydrophillic BC inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_bcpho = 0.03_r8   ! scavenging factor for hydrophobic BC inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_ocphi = 1.00_r8   ! scavenging factor for hydrophillic OC inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_ocpho = 0.03_r8   ! scavenging factor for hydrophobic OC inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_dst1  = 0.03_r8   ! scavenging factor for dust species 1 inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_dst2  = 0.03_r8   ! scavenging factor for dust species 2 inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_dst3  = 0.03_r8   ! scavenging factor for dust species 3 inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:  !real(r8), public, parameter :: scvng_fct_mlt_dst4  = 0.03_r8   ! scavenging factor for dust species 4 inclusion in meltwater [frc]
biogeophys/SnowHydrologyMod.F90:       atm2lnd_vars, waterflux_vars, waterstate_vars, aerosol_vars)
biogeophys/SnowHydrologyMod.F90:    ! Evaluate the change of snow mass and the snow water onto soil.
biogeophys/SnowHydrologyMod.F90:    ! based scheme, which permits a part of liquid water over the holding
biogeophys/SnowHydrologyMod.F90:    ! flow is assumed. The water flow out of the bottom of the snow pack will
biogeophys/SnowHydrologyMod.F90:    ! participate as the input of the soil water and runoff.  This subroutine
biogeophys/SnowHydrologyMod.F90:    type(waterflux_type)  , intent(inout) :: waterflux_vars
biogeophys/SnowHydrologyMod.F90:    type(waterstate_type) , intent(inout) :: waterstate_vars
biogeophys/SnowHydrologyMod.F90:    real(r8) :: qin(bounds%begc:bounds%endc)                       ! water flow into the elmement (mm/s) 
biogeophys/SnowHydrologyMod.F90:    real(r8) :: qout(bounds%begc:bounds%endc)                      ! water flow out of the elmement (mm/s)
biogeophys/SnowHydrologyMod.F90:    real(r8) :: vol_liq(bounds%begc:bounds%endc,-nlevsno+1:0)      ! partial volume of liquid water in layer
biogeophys/SnowHydrologyMod.F90:         h2osno         => col_ws%h2osno        , & ! Input:  [real(r8) (:)   ] snow water (mm H2O)                     
biogeophys/SnowHydrologyMod.F90:         h2osoi_liq     => col_ws%h2osoi_liq    , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)                   
biogeophys/SnowHydrologyMod.F90:         qflx_top_soil  => col_wf%qflx_top_soil  , & ! Output: [real(r8) (:)   ] net water input into soil from top (mm/s)
biogeophys/SnowHydrologyMod.F90:         mflx_neg_snow_col_1d =>  col_wf%mflx_neg_snow_1d , & ! Output:  [real(r8) (:)   ]  mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
biogeophys/SnowHydrologyMod.F90:         ! if negative, reduce deeper layer's liquid water content sequentially
biogeophys/SnowHydrologyMod.F90:      ! the genernal expression for water flow is "K * ss**3", however,
biogeophys/SnowHydrologyMod.F90:      ! when the liquid water of layer exceeds the layer's holding
biogeophys/SnowHydrologyMod.F90:      ! capacity, the excess meltwater adds to the underlying neighbor layer.
biogeophys/SnowHydrologyMod.F90:      !    layer in water flow, proportional to (current) concentration
biogeophys/SnowHydrologyMod.F90:               ! mass of ice+water: in extremely rare circumstances, this can
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:               ! 1. flux with meltwater:
biogeophys/SnowHydrologyMod.F90:      ! Adjust layer thickness for any water+ice content changes in excess of previous 
biogeophys/SnowHydrologyMod.F90:    ! state based on snow sublimation and re-freezing of liquid water.
biogeophys/SnowHydrologyMod.F90:        temperature_vars, waterstate_vars)
biogeophys/SnowHydrologyMod.F90:     type(waterstate_type)  , intent(in) :: waterstate_vars
biogeophys/SnowHydrologyMod.F90:     real(r8) :: fi                              ! Fraction of ice relative to the total water content at current time step
biogeophys/SnowHydrologyMod.F90:     real(r8) :: wx                              ! water mass (ice+liquid) [kg/m2]
biogeophys/SnowHydrologyMod.F90:     real(r8) :: wsum                            ! snowpack total water mass (ice+liquid) [kg/m2]
biogeophys/SnowHydrologyMod.F90:          frac_iceold  => col_ws%frac_iceold  , & ! Input:  [real(r8) (:,:) ] fraction of ice relative to the tot water
biogeophys/SnowHydrologyMod.F90:          h2osoi_liq   => col_ws%h2osoi_liq   , & ! Input:  [real(r8) (:,:) ] liquid water (kg/m2)                   
biogeophys/SnowHydrologyMod.F90:                   ! Liquid water term
biogeophys/SnowHydrologyMod.F90:        aerosol_vars, temperature_vars, waterflux_vars, waterstate_vars)
biogeophys/SnowHydrologyMod.F90:     type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/SnowHydrologyMod.F90:     type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SnowHydrologyMod.F90:     real(r8):: zwliq (bounds%begc:bounds%endc)  ! total liquid water in snow
biogeophys/SnowHydrologyMod.F90:          h2osno           => col_ws%h2osno          , & ! Output: [real(r8) (:)   ] snow water (mm H2O)                      
biogeophys/SnowHydrologyMod.F90:          h2osoi_liq       => col_ws%h2osoi_liq      , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)                   
biogeophys/SnowHydrologyMod.F90:          qflx_sl_top_soil => col_wf%qflx_sl_top_soil , & ! Output: [real(r8) (:)   ] liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
biogeophys/SnowHydrologyMod.F90:          qflx_snow2topsoi => col_wf%qflx_snow2topsoi , & ! Output: [real(r8) (:)   ] liquid water merged into top soil from snow
biogeophys/SnowHydrologyMod.F90:       ! The liquid water assumes ponding on soil surface.
biogeophys/SnowHydrologyMod.F90:                ! this is where water is transfered from layer 0 (snow) to layer 1 (soil)
biogeophys/SnowHydrologyMod.F90:        aerosol_vars, temperature_vars, waterstate_vars, is_lake)
biogeophys/SnowHydrologyMod.F90:     type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SnowHydrologyMod.F90:     real(r8) :: swliq(bounds%begc:bounds%endc,nlevsno)   ! Partial volume of liquid water [m3/m3]
biogeophys/SnowHydrologyMod.F90:          h2osoi_liq => col_ws%h2osoi_liq   , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)                   
biogeophys/SnowHydrologyMod.F90:     real(r8), intent(in)    :: wliq2 ! liquid water of element 2 [kg/m2]
biogeophys/SnowHydrologyMod.F90:     real(r8), intent(inout) :: wliq  ! liquid water of element 1
biogeophys/SnowHydrologyMod.F90:     real(r8) :: wliqc ! Combined liquid water [kg/m2]
biogeophys/HydrologyNoDrainageMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/HydrologyNoDrainageMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/HydrologyNoDrainageMod.F90:       waterflux_vars, waterstate_vars, &
biogeophys/HydrologyNoDrainageMod.F90:       soil_water_retention_curve, ep_betr, &
biogeophys/HydrologyNoDrainageMod.F90:    !    -> SnowWater:             change of snow mass and snow water onto soil
biogeophys/HydrologyNoDrainageMod.F90:    !    -> SoilWater:             soil water movement between layers
biogeophys/HydrologyNoDrainageMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/HydrologyNoDrainageMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
biogeophys/HydrologyNoDrainageMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
biogeophys/HydrologyNoDrainageMod.F90:    class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
biogeophys/HydrologyNoDrainageMod.F90:    real(r8) :: rwat(bounds%begc:bounds%endc) ! soil water wgted by depth to maximum depth of 0.5 m
biogeophys/HydrologyNoDrainageMod.F90:    real(r8) :: tsw                           ! volumetric soil water to 0.5 m
biogeophys/HydrologyNoDrainageMod.F90:    real(r8) :: stsw                          ! volumetric soil water to 0.5 m at saturation
biogeophys/HydrologyNoDrainageMod.F90:    real(r8) :: fracl                         ! fraction of soil layer contributing to 10cm total soil water
biogeophys/HydrologyNoDrainageMod.F90:         t_h2osfc           => col_es%t_h2osfc          , & ! Input:  [real(r8) (:)   ]  surface water temperature               
biogeophys/HydrologyNoDrainageMod.F90:         frac_h2osfc        => col_ws%frac_h2osfc        , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
biogeophys/HydrologyNoDrainageMod.F90:         begwb              => col_ws%begwb              , & ! Input:  [real(r8) (:)   ]  water mass begining of the time step    
biogeophys/HydrologyNoDrainageMod.F90:         sno_liq_top        => col_ws%sno_liq_top        , & ! Output: [real(r8) (:)   ]  liquid water fraction in top snow layer (col) [frc] 
biogeophys/HydrologyNoDrainageMod.F90:         snowliq            => col_ws%snowliq            , & ! Output: [real(r8) (:)   ]  average snow liquid water               
biogeophys/HydrologyNoDrainageMod.F90:         h2osoi_liqice_10cm => col_ws%h2osoi_liqice_10cm , & ! Output: [real(r8) (:)   ]  liquid water + ice lens in top 10cm of soil (kg/m2)
biogeophys/HydrologyNoDrainageMod.F90:         h2osoi_liq         => col_ws%h2osoi_liq         , & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)                  
biogeophys/HydrologyNoDrainageMod.F90:         h2osoi_vol         => col_ws%h2osoi_vol         , & ! Output: [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeophys/HydrologyNoDrainageMod.F90:         wf                 => col_ws%wf                 , & ! Output: [real(r8) (:)   ]  soil water as frac. of whc for top 0.05 m 
biogeophys/HydrologyNoDrainageMod.F90:         wf2                => col_ws%wf2                , & ! Output: [real(r8) (:)   ]  soil water as frac. of whc for top 0.17 m 
biogeophys/HydrologyNoDrainageMod.F90:         h2osoi_liqvol      => col_ws%h2osoi_liqvol      , & ! Output: [real(r8) (:,:) ]  volumetric liquid water content
biogeophys/HydrologyNoDrainageMod.F90:         h2osoi_icevol      => col_ws%h2osoi_icevol      , & ! Output: [real(r8) (:,:) ]  volumetric liquid water content         
biogeophys/HydrologyNoDrainageMod.F90:         watsat             => soilstate_vars%watsat_col              , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)
biogeophys/HydrologyNoDrainageMod.F90:         soilpsi            => soilstate_vars%soilpsi_col               & ! Output: [real(r8) (:,:) ]  soil water potential in each soil layer (MPa)
biogeophys/HydrologyNoDrainageMod.F90:      ! Determine the change of snow mass and the snow water onto soil
biogeophys/HydrologyNoDrainageMod.F90:           atm2lnd_vars, waterflux_vars, waterstate_vars, aerosol_vars)
biogeophys/HydrologyNoDrainageMod.F90:              soilhydrology_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:           soilhydrology_vars, soilstate_vars, waterflux_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:             waterflux_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:             waterflux_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:        call ep_betr%BeTRSetBiophysForcing(bounds, col_pp, veg_pp, 1, nlevsoi, waterstate_vars=waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:              waterstate_vars, waterflux_vars)
biogeophys/HydrologyNoDrainageMod.F90:           filter_hydrologyc, soilstate_vars, canopystate_vars, waterflux_vars,energyflux_vars)
biogeophys/HydrologyNoDrainageMod.F90:                                                      soilstate_vars, waterflux_vars)
biogeophys/HydrologyNoDrainageMod.F90:            soilhydrology_vars, soilstate_vars, waterflux_vars, waterstate_vars, temperature_vars, &
biogeophys/HydrologyNoDrainageMod.F90:            soil_water_retention_curve)
biogeophys/HydrologyNoDrainageMod.F90:            soilhydrology_vars, soilstate_vars, waterflux_vars, waterstate_vars, temperature_vars, &
biogeophys/HydrologyNoDrainageMod.F90:            soil_water_retention_curve)
biogeophys/HydrologyNoDrainageMod.F90:        call ep_betr%BeTRSetBiophysForcing(bounds, col_pp, veg_pp, 1, nlevsoi, waterstate_vars=waterstate_vars, &
biogeophys/HydrologyNoDrainageMod.F90:           waterflux_vars=waterflux_vars, soilhydrology_vars = soilhydrology_vars)
biogeophys/HydrologyNoDrainageMod.F90:        call ep_betr%RetrieveBiogeoFlux(bounds, 1, nlevsoi, waterflux_vars=waterflux_vars)  
biogeophys/HydrologyNoDrainageMod.F90:              soilhydrology_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:           soilhydrology_vars, soilstate_vars, temperature_vars, waterstate_vars, waterflux_vars)
biogeophys/HydrologyNoDrainageMod.F90:           soilhydrology_vars, soilstate_vars, temperature_vars, waterstate_vars, waterflux_vars) 
biogeophys/HydrologyNoDrainageMod.F90:         !apply dew and sublimation fluxes, this is a temporary work aroud for tracking water isotope
biogeophys/HydrologyNoDrainageMod.F90:           temperature_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:           aerosol_vars, temperature_vars, waterflux_vars, waterstate_vars)
biogeophys/HydrologyNoDrainageMod.F90:           aerosol_vars, temperature_vars, waterstate_vars, is_lake=.false.)
biogeophys/HydrologyNoDrainageMod.F90:      ! Determine ground temperature, ending water balance and volumetric soil water
biogeophys/HydrologyNoDrainageMod.F90:      ! Calculate soil temperature and total water (liq+ice) in top 10cm of soil
biogeophys/HydrologyNoDrainageMod.F90:      ! Calculate soil temperature and total water (liq+ice) in top 17cm of soil
biogeophys/HydrologyNoDrainageMod.F90:         ! Available soil water up to a depth of 0.05 m.
biogeophys/HydrologyNoDrainageMod.F90:         ! Potentially available soil water (=whc) up to a depth of 0.05 m.
biogeophys/SoilMoistStressMod.F90:    real(r8)          , intent(in)    :: h2osoi_ice( bounds%begc: , 1: ) ! ice water content, kg H2o/m2
biogeophys/SoilMoistStressMod.F90:          !compute the maximum soil space to fill liquid water and air
biogeophys/SoilMoistStressMod.F90:    real(r8)          , intent(in)    :: h2osoi_ice( bounds%begc: , lbj: ) !ice water content, kg H2o/m2
biogeophys/SoilMoistStressMod.F90:             !compute the maximum snow void space to fill liquid water and air         
biogeophys/SoilMoistStressMod.F90:    ! compute the volumetric liquid water content
biogeophys/SoilMoistStressMod.F90:    real(r8)          , intent(in)    :: h2osoi_liq(bounds%begc: , lbj: )   ! liquid water content [kg H2o/m2]
biogeophys/SoilMoistStressMod.F90:    real(r8)          , intent(in)    :: denh2o                             ! water density [kg/m3]
biogeophys/SoilMoistStressMod.F90:    real(r8)          , intent(inout) :: vol_liq(bounds%begc: , lbj: )      ! volumetric liquid water content  
biogeophys/SoilMoistStressMod.F90:    use clm_varcon      , only : tfrz      !temperature where water freezes [K], this is taken as constant at the moment 
biogeophys/SoilMoistStressMod.F90:    use WaterSTateType  , only : waterstate_type
biogeophys/SoilMoistStressMod.F90:       temperature_vars, soilstate_vars, energyflux_vars, waterstate_vars, &
biogeophys/SoilMoistStressMod.F90:       soil_water_retention_curve) 
biogeophys/SoilMoistStressMod.F90:    ! compute the root water stress using the default clm45 approach
biogeophys/SoilMoistStressMod.F90:    use clm_varcon           , only : tfrz      !temperature where water freezes [K], this is taken as constant at the moment
biogeophys/SoilMoistStressMod.F90:    use WaterSTateType       , only : waterstate_type
biogeophys/SoilMoistStressMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/SoilMoistStressMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SoilMoistStressMod.F90:    class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
biogeophys/SoilMoistStressMod.F90:         smpso         => veg_vp%smpso                  , & ! Input:  [real(r8) (:)   ]  soil water potential at full stomatal opening (mm)                    
biogeophys/SoilMoistStressMod.F90:         smpsc         => veg_vp%smpsc                  , & ! Input:  [real(r8) (:)   ]  soil water potential at full stomatal closure (mm)                    
biogeophys/SoilMoistStressMod.F90:         tc_stress     => veg_vp%tc_stress              , & ! Input:  [real(r8)       ]  critical soil temperature for soil water stress (C)    
biogeophys/SoilMoistStressMod.F90:         watsat        => soilstate_vars%watsat_col         , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)   (constant)                     
biogeophys/SoilMoistStressMod.F90:         btran         => energyflux_vars%btran_patch       , & ! Output: [real(r8) (:)   ]  transpiration wetness factor (0 to 1) (integrated soil water stress)
biogeophys/SoilMoistStressMod.F90:         btran2        => energyflux_vars%btran2_patch      , & ! Output: [real(r8) (:)   ]  integrated soil water stress square
biogeophys/SoilMoistStressMod.F90:         rresis        => energyflux_vars%rresis_patch      , & ! Output: [real(r8) (:,:) ]  root soil water stress (resistance) by layer (0-1)  (nlevgrnd)                          
biogeophys/SoilMoistStressMod.F90:         h2osoi_vol    => col_ws%h2osoi_vol    , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
biogeophys/SoilMoistStressMod.F90:               call soil_water_retention_curve%soil_suction(sucsat(c,j), s_node, bsw(c,j), smp_node)
biogeophys/SoilMoistStressMod.F90:               call soil_water_retention_curve%soil_suction(sucsat(c,j), s_node, bsw(c,j), smp_node_lf)
biogeophys/SoilMoistStressMod.F90:       waterstate_vars, soil_water_retention_curve)
biogeophys/SoilMoistStressMod.F90:    ! compute the root water stress using different approaches
biogeophys/SoilMoistStressMod.F90:    use clm_varcon      , only : tfrz      !temperature where water freezes [K], this is taken as constant at the moment 
biogeophys/SoilMoistStressMod.F90:    use WaterSTateType  , only : waterstate_type
biogeophys/SoilMoistStressMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/SoilMoistStressMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/SoilMoistStressMod.F90:    class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
biogeophys/SoilMoistStressMod.F90:            waterstate_vars=waterstate_vars,            &
biogeophys/SoilMoistStressMod.F90:            soil_water_retention_curve=soil_water_retention_curve)
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  ! Implementation of soil_water_retention_curve_type using the Clapp-Hornberg 1978
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  public :: soil_water_retention_curve_clapp_hornberg_1978_type
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  type, extends(soil_water_retention_curve_type) :: &
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:       soil_water_retention_curve_clapp_hornberg_1978_type
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  end type soil_water_retention_curve_clapp_hornberg_1978_type
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  interface soil_water_retention_curve_clapp_hornberg_1978_type
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:     ! initialize a new soil_water_retention_curve_clapp_hornberg_1978_type object
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  end interface soil_water_retention_curve_clapp_hornberg_1978_type
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  type(soil_water_retention_curve_clapp_hornberg_1978_type) function constructor()
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    ! Creates an object of type soil_water_retention_curve_clapp_hornberg_1978_type.
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    class(soil_water_retention_curve_clapp_hornberg_1978_type), intent(in) :: this
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    class(soil_water_retention_curve_clapp_hornberg_1978_type), intent(in) :: this
biogeophys/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    class(soil_water_retention_curve_clapp_hornberg_1978_type), intent(in) :: this
biogeophys/UrbanAlbedoMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/UrbanAlbedoMod.F90:       waterstate_vars, urbanparams_vars, solarabs_vars, surfalb_vars) 
biogeophys/UrbanAlbedoMod.F90:    type(waterstate_type)  , intent(in)    :: waterstate_vars
biogeophys/UrbanAlbedoMod.F90:                 waterstate_vars)
biogeophys/UrbanAlbedoMod.F90:                 waterstate_vars)
biogeophys/UrbanAlbedoMod.F90:       waterstate_vars)
biogeophys/UrbanAlbedoMod.F90:    type(waterstate_type), intent(in) :: waterstate_vars
biogeophys/UrbanAlbedoMod.F90:         h2osno =>  col_ws%h2osno & ! Input:  [real(r8) (:) ]  snow water (mm H2O)                               
biogeophys/LakeTemperatureMod.F90:  use WaterfluxType     , only : waterflux_type
biogeophys/LakeTemperatureMod.F90:  use WaterstateType    , only : waterstate_type
biogeophys/LakeTemperatureMod.F90:       solarabs_vars, soilstate_vars, waterstate_vars, waterflux_vars, ch4_vars, &
biogeophys/LakeTemperatureMod.F90:    ! lake water, soil, and bedrock beneath lake.
biogeophys/LakeTemperatureMod.F90:    !    i) Lake water layers can freeze by any fraction and release latent heat; thermal
biogeophys/LakeTemperatureMod.F90:    !      considering changed heat capacity. Also do soil water balance check.
biogeophys/LakeTemperatureMod.F90:    type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/LakeTemperatureMod.F90:    type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/LakeTemperatureMod.F90:    real(r8) :: cwat                                                       ! specific heat capacity of water (j/m**3/kelvin)
biogeophys/LakeTemperatureMod.F90:                                                                           ! water because layer depth is not adjusted when freezing
biogeophys/LakeTemperatureMod.F90:                                                                           ! using water density as above
biogeophys/LakeTemperatureMod.F90:    real(r8) :: rhow(bounds%begc:bounds%endc,nlevlak)                      ! density of water (kg/m**3)
biogeophys/LakeTemperatureMod.F90:    real(r8) :: wsum(bounds%begc:bounds%endc)                              ! temp for checking water (kg/m^2)
biogeophys/LakeTemperatureMod.F90:    real(r8) :: wsum_end(bounds%begc:bounds%endc)                          ! temp for checking water (kg/m^2)
biogeophys/LakeTemperatureMod.F90:         h2osno          =>   col_ws%h2osno           , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                     
biogeophys/LakeTemperatureMod.F90:         h2osoi_liq      =>   col_ws%h2osoi_liq       , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2) [for snow & soil layers]
biogeophys/LakeTemperatureMod.F90:         frac_iceold     =>   col_ws%frac_iceold      , & ! Output: [real(r8) (:,:) ]  fraction of ice relative to the tot water
biogeophys/LakeTemperatureMod.F90:    cwat = cpliq*denh2o ! water heat capacity per unit volume
biogeophys/LakeTemperatureMod.F90:    cice_eff = cpice*denh2o !use water density because layer depth is not adjusted
biogeophys/LakeTemperatureMod.F90:         soilstate_vars, waterstate_vars, temperature_vars)
biogeophys/LakeTemperatureMod.F90:         waterstate_vars, waterflux_vars, temperature_vars, &
biogeophys/LakeTemperatureMod.F90:    ! 9.5!) Second energy check and water check.  Now check energy balance before and after phase
biogeophys/LakeTemperatureMod.F90:    !       Also check soil water sum.
biogeophys/LakeTemperatureMod.F90:             !If the average temperature is above freezing, put the extra energy into the water.
biogeophys/LakeTemperatureMod.F90:                !If the average temperature is above freezing, put the extra energy into the water.
biogeophys/LakeTemperatureMod.F90:                !For the layer with both ice & water, be careful to use the average temperature
biogeophys/LakeTemperatureMod.F90:             !If the average temperature is above freezing, put the extra energy into the water.
biogeophys/LakeTemperatureMod.F90:                !If the average temperature is above freezing, put the extra energy into the water.
biogeophys/LakeTemperatureMod.F90:                !For the layer with both ice & water, be careful to use the average temperature
biogeophys/LakeTemperatureMod.F90:                ! Lake water R +  aerodynamic R
biogeophys/LakeTemperatureMod.F90:         soilstate_vars, waterstate_vars, temperature_vars)
biogeophys/LakeTemperatureMod.F90:        soilstate_vars, waterstate_vars, temperature_vars)
biogeophys/LakeTemperatureMod.F90:     type(waterstate_type)  , intent(in)  :: waterstate_vars
biogeophys/LakeTemperatureMod.F90:     real(r8) :: bw                        ! partial density of water (ice + liquid)
biogeophys/LakeTemperatureMod.F90:     real(r8) :: fl                        ! fraction of liquid or unfrozen water to total water
biogeophys/LakeTemperatureMod.F90:     real(r8) :: satw                      ! relative total water content of soil.
biogeophys/LakeTemperatureMod.F90:          watsat      => soilstate_vars%watsat_col      , & ! Input:  [real(r8) (:,:)]  volumetric soil water at saturation (porosity)
biogeophys/LakeTemperatureMod.F90:          h2osoi_liq  => col_ws%h2osoi_liq , & ! Input:  [real(r8) (:,:)]  liquid water (kg/m2)                  
biogeophys/LakeTemperatureMod.F90:                ! They are especially important here because of no supercooled water.
biogeophys/LakeTemperatureMod.F90:                ! Assume some ground heaving rather than drainage of the water while it's freezing.
biogeophys/LakeTemperatureMod.F90:        waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars, lakestate_vars)
biogeophys/LakeTemperatureMod.F90:     !     and the liquid water mass is greater than zero (i.e. melting). No supercooling.
biogeophys/LakeTemperatureMod.F90:     !     how much water or ice is available.
biogeophys/LakeTemperatureMod.F90:     !     the freezing point if enough water or ice is available to fully compensate,
biogeophys/LakeTemperatureMod.F90:     type(waterstate_type)  , intent(inout) :: waterstate_vars
biogeophys/LakeTemperatureMod.F90:     type(waterflux_type)   , intent(inout) :: waterflux_vars
biogeophys/LakeTemperatureMod.F90:          h2osno          => col_ws%h2osno         , & ! Output: [real(r8)  (:)   ] snow water (mm H2O)                     
biogeophys/LakeTemperatureMod.F90:          h2osoi_liq      => col_ws%h2osoi_liq     , & ! Output: [real(r8)  (:,:) ] liquid water (kg/m2)                  
biogeophys/TemperatureType.F90:     real(r8), pointer :: t_h2osfc_col             (:)   ! col surface water temperature
biogeophys/TemperatureType.F90:     real(r8), pointer :: t_h2osfc_bef_col         (:)   ! col surface water temperature from time-step before  
biogeophys/TemperatureType.F90:     real(r8), pointer :: liquid_water_temp1_grc   (:)   ! grc initial weighted average liquid water temperature (K)
biogeophys/TemperatureType.F90:     real(r8), pointer :: liquid_water_temp2_grc   (:)   ! grc post land cover change weighted average liquid water temperature (K)
biogeophys/TemperatureType.F90:     real(r8), pointer    :: xmf_col               (:)   ! total latent heat of phase change of ground water
biogeophys/TemperatureType.F90:     real(r8), pointer    :: xmf_h2osfc_col        (:)   ! latent heat of phase change of surface water
biogeophys/TemperatureType.F90:     real(r8), pointer    :: c_h2osfc_col          (:)   ! heat capacity of surface water
biogeophys/TemperatureType.F90:    allocate(this%liquid_water_temp1_grc   (begg:endg))                      ; this%liquid_water_temp1_grc   (:)   = nan
biogeophys/TemperatureType.F90:    allocate(this%liquid_water_temp2_grc   (begg:endg))                      ; this%liquid_water_temp2_grc   (:)   = nan
cpl/lnd_import_export.F90:    real(r8) :: esatw                ! saturation vapor pressure over water (Pa)
cpl/lnd_import_export.F90:    real(r8) :: a0,a1,a2,a3,a4,a5,a6 ! coefficients for esat over water
cpl/lnd_import_export.F90:    real(r8) :: vp                   ! water vapor pressure (Pa)
cpl/lnd_import_export.F90:       ! hierarchy is atm/glc/lnd/rof/ice/ocn.  so water sent from rof to land is negative,
cpl/lnd_import_export.F90:       ! change the sign to indicate addition of water to system.
cpl/lnd_import_export.F90:         ! air density (kg/m**3) - uses a temporary calculation of water vapor pressure (Pa)
cpl/lnd_import_export.F90:         ! air density (kg/m**3) - uses a temporary calculation of water vapor pressure (Pa)
cpl/lnd_import_export.F90:       ! hierarchy of atm/glc/lnd/rof/ice/ocn.  so water sent from land to rof is positive
cpl/clm_cpl_indices.F90:  integer, public ::index_l2x_Sl_soilw        ! volumetric soil water
cpl/clm_cpl_indices.F90:  integer, public ::index_l2x_Fall_evap       ! evaporation     water flux
data_types/GridcellDataType.F90:    real(r8), pointer :: liquid_water_temp1   (:)   ! initial weighted average liquid water temperature (K)
data_types/GridcellDataType.F90:    real(r8), pointer :: liquid_water_temp2   (:)   ! post land cover change weighted average liquid water temperature (K)
data_types/GridcellDataType.F90:  ! Define the data structure that holds water state information at the gridcell level.
data_types/GridcellDataType.F90:  type, public :: gridcell_water_state
data_types/GridcellDataType.F90:    real(r8), pointer :: tws                (:)   ! total water storage (kg/m2)
data_types/GridcellDataType.F90:    real(r8), pointer :: tws_month_beg      (:)   ! grc total water storage at the beginning of a month
data_types/GridcellDataType.F90:    real(r8), pointer :: tws_month_end      (:)   ! grc total water storage at the end of a month
data_types/GridcellDataType.F90:    real(r8), pointer :: begwb              (:)   ! water mass begining of the time step
data_types/GridcellDataType.F90:    real(r8), pointer :: endwb              (:)   ! water mass end of the time step
data_types/GridcellDataType.F90:    real(r8), pointer :: errh2o             (:)   ! water conservation error (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: beg_h2ocan         (:)   ! grid-level canopy water at begining of the time step (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: beg_h2osno         (:)   ! grid-level snow water at begining of the time step (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: beg_h2osfc         (:)   ! grid-level surface water at begining of the time step (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: beg_h2osoi_liq     (:)   ! grid-level liquid water at begining of the time step (kg/m2)
data_types/GridcellDataType.F90:    real(r8), pointer :: end_h2ocan         (:)   ! grid-level canopy water at end of the time step (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: end_h2osno         (:)   ! grid-level snow water at end of the time step (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: end_h2osfc         (:)   ! grid-level surface water at end of the time step (mm H2O)
data_types/GridcellDataType.F90:    real(r8), pointer :: end_h2osoi_liq     (:)   ! grid-level liquid water at end of the time step (kg/m2)
data_types/GridcellDataType.F90:  end type gridcell_water_state
data_types/GridcellDataType.F90:  ! Define the data structure that holds water flux information at the gridcell level.
data_types/GridcellDataType.F90:  type, public :: gridcell_water_flux
data_types/GridcellDataType.F90:  end type gridcell_water_flux
data_types/GridcellDataType.F90:  type(gridcell_water_state)           , public, target :: grc_ws     ! gridcell water state
data_types/GridcellDataType.F90:  type(gridcell_water_flux)            , public, target :: grc_wf     ! gridcell water flux
data_types/GridcellDataType.F90:    allocate(this%liquid_water_temp1   (begg:endg))                      ; this%liquid_water_temp1   (:)   = nan
data_types/GridcellDataType.F90:    allocate(this%liquid_water_temp2   (begg:endg))                      ; this%liquid_water_temp2   (:)   = nan
data_types/GridcellDataType.F90:    this%liquid_water_temp1(begg:endg) = spval
data_types/GridcellDataType.F90:         avgflag='A', long_name='initial gridcell weighted average liquid water temperature', &
data_types/GridcellDataType.F90:         ptr_lnd=this%liquid_water_temp1, default='inactive')
data_types/GridcellDataType.F90:    deallocate(this%liquid_water_temp1)
data_types/GridcellDataType.F90:    deallocate(this%liquid_water_temp2)
data_types/GridcellDataType.F90:  ! Subroutines to initialize and clean gridcell water state data structure
data_types/GridcellDataType.F90:    class(gridcell_water_state) :: this
data_types/GridcellDataType.F90:         avgflag='A', long_name='total water storage', &
data_types/GridcellDataType.F90:         avgflag='I', long_name='total water storage at the beginning of a month', &
data_types/GridcellDataType.F90:         avgflag='I', long_name='total water storage at the end of a month', &
data_types/GridcellDataType.F90:    ! Read/Write gridcell water state information to/from restart file.
data_types/GridcellDataType.F90:    class(gridcell_water_state) :: this
data_types/GridcellDataType.F90:         long_name='surface watertotal water storage at the beginning of a month', units='mm', &
data_types/GridcellDataType.F90:    class(gridcell_water_state) :: this
data_types/GridcellDataType.F90:  ! Subroutines to initialize and clean gridcell water flux data structure
data_types/GridcellDataType.F90:    class(gridcell_water_flux) :: this
data_types/GridcellDataType.F90:    ! Read/Write gridcell water flux information to/from restart file.
data_types/GridcellDataType.F90:    class(gridcell_water_flux) :: this
data_types/GridcellDataType.F90:    class(gridcell_water_flux) :: this
data_types/aaa:<     real(r8), pointer :: qflx_grnd_irrig      (:)   => null() ! col real groundwater irrigation flux (mm H2O/s) 
data_types/aaa:<          avgflag='A', long_name='Surface water irrigation demand sent to MOSART/WM', &
data_types/VegetationPropertiesType.F90:     real(r8), allocatable :: smpso         (:)   ! soil water potential at full stomatal opening (mm)
data_types/VegetationPropertiesType.F90:     real(r8), allocatable :: smpsc         (:)   ! soil water potential at full stomatal closure (mm)
data_types/VegetationDataType.F90:  ! Define the data structure that holds water state information at the vegetation level.
data_types/VegetationDataType.F90:  type, public :: vegetation_water_state
data_types/VegetationDataType.F90:    real(r8), pointer :: h2ocan       (:) => null() ! canopy water (kg/m2)
data_types/VegetationDataType.F90:    real(r8), pointer :: begwb        (:) => null() ! water mass begining of the time step
data_types/VegetationDataType.F90:    real(r8), pointer :: endwb        (:) => null() ! water mass end of the time step
data_types/VegetationDataType.F90:    real(r8), pointer :: errh2o       (:) => null() ! water conservation error (mm H2O)
data_types/VegetationDataType.F90:    real(r8), pointer :: h2o_moss_wc    (:) => null() ! Total water content of Sphagnum moss (relative to dry mass (relative to dry mass))
data_types/VegetationDataType.F90:    real(r8), pointer :: h2o_moss_inter (:) => null() ! Internal water content of Sphagnum moss (relative to dry mass (relative to dry mass))
data_types/VegetationDataType.F90:  end type vegetation_water_state
data_types/VegetationDataType.F90:    real(r8), pointer :: eflx_sh_h2osfc    (:) => null() ! sensible heat flux from surface water (W/m**2) [+ to atm]
data_types/VegetationDataType.F90:  ! Define the data structure that holds water flux information at the vegetation level.
data_types/VegetationDataType.F90:  type, public :: vegetation_water_flux
data_types/VegetationDataType.F90:    real(r8), pointer :: qflx_prec_grnd     (:)   => null() ! water onto ground including canopy runoff [kg/(m2 s)]
data_types/VegetationDataType.F90:    real(r8), pointer :: qflx_ev_snow       (:)   => null() ! evaporation heat flux from snow       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
data_types/VegetationDataType.F90:    real(r8), pointer :: qflx_ev_soil       (:)   => null() ! evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
data_types/VegetationDataType.F90:    real(r8), pointer :: qflx_ev_h2osfc     (:)   => null() ! evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
data_types/VegetationDataType.F90:    real(r8), pointer :: qflx_grnd_irrig_patch    (:)   => null()   ! groundwater irrigation (mm H2O/s) 
data_types/VegetationDataType.F90:    real(r8), pointer :: qflx_surf_irrig_patch    (:)   => null()   ! surface water irrigation(mm H2O/s) 
data_types/VegetationDataType.F90:  end type vegetation_water_flux
data_types/VegetationDataType.F90:  type(vegetation_water_state)           , public, target :: veg_ws     ! vegetation water state
data_types/VegetationDataType.F90:  type(vegetation_water_flux)            , public, target :: veg_wf     ! vegetation water flux
data_types/VegetationDataType.F90:  ! Subroutines to initialize and clean vegetation water state data structure
data_types/VegetationDataType.F90:    class(vegetation_water_state) :: this
data_types/VegetationDataType.F90:         avgflag='A', long_name='intercepted water', &
data_types/VegetationDataType.F90:            avgflag='A', long_name='Relative water content of Moss', &
data_types/VegetationDataType.F90:    ! Read/Write vegetation water state information to/from restart file.
data_types/VegetationDataType.F90:    class(vegetation_water_state)    :: this
data_types/VegetationDataType.F90:         long_name='canopy water', units='kg/m2', &
data_types/VegetationDataType.F90:    class(vegetation_water_state) :: this
data_types/VegetationDataType.F90:  ! Subroutines to initialize and clean vegetation water flux data structure
data_types/VegetationDataType.F90:    class(vegetation_water_flux) :: this
data_types/VegetationDataType.F90:         avgflag='A', long_name='Original total irrigation water demand (surface + ground)', &
data_types/VegetationDataType.F90:         avgflag='A', long_name='actual water added through irrigation (surface + ground)', &
data_types/VegetationDataType.F90:         avgflag='A', long_name='Surface water irrigation', &
data_types/VegetationDataType.F90:         avgflag='A', long_name='Groundwater irrigation', &
data_types/VegetationDataType.F90:    ! Read/Write vegetation water flux information to/from restart file.
data_types/VegetationDataType.F90:    class(vegetation_water_flux)     :: this
data_types/VegetationDataType.F90:    class(vegetation_water_flux) :: this
data_types/ColumnDataType.F90:    real(r8), pointer :: t_h2osfc      (:)   => null() ! surface water temperature (K)
data_types/ColumnDataType.F90:    real(r8), pointer :: t_h2osfc_bef  (:)   => null() ! surface water temperature at start of time step (K)
data_types/ColumnDataType.F90:    real(r8), pointer :: c_h2osfc      (:)   => null() ! heat capacity of surface water (J/K)
data_types/ColumnDataType.F90:  ! Define the data structure that holds water state information at the column level.
data_types/ColumnDataType.F90:  type, public :: column_water_state
data_types/ColumnDataType.F90:    ! Primary water and ice state variables for soil/snow column
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liq         (:,:) => null() ! liquid water (-nlevsno+1:nlevgrnd) (kg/m2)     
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_vol         (:,:) => null() ! volumetric soil water (0<=h2osoi_vol<=watsat) (1:nlevgrnd) (m3/m3)  
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osfc             (:)   => null() ! surface water (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: h2ocan             (:)   => null() ! canopy water integrated to column (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: total_plant_stored_h2o(:)=> null() ! total water in plants (used??)
data_types/ColumnDataType.F90:    ! Derived water and ice state variables for soil/snow column, depth varying
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liqvol      (:,:) => null() ! volumetric liquid water content (-nlevsno+1:nlevgrnd) (m3/m3)
data_types/ColumnDataType.F90:    real(r8), pointer :: bw                 (:,:) => null() ! partial density of water in the snow pack (ice + liquid) [kg/m3] 
data_types/ColumnDataType.F90:    real(r8), pointer :: swe_old            (:,:) => null() ! initial snow water content (-nlevsno+1:0) (kg/m2)
data_types/ColumnDataType.F90:    ! Derived water, ice, and snow variables, column aggregate
data_types/ColumnDataType.F90:    real(r8), pointer :: qg_h2osfc          (:)   => null() ! specific humidity over surface water (kg H2O/kg moist air)
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liqice_10cm (:)   => null() ! liquid water + ice in top 10cm of soil (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: sno_liq_top        (:)   => null() ! snow liquid water fraction, by mass, top layer (kg/kg)
data_types/ColumnDataType.F90:    real(r8), pointer :: snowliq            (:)   => null() ! total snow liquid water (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: frac_iceold        (:,:) => null() ! fraction of ice relative to the tot water (-nlevsno+1:nlevgrnd) 
data_types/ColumnDataType.F90:    real(r8), pointer :: frac_h2osfc        (:)   => null() ! fractional area with surface water greater than zero
data_types/ColumnDataType.F90:    real(r8), pointer :: wf                 (:)   => null() ! soil water as frac. of whc for top 0.05 m (0-1) 
data_types/ColumnDataType.F90:    real(r8), pointer :: wf2                (:)   => null() ! soil water as frac. of whc for top 0.17 m (0-1) 
data_types/ColumnDataType.F90:    real(r8), pointer :: begwb              (:)   => null() ! water mass begining of the time step (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: endwb              (:)   => null() ! water mass end of the time step (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: errh2o             (:)   => null() ! water conservation error (kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: errh2osno          (:)   => null() ! snow water conservation error(kg/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liq_depth_intg(:) => null() ! grid-level depth integrated liquid soil water
data_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_ice_depth_intg(:) => null() ! grid-level depth integrated ice soil water
data_types/ColumnDataType.F90:  end type column_water_state
data_types/ColumnDataType.F90:    real(r8), pointer :: eflx_hs_h2osfc          (:)   => null() ! heat flux on standing water (W/m2)
data_types/ColumnDataType.F90:    real(r8), pointer :: htvp                    (:)   => null() ! latent heat of vapor of water (or sublimation) [j/kg]
data_types/ColumnDataType.F90:    real(r8), pointer :: xmf                     (:)   => null() ! total latent heat of phase change of ground water
data_types/ColumnDataType.F90:    real(r8), pointer :: xmf_h2osfc              (:)   => null() ! latent heat of phase change of surface water
data_types/ColumnDataType.F90:    real(r8), pointer :: eflx_fgr0_h2osfc        (:)   => null() ! soil-surfacewater heat flux (W/m2) [+ = into soil]
data_types/ColumnDataType.F90:  ! Define the data structure that holds water flux information at the column level.
data_types/ColumnDataType.F90:  type, public :: column_water_flux
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_prec_grnd       (:)   => null() ! water onto ground including canopy runoff [kg/(m2 s)]
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_ev_snow         (:)   => null() ! evaporation heat flux from snow         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_ev_soil         (:)   => null() ! evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_ev_h2osfc       (:)   => null() ! evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_rootsoi         (:,:) => null() ! root and soil water exchange [mm H2O/s] [+ into root]     
data_types/ColumnDataType.F90:    real(r8), pointer :: dwb                  (:)   => null() !  water mass change [+ increase] [mm H2O/s] 
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_top_soil        (:)   => null() ! net water input into soil from top (mm/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_h2osfc_surf     (:)   => null() ! surface water runoff
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_snow_h2osfc     (:)   => null() ! snow falling on surface water
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_deficit         (:)   => null() ! water deficit to keep non-negative liquid water content (mm H2O)   
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_floodc          (:)   => null() ! flood water flux at column level
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_sl_top_soil     (:)   => null() ! liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_drain_vr        (:,:) => null() ! liquid water lost as drainage (m /time step)
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_h2osfc2topsoi   (:)   => null() ! liquid water coming from surface standing water top soil (mm H2O/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_snow2topsoi     (:)   => null() ! liquid water coming from residual snow to topsoil (mm H2O/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: qflx_grnd_irrig      (:)   => null() ! col real groundwater irrigation flux (mm H2O/s) 
data_types/ColumnDataType.F90:    real(r8), pointer :: mflx_drain_1d        (:)   => null() ! drainage from groundwater table (kg H2O /s)
data_types/ColumnDataType.F90:    real(r8), pointer :: mflx_drain_perched_1d(:)   => null() ! drainage from perched water table (kg H2O /s)
data_types/ColumnDataType.F90:    real(r8), pointer :: mflx_neg_snow_1d     (:)   => null() ! mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
data_types/ColumnDataType.F90:    real(r8), pointer :: mflx_drain           (:,:) => null() ! drainage from groundwater table (kg H2O /s)
data_types/ColumnDataType.F90:  end type column_water_flux
data_types/ColumnDataType.F90:    real(r8), pointer :: somn_yield                            (:)     => null() ! total SOM N loss to inland waters (gN/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: decomp_npools_yield                   (:,:)   => null() ! vertically-integrated decomposing N loss to inland waters (gN/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: somp_yield                            (:)     ! SOM P loss to inland waters (gP/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: labilep_yield                         (:)     ! soil labile mineral P loss to inland waters (gP/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: secondp_yield                         (:)     ! soil secondary mineral P loss to inland waters (gP/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: occlp_yield                           (:)     ! soil occluded mineral P loss to inland waters (gP/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: primp_yield                           (:)     ! soil primary mineral P loss to inland waters (gP/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: decomp_ppools_yield                   (:,:)   ! vertically-integrated decomposing P loss to inland waters (gP/m^2/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: labilep_yield_vr                      (:,:)   ! vertically-resolved labile mineral P loss to inland waters (gP/m^3/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: secondp_yield_vr                      (:,:)   ! vertically-resolved secondary mineral P loss to inland waters (gP/m^3/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: occlp_yield_vr                        (:,:)   ! vertically-resolved occluded mineral P loss to inland waters (gP/m^3/s)
data_types/ColumnDataType.F90:    real(r8), pointer :: primp_yield_vr                        (:,:)   ! vertically-resolved primary mineral P loss to inland waters (gP/m^3/s)
data_types/ColumnDataType.F90:  type(column_water_state)           , public, target :: col_ws     ! column water state
data_types/ColumnDataType.F90:  type(column_water_flux)            , public, target :: col_wf     ! column water flux
data_types/ColumnDataType.F90:         avgflag='A', long_name='surface water temperature', &
data_types/ColumnDataType.F90:    ! Initialize surface water temperatures
data_types/ColumnDataType.F90:         long_name='surface water temperature', units='K', &
data_types/ColumnDataType.F90:  ! Subroutines to initialize and clean column water state data structure
data_types/ColumnDataType.F90:    class(column_water_state) :: this
data_types/ColumnDataType.F90:    real(r8), intent(in)      :: watsat_input(begc:, 1:)          ! volumetric soil water at saturation (porosity)
data_types/ColumnDataType.F90:         avgflag='A', long_name='Snow liquid water content', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='soil liquid water (vegetated landunits only)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='surface water depth', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='volumetric soil water (vegetated landunits only)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='Partial density of water in the snow pack (ice + liquid)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='top snow layer liquid water fraction (land)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='soil liquid water + ice in top 10cm of soil (veg landunits only)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='snow depth (liquid water)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='snow liquid water', &
data_types/ColumnDataType.F90:            avgflag='A', long_name='fraction of ice relative to the tot water', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='fraction of ground covered by surface water', &
data_types/ColumnDataType.F90:            avgflag='A', long_name='soil water as frac. of whc for top 0.05 m', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='total water conservation error', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='imbalance in snow depth (liquid water)', &
data_types/ColumnDataType.F90:       ! Set soil water
data_types/ColumnDataType.F90:       ! volumetric water is set first and liquid content and ice lens are obtained
data_types/ColumnDataType.F90:       ! and urban pervious road (other urban columns have zero soil water)
data_types/ColumnDataType.F90:          ! volumetric water
data_types/ColumnDataType.F90:       ! Set Lake water
data_types/ColumnDataType.F90:    ! Read/Write column water state information to/from restart file.
data_types/ColumnDataType.F90:    class(column_water_state) :: this
data_types/ColumnDataType.F90:    real(r8)         , intent(in)    :: watsat_input (bounds%begc:, 1:)  ! volumetric soil water at saturation (porosity)
data_types/ColumnDataType.F90:    real(r8):: excess       ! excess volumetric soil water
data_types/ColumnDataType.F90:    real(r8):: totwat       ! total soil water (mm)
data_types/ColumnDataType.F90:         long_name='surface water', units='kg/m2', &
data_types/ColumnDataType.F90:         long_name='liquid water', units='kg/m2', &
data_types/ColumnDataType.F90:         long_name='snow water', units='kg/m2', &
data_types/ColumnDataType.F90:    ! Determine volumetric soil water (for read only)
data_types/ColumnDataType.F90:    ! If initial run -- ensure that water is properly bounded (read only)
data_types/ColumnDataType.F90:    class(column_water_state) :: this
data_types/ColumnDataType.F90:  ! Subroutines to initialize and clean column water flux data structure
data_types/ColumnDataType.F90:    class(column_water_flux) :: this
data_types/ColumnDataType.F90:         avgflag='A', long_name='net change in total water mass', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='Surface water irrigation demand sent to MOSART/WM', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='water input to surface', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='surface water runoff', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='snow sources (liquid water)', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='snow sinks (liquid water)', &
data_types/ColumnDataType.F90:    ! Read/Write column water state information to/from restart file.
data_types/ColumnDataType.F90:    class(column_water_flux) :: this
data_types/ColumnDataType.F90:    class(column_water_flux)           :: this
data_types/ColumnDataType.F90:    class(column_water_flux) :: this
data_types/ColumnDataType.F90:            avgflag='A', long_name='SOC erosional loss to inland waters', &
data_types/ColumnDataType.F90:             longname =  trim(decomp_cascade_con%decomp_pool_name_long(k))//' C erosional loss to inland waters'
data_types/ColumnDataType.F90:         avgflag='A', long_name='SON erosional loss to inland waters', &
data_types/ColumnDataType.F90:          longname =  trim(decomp_cascade_con%decomp_pool_name_long(k))//' N erosional loss to inland waters'
data_types/ColumnDataType.F90:         avgflag='A', long_name='SOP erosional loss to inland waters', &
data_types/ColumnDataType.F90:          longname =  trim(decomp_cascade_con%decomp_pool_name_long(k))//' P erosional loss to inland waters'
data_types/ColumnDataType.F90:         avgflag='A', long_name='labile mineral P erosional loss to inland waters', &
data_types/ColumnDataType.F90:            avgflag='A', long_name='labile mineral P pool erosional loss to inland waters', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='secondary mineral P erosional loss to inland waters', &
data_types/ColumnDataType.F90:            avgflag='A', long_name='secondary mineral P pool erosional loss to inland waters', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='occluded mineral P erosional loss to inland waters', &
data_types/ColumnDataType.F90:            avgflag='A', long_name='occluded mineral P pool erosional loss to inland waters', &
data_types/ColumnDataType.F90:         avgflag='A', long_name='primary mineral P erosional loss to inland waters', &
data_types/ColumnDataType.F90:            avgflag='A', long_name='primary mineral P pool erosional loss to inland waters', &
data_types/LandunitDataType.F90:  ! Define the data structure that holds water state information at the landunit level.
data_types/LandunitDataType.F90:  type, public :: landunit_water_state
data_types/LandunitDataType.F90:  end type landunit_water_state
data_types/LandunitDataType.F90:  type(landunit_water_state )          , public, target :: lun_ws    ! landunit water state
data_types/LandunitDataType.F90:  ! Subroutines to initialize and clean landunit water state data structure
data_types/LandunitDataType.F90:    class(landunit_water_state) :: this
data_types/LandunitDataType.F90:    ! Read/Write landunit water state information to/from restart file.
data_types/LandunitDataType.F90:    class(landunit_water_state)      :: this
data_types/LandunitDataType.F90:    class(landunit_water_state) :: this
data_types/CNStateType.F90:     real(r8), pointer :: onset_swi_patch              (:)     ! patch onset soil water index
data_types/CNStateType.F90:     real(r8), pointer :: offset_swi_patch             (:)     ! patch offset soil water index
data_types/CNStateType.F90:         avgflag='A', long_name='onset soil water index', &
data_types/CNStateType.F90:         avgflag='A', long_name='offset soil water index', &
data_types/CNStateType.F90:         long_name='onset soil water index', units='days' , &
data_types/ccc:<     real(r8), pointer :: h2o_moss_wc    (:) => null() ! Total water content of Sphagnum moss (relative to dry mass (relative to dry mass))
data_types/ccc:<     real(r8), pointer :: h2o_moss_inter (:) => null() ! Internal water content of Sphagnum moss (relative to dry mass (relative to dry mass))
data_types/ccc:<     real(r8), pointer :: qflx_grnd_irrig_patch    (:)   => null()   ! groundwater irrigation (mm H2O/s) 
data_types/ccc:<     real(r8), pointer :: qflx_surf_irrig_patch    (:)   => null()   ! surface water irrigation(mm H2O/s) 
data_types/ccc:<             avgflag='A', long_name='Relative water content of Moss', &
data_types/ccc:<          avgflag='A', long_name='Original total irrigation water demand (surface + ground)', &
data_types/ccc:<          avgflag='A', long_name='actual water added through irrigation (surface + ground)', &
data_types/ccc:<          avgflag='A', long_name='Surface water irrigation', &
data_types/ccc:<          avgflag='A', long_name='Groundwater irrigation', &
data_types/ccc:>          avgflag='A', long_name='water added through irrigation', &
data_types/VegetationPropertiesType.F90_backup06252020:     real(r8), allocatable :: smpso         (:)   ! soil water potential at full stomatal opening (mm)
data_types/VegetationPropertiesType.F90_backup06252020:     real(r8), allocatable :: smpsc         (:)   ! soil water potential at full stomatal closure (mm)
dyn_subgrid/dynConsBiogeophysMod.F90:  ! Handle conservation of biogeophysical quantities (water & energy) with dynamic land
dyn_subgrid/dynConsBiogeophysMod.F90:  use WaterfluxType     , only : waterflux_type
dyn_subgrid/dynConsBiogeophysMod.F90:  use WaterstateType    , only : waterstate_type
dyn_subgrid/dynConsBiogeophysMod.F90:  public :: dyn_hwcontent_init            ! compute grid-level heat and water content, before land cover change
dyn_subgrid/dynConsBiogeophysMod.F90:  public :: dyn_hwcontent_final           ! compute grid-level heat and water content, after land cover change; also compute dynbal fluxes
dyn_subgrid/dynConsBiogeophysMod.F90:  private :: dyn_water_content            ! compute gridcell total liquid and ice water contents
dyn_subgrid/dynConsBiogeophysMod.F90:       waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars)
dyn_subgrid/dynConsBiogeophysMod.F90:    ! and water content before land cover change
dyn_subgrid/dynConsBiogeophysMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
dyn_subgrid/dynConsBiogeophysMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
dyn_subgrid/dynConsBiogeophysMod.F90:    call dyn_water_content(bounds,                                        &
dyn_subgrid/dynConsBiogeophysMod.F90:         soilhydrology_vars, waterstate_vars, lakestate_vars,             &
dyn_subgrid/dynConsBiogeophysMod.F90:         temperature_vars, waterstate_vars,                               &
dyn_subgrid/dynConsBiogeophysMod.F90:         liquid_water_temp_grc = grc_es%liquid_water_temp1(bounds%begg:bounds%endg))
dyn_subgrid/dynConsBiogeophysMod.F90:       waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars)
dyn_subgrid/dynConsBiogeophysMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
dyn_subgrid/dynConsBiogeophysMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
dyn_subgrid/dynConsBiogeophysMod.F90:    call dyn_water_content(bounds, &
dyn_subgrid/dynConsBiogeophysMod.F90:         soilhydrology_vars, waterstate_vars, lakestate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:         temperature_vars, waterstate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:         liquid_water_temp_grc = grc_es%liquid_water_temp2(bounds%begg:bounds%endg))
dyn_subgrid/dynConsBiogeophysMod.F90:    !     liquid_water_temp1 = temperature_vars%liquid_water_temp1_grc(bounds%begg:bounds%endg), &
dyn_subgrid/dynConsBiogeophysMod.F90:    !     liquid_water_temp2 = temperature_vars%liquid_water_temp2_grc(bounds%begg:bounds%endg), &
dyn_subgrid/dynConsBiogeophysMod.F90:  subroutine dyn_water_content(bounds, &
dyn_subgrid/dynConsBiogeophysMod.F90:       soilhydrology_vars, waterstate_vars, lakestate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:    ! Compute gridcell total liquid and ice water contents
dyn_subgrid/dynConsBiogeophysMod.F90:    type(waterstate_type)    , intent(in)    :: waterstate_vars
dyn_subgrid/dynConsBiogeophysMod.F90:    character(len=*), parameter :: subname = 'dyn_water_content'
dyn_subgrid/dynConsBiogeophysMod.F90:         soilhydrology_vars, waterstate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:         waterstate_vars, lakestate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:  end subroutine dyn_water_content
dyn_subgrid/dynConsBiogeophysMod.F90:       temperature_vars, waterstate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:       heat_grc, liquid_water_temp_grc)
dyn_subgrid/dynConsBiogeophysMod.F90:    ! Compute grid-level heat and water content to track conservation with respect to
dyn_subgrid/dynConsBiogeophysMod.F90:    ! content. For water, the baseline is considered to be ice at 0 C, so for liquid water
dyn_subgrid/dynConsBiogeophysMod.F90:    type(waterstate_type)    , intent(in)  :: waterstate_vars
dyn_subgrid/dynConsBiogeophysMod.F90:    real(r8)                 , intent(out) :: liquid_water_temp_grc( bounds%begg: ) ! weighted average liquid water temperature for each grid cell (K)
dyn_subgrid/dynConsBiogeophysMod.F90:    real(r8) :: heat_liquid_col(bounds%begc:bounds%endc) ! sum of heat content for all columns: liquid water, excluding latent heat [J/m^2]
dyn_subgrid/dynConsBiogeophysMod.F90:    SHR_ASSERT_ALL((ubound(liquid_water_temp_grc) == (/bounds%endg/)), errMsg(__FILE__, __LINE__))
dyn_subgrid/dynConsBiogeophysMod.F90:         temperature_vars, waterstate_vars, soilhydrology_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:         soilstate_vars, temperature_vars, waterstate_vars, &
dyn_subgrid/dynConsBiogeophysMod.F90:          liquid_water_temp_grc(g) = &
dyn_subgrid/dynConsBiogeophysMod.F90:          ! 0 or negative water mass in this grid cell: set an arbitrary temperature
dyn_subgrid/dynConsBiogeophysMod.F90:          liquid_water_temp_grc(g) = tfrz
dyn_subgrid/dynInitColumnsMod.F90:  use WaterstateType    , only : waterstate_type
dyn_subgrid/dynInitColumnsMod.F90:       temperature_vars, waterstate_vars, soilhydrology_vars)
dyn_subgrid/dynInitColumnsMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
dyn_subgrid/dynInitColumnsMod.F90:             call copy_state(c, c_template, temperature_vars, waterstate_vars, soilhydrology_vars)
dyn_subgrid/dynInitColumnsMod.F90:       temperature_vars, waterstate_vars, soilhydrology_vars)
dyn_subgrid/dynInitColumnsMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
dyn_subgrid/dynInitColumnsMod.F90:    ! to handle bedrock layers - e.g., zeroing out any water that would be added to a
dyn_subgrid/dynSubgridControlMod.F90:  public :: get_for_testing_zero_dynbal_fluxes ! return true if user has requested to set the dynbal water and energy fluxes to zero, for testing purposes
dyn_subgrid/dynSubgridControlMod.F90:     ! The following is only meant for testing: If .true., set the dynbal water and
dyn_subgrid/dynSubgridControlMod.F90:     ! water and energy conservation!
dyn_subgrid/dynSubgridControlMod.F90:    ! Return true if the user has requested to set the dynbal water and energy fluxes to
dyn_subgrid/dynSubgridControlMod.F90:    ! true will break water and energy conservation!
dyn_subgrid/dynSubgridDriverMod.F90:  use WaterfluxType       , only : waterflux_type
dyn_subgrid/dynSubgridDriverMod.F90:  use WaterstateType      , only : waterstate_type
dyn_subgrid/dynSubgridDriverMod.F90:       waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars, &
dyn_subgrid/dynSubgridDriverMod.F90:    ! landunits. Also do related adjustments (water & energy, carbon & nitrogen).
dyn_subgrid/dynSubgridDriverMod.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
dyn_subgrid/dynSubgridDriverMod.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
dyn_subgrid/dynSubgridDriverMod.F90:            waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars)
dyn_subgrid/dynSubgridDriverMod.F90:            temperature_vars, waterstate_vars, soilhydrology_vars)
dyn_subgrid/dynSubgridDriverMod.F90:            waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars)
dyn_subgrid/dynConsBiogeochemMod.F90:    real(r8)                      :: init_h2ocan                   ! initial canopy water mass
dyn_subgrid/dynConsBiogeochemMod.F90:    real(r8)                      :: new_h2ocan                    ! canopy water mass after weight shift
external_models/fates/fire/SFMainMod.F90:    use FatesConstantsMod , only : tfrz => t_water_freeze_k_1atm
external_models/fates/fire/SFMainMod.F90:          ! average water content !is this the correct metric?         
external_models/fates/fire/SFMainMod.F90:          timeav_swc                  = sum(currentSite%water_memory(1:numWaterMem)) / real(numWaterMem,r8)
external_models/fates/biogeochem/EDCanopyStructureMod.F90:     ! If hydraulics is turned on, update the amount of water bound in vegetation
external_models/fates/biogeochem/FatesAllometryMod.F90:  ! has to tell the wrapper function which context (water or biomass)
external_models/fates/biogeochem/FatesAllometryMod.F90:    ! of climatic water deficit, temperature seasonality and precipitation
external_models/fates/biogeochem/FatesAllometryMod.F90:    ! allow different profiles for how water is drawn from the soil
external_models/fates/biogeochem/FatesAllometryMod.F90:    ! Note cdk 2016/08 we actually want to use the carbon index here rather than the water index.  
external_models/fates/biogeochem/FatesAllometryMod.F90:    integer, parameter :: rooting_profile_varindex_water = 1
external_models/fates/biogeochem/FatesAllometryMod.F90:             ( EDPftvarcon_inst%rootprof_beta(ft, rooting_profile_varindex_water) ** & 
external_models/fates/biogeochem/FatesAllometryMod.F90:             EDPftvarcon_inst%rootprof_beta(ft, rooting_profile_varindex_water) ** & 
external_models/fates/biogeochem/EDMortalityFunctionsMod.F90:    use FatesConstantsMod,  only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeochem/EDCohortDynamicsMod.F90:       ! This comes up with starter suctions and then water contents
external_models/fates/biogeochem/EDPatchDynamicsMod.F90:    ! If plant hydraulics are turned on, account for water leaving the plant-soil
external_models/fates/biogeochem/EDPatchDynamicsMod.F90:          ! Update water balance by removing dead plant water
external_models/fates/biogeochem/EDPhysiologyMod.F90:    use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeochem/EDPhysiologyMod.F90:    integer  :: i_wmem            ! Loop counter for water mem days
external_models/fates/biogeochem/EDPhysiologyMod.F90:    integer  :: ilayer_swater     ! Layer index for soil water
external_models/fates/biogeochem/EDPhysiologyMod.F90:    real(r8),parameter :: dphen_soil_depth = 0.1        ! Use liquid soil water that is
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ilayer_swater = minloc(abs(bc_in%z_sisl(:)-dphen_soil_depth),dim=1)
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ! D*: We don't allow anything to happen in the first ten days to allow the water memory window 
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ! 1. It's not clear what water content we should track. Here we are tracking the top layer, 
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ! water stress? What about where the wet period coincides with the warm period? 
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ! Accumulate surface water memory of last 10 days.
external_models/fates/biogeochem/EDPhysiologyMod.F90:       currentSite%water_memory(numWaterMem+1-i_wmem) = currentSite%water_memory(numWaterMem-i_wmem)
external_models/fates/biogeochem/EDPhysiologyMod.F90:    currentSite%water_memory(1) = bc_in%h2o_liqvol_sl(ilayer_swater) 
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ! Calculate the mean water content over the last 10 days (m3/m3)
external_models/fates/biogeochem/EDPhysiologyMod.F90:    mean_10day_liqvol = sum(currentSite%water_memory(1:numWaterMem))/real(numWaterMem,r8)
external_models/fates/biogeochem/EDPhysiologyMod.F90:    ! c) is the model day at least > 10 (let soil water spin-up)
external_models/fates/biogeochem/EDPhysiologyMod.F90:    use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeochem/EDPhysiologyMod.F90:    !litter decomp is proportional to water limitation on average... 
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_avuln_gs:long_name = "shape parameter for stomatal control of water vapor exiting leaf" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_p50_gs:long_name = "water potential at 50% loss of stomatal conductance" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_p50_node:long_name = "xylem water potential at 50% loss of conductivity" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_thetas_node:long_name = "saturated water content" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_smpsc:long_name = "Soil water potential at full stomatal closure" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_smpso:long_name = "Soil water potential at full stomatal opening" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_kmax_rsurf1:units = "kg water/m2 root area/Mpa/s" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_kmax_rsurf2:units = "kg water/m2 root area/Mpa/s" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_psi0:long_name = "sapwood water potential at saturation" ;
external_models/fates/parameter_files/fates_params_default.cdl:		fates_hydr_psicap:long_name = "sapwood water potential at which capillary reserves exhausted" ;
external_models/fates/main/EDTypesMod.F90:  integer, parameter, public  :: numWaterMem          = 10         ! watermemory saved as site level var
external_models/fates/main/EDTypesMod.F90:     real(r8) ::  water_memory(numWaterMem)                             ! last 10 days of soil moisture memory...
external_models/fates/main/FatesRestartInterfaceMod.F90:  ! wm: the number of memory slots for water (currently 10)
external_models/fates/main/FatesRestartInterfaceMod.F90:  integer :: ir_watermem_siwm
external_models/fates/main/FatesRestartInterfaceMod.F90:            long_name_base='water in aboveground compartments',  &
external_models/fates/main/FatesRestartInterfaceMod.F90:            long_name_base='water in transporting roots', &
external_models/fates/main/FatesRestartInterfaceMod.F90:            long_name_base='water in absorbing roots',  &
external_models/fates/main/FatesRestartInterfaceMod.F90:       ! Site-level volumentric liquid water content (shell x layer)
external_models/fates/main/FatesRestartInterfaceMod.F90:            long_name='Volumetric water content of rhizosphere compartments (layerxshell)', &
external_models/fates/main/FatesRestartInterfaceMod.F90:       ! Site-level water bound in new recruits
external_models/fates/main/FatesRestartInterfaceMod.F90:            long_name='Site level water mass used for new recruits', &
external_models/fates/main/FatesRestartInterfaceMod.F90:       ! Site-level water bound in dead plants
external_models/fates/main/FatesRestartInterfaceMod.F90:            long_name='Site level water bound in dead plants', &
external_models/fates/main/FatesRestartInterfaceMod.F90:       ! Site-level water balance error due to growth/turnover
external_models/fates/main/FatesRestartInterfaceMod.F90:       ! Site-level water balance error due to phenology?
external_models/fates/main/FatesRestartInterfaceMod.F90:       ! Site-level water balance error in vegetation
external_models/fates/main/FatesRestartInterfaceMod.F90:    call this%set_restart_var(vname='fates_water_memory', vtype=cohort_r8, &
external_models/fates/main/FatesRestartInterfaceMod.F90:         long_name='last 10 days of volumetric soil water, by site x day-index', &
external_models/fates/main/FatesRestartInterfaceMod.F90:         hlms='CLM:ALM', initialize=initialize_variables, ivar=ivar, index = ir_watermem_siwm )
external_models/fates/main/FatesRestartInterfaceMod.F90:    integer  :: io_idx_si_wmem ! each water memory class within each site
external_models/fates/main/FatesRestartInterfaceMod.F90:           rio_watermem_siwm           => this%rvars(ir_watermem_siwm)%r81d, &
external_models/fates/main/FatesRestartInterfaceMod.F90:                   ! Load the water contents
external_models/fates/main/FatesRestartInterfaceMod.F90:             rio_watermem_siwm( io_idx_si_wmem ) = sites(s)%water_memory(i)
external_models/fates/main/FatesRestartInterfaceMod.F90:     integer  :: io_idx_si_wmem ! each water memory class within each site
external_models/fates/main/FatesRestartInterfaceMod.F90:          rio_watermem_siwm           => this%rvars(ir_watermem_siwm)%r81d, &
external_models/fates/main/FatesRestartInterfaceMod.F90:                   ! Load the water contents
external_models/fates/main/FatesRestartInterfaceMod.F90:             sites(s)%water_memory(i) = rio_watermem_siwm( io_idx_si_wmem )
external_models/fates/main/FatesHydraulicsMemMod.F90:   ! number of aboveground plant water storage nodes
external_models/fates/main/FatesHydraulicsMemMod.F90:   ! total number of water storage nodes
external_models/fates/main/FatesHydraulicsMemMod.F90:   ! number of previous timestep's leaf water potential to be retained
external_models/fates/main/FatesHydraulicsMemMod.F90:   real(r8), public :: cohort_recruit_water_layer(nlevsoi_hyd_max)   ! the recruit water requirement for a 
external_models/fates/main/FatesHydraulicsMemMod.F90:   real(r8), public :: recruit_water_avail_layer(nlevsoi_hyd_max)    ! the recruit water avaibility from soil (kg H2o/m2)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8),allocatable :: h2osoi_liqvol_shell(:,:) ! volumetric water in rhizosphere compartment (m3/m3)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8),allocatable :: h2osoi_liq_prev(:)     ! liquid water mass for the bulk soil layer
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                    ! after root water has been extracted.  This should
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                    ! be equal to the sum of the water over the rhizosphere shells
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8),allocatable :: recruit_w_uptake(:)    ! recruitment water uptake (kg H2o/m2/s)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: dwat_veg                           ! change in stored water in vegetation
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: h2oveg                             ! stored water in vegetation (kg/m2)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: h2oveg_recruit                     ! stored water in recruits (kg/m2)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: h2oveg_dead                        ! stored water in dead vegetation (kg/m2)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: h2oveg_growturn_err                ! error water pool (kg/m2) for increase (growth) or
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                    !  insufficient water available to increase
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                    !  tissue volume or too much water is
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: h2oveg_pheno_err                   ! error water pool (kg/m2) for leaf-on
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                    !  insufficient plant water available to 
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) :: h2oveg_hydro_err                   ! error water pool (kg/m2) for hydrodynamics
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                    !  insufficient plant water available to 
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  z_node_ag(n_hypool_ag)          ! nodal height of aboveground water storage compartments            [m]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  z_node_troot(n_hypool_troot)    ! nodal height of belowground water storage compartments            [m]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  z_upper_ag(n_hypool_ag)         ! upper boundary height of aboveground water storage compartments   [m]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  z_upper_troot(n_hypool_troot)   ! upper boundary height of belowground water storage compartments   [m]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  z_lower_ag(n_hypool_ag)         ! lower boundary height of aboveground water storage compartments   [m]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  z_lower_troot(n_hypool_troot)   ! lower boundary height of belowground water storage compartments   [m]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  v_ag_init(n_hypool_ag)          ! previous day's volume of aboveground water storage compartments   [m3]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  v_ag(n_hypool_ag)               ! volume of aboveground water storage compartments                  [m3]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  v_troot_init(n_hypool_troot)    ! previous day's volume of belowground water storage compartments   [m3]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  v_troot(n_hypool_troot)         ! volume of belowground water storage compartments                  [m3]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8),allocatable :: z_node_aroot(:)       ! nodal height of absorbing root water storage compartments [m]   
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  th_ag(n_hypool_ag)              ! water in aboveground compartments                                 [kgh2o/indiv]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  th_troot(n_hypool_troot)        ! water in belowground compartments                                 [kgh2o/indiv]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  psi_ag(n_hypool_ag)             ! water potential in aboveground compartments                       [MPa]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  psi_troot(n_hypool_troot)       ! water potential in belowground compartments                       [MPa]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  refill_thresh                   ! water potential threshold for xylem refilling to occur            [MPa]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  btran(nlevcan_hyd)              ! leaf water potential limitation on gs                             [0-1]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  lwp_mem(numLWPmem)              ! leaf water potential over the previous numLWPmem timesteps        [MPa]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  lwp_stable                      ! leaf water potential just before it became unstable               [MPa]
external_models/fates/main/FatesHydraulicsMemMod.F90:     logical  ::  lwp_is_unstable                 ! flag for instability of leaf water potential over previous timesteps
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                  ! sub-residual water content  (+ supersaturation; - subsaturation)
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  iterh1                          ! number of iterations required to achieve tolerable water balance error
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  errh2o                          ! total water balance error per unit crown area                     [kgh2o/m2]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  errh2o_growturn_ag(n_hypool_ag) ! error water pool for increase (growth) or
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                  !  insufficient water available to increase
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                  !  tissue volume or too much water is
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8) ::  errh2o_pheno_ag(n_hypool_ag)    ! error water pool for for leaf-on
external_models/fates/main/FatesHydraulicsMemMod.F90:                                                  !  insufficient plant water available to 
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8),allocatable ::  th_aroot(:)         ! water in absorbing roots                                          [kgh2o/indiv]
external_models/fates/main/FatesHydraulicsMemMod.F90:     !real(r8),allocatable ::  th_aroot_prev(:)    ! water in absorbing roots, prev timestep (debug)                   [kgh2o/indiv]
external_models/fates/main/FatesHydraulicsMemMod.F90:     !real(r8),allocatable ::  th_aroot_prev_uncorr(:) ! water in absorbing roots, prev timestep, initial guess (debug)  [kgh2o/indiv]
external_models/fates/main/FatesHydraulicsMemMod.F90:     real(r8),allocatable ::  psi_aroot(:)        ! water potential in absorbing roots                                [MPa]
external_models/fates/main/EDInitMod.F90:    site_in%water_memory(:)  = nan
external_models/fates/main/EDInitMod.F90:    real(r8) :: watermem 
external_models/fates/main/EDInitMod.F90:       watermem = 0.5_r8
external_models/fates/main/EDInitMod.F90:          sites(s)%water_memory(1:numWaterMem) = watermem
external_models/fates/main/FatesConstantsMod.F90:  ! freezing point of water at 1 atm (K)
external_models/fates/main/FatesConstantsMod.F90:  real(fates_r8), parameter, public :: t_water_freeze_k_1atm   = 273.15_fates_r8     
external_models/fates/main/FatesConstantsMod.F90:  ! freezing point of water at triple point (K)
external_models/fates/main/FatesConstantsMod.F90:  real(fates_r8), parameter, public :: t_water_freeze_k_triple = 273.16_fates_r8      
external_models/fates/main/FatesConstantsMod.F90:  ! Density of fresh liquid water (kg/m3)
external_models/fates/main/FatesConstantsMod.F90:  real(fates_r8), parameter, public :: dens_fresh_liquid_water = 1.0E3_fates_r8
external_models/fates/main/EDMainMod.F90:          !                waterstate_inst)
external_models/fates/main/EDMainMod.F90:    ! When plants die, the water goes with them.  This effects
external_models/fates/main/EDMainMod.F90:    ! the water balance. 
external_models/fates/main/FatesHistoryInterfaceMod.F90:                 sum(sites(s)%water_memory(1:numWaterMem))/real(numWaterMem,r8)
external_models/fates/main/FatesHistoryInterfaceMod.F90:         long='site level mean liquid water volume for drought phen', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='mean individual water balance error', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='number of outer iterations required to achieve tolerable water balance error', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='number of inner iterations required to achieve tolerable water balance error', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='absorbing root water content', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='transporting root water content', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='stem water contenet', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='leaf water content', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='absorbing root water potential', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='transporting root water potential', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='stem water potential', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='leaf water potential', use_default='inactive', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='stem water fraction of condutivity', use_default='active', &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='water stored inside vegetation tissues (leaf, stem, roots)', use_default='inactive',   &
external_models/fates/main/FatesHistoryInterfaceMod.F90:             long='amount of water in new recruits', use_default='inactive',   &
external_models/fates/main/FatesInterfaceMod.F90:                                                 ! and how it moves and stores water in its
external_models/fates/main/FatesInterfaceMod.F90:      ! volumetric soil water at saturation (porosity)
external_models/fates/main/FatesInterfaceMod.F90:      real(r8),allocatable :: watsat_sisl(:)       ! volumetric soil water at saturation (porosity)
external_models/fates/main/FatesInterfaceMod.F90:      real(r8),allocatable :: watres_sisl(:)       ! volumetric residual soil water
external_models/fates/main/FatesInterfaceMod.F90:      real(r8),allocatable :: h2o_liq_sisl(:)      ! Liquid water mass in each layer (kg/m2)
external_models/fates/main/FatesInterfaceMod.F90:      ! Logical stating whether a ground layer can have water uptake by plants
external_models/fates/main/FatesInterfaceMod.F90:      ! The only condition right now is that liquid water exists
external_models/fates/main/FatesInterfaceMod.F90:      real(r8) :: plant_stored_h2o_si         ! stored water in LIVE+DEAD vegetation (kg/m2 H2O)
external_models/fates/main/FatesInterfaceMod.F90:            case('soilwater_ipedof')
external_models/fates/main/EDParamsMod.F90:                                                  !  soil to root direction (kg water/m2 root area/Mpa/s)
external_models/fates/main/EDParamsMod.F90:                                                  !  root to soil direciton (kg water/m2 root area/Mpa/s)
external_models/fates/main/EDParamsMod.F90:   real(r8),protected,public :: hydr_psi0          !  sapwood water potential at saturation (MPa)
external_models/fates/main/EDParamsMod.F90:   real(r8),protected,public :: hydr_psicap        !  sapwood water potential at which capillary reserves exhausted (MPa)
external_models/fates/main/FatesInventoryInitMod.F90:      ! water	(NA)       Water content of soil (NOT USED)
external_models/fates/main/FatesInventoryInitMod.F90:      real(r8)                                    :: p_water    ! Patch water (unused)
external_models/fates/main/FatesInventoryInitMod.F90:            p_water,p_fsc, p_stsc, p_stsl, p_ssc, &
external_models/fates/main/FatesInventoryInitMod.F90:               p_water,p_fsc, p_stsc, p_stsl, p_ssc, &
external_models/fates/main/FatesInventoryInitMod.F90:       write(pss_file_out,*) 'time patch trk age area water fsc stsc stsl ssc psc msn fsn'
external_models/fates/main/EDPftvarcon.F90:     real(r8), allocatable :: smpso(:)               ! Soil water potential at full stomatal opening 
external_models/fates/main/EDPftvarcon.F90:     real(r8), allocatable :: smpsc(:)               ! Soil water potential at full stomatal closure 
external_models/fates/main/EDPftvarcon.F90:     real(r8), allocatable :: hydr_avuln_gs(:)      ! shape parameter for stomatal control of water vapor exiting leaf 
external_models/fates/main/EDPftvarcon.F90:     real(r8), allocatable :: hydr_p50_gs(:)        ! water potential at 50% loss of stomatal conductance
external_models/fates/main/EDPftvarcon.F90:     real(r8), allocatable :: hydr_p50_node(:,:)    ! xylem water potential at 50% conductivity loss (MPa)
external_models/fates/main/EDPftvarcon.F90:     real(r8), allocatable :: hydr_thetas_node(:,:) ! saturated water content (cm3/cm3)
external_models/fates/biogeophys/FatesBstressMod.F90:   !              note that water stress is calculated in EDBtranMod or HYDRO
external_models/fates/biogeophys/FatesBstressMod.F90:   use FatesConstantsMod , only : tfrz => t_water_freeze_k_1atm 
external_models/fates/biogeophys/FatesBstressMod.F90:   use EDBtranMod        , only : check_layer_water
external_models/fates/biogeophys/FatesBstressMod.F90:      real(r8) :: salinity_node     ! salinity in the soil water [ppt]
external_models/fates/biogeophys/FatesBstressMod.F90:                    ! Calculations are only relevant where liquid water exists
external_models/fates/biogeophys/FatesBstressMod.F90:                    if ( check_layer_water(bc_in(s)%h2o_liqvol_sl(j),bc_in(s)%tempk_sl(j)) )  then
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:   use FatesConstantsMod, only : denh2o => dens_fresh_liquid_water
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:   use FatesHydraulicsMemMod, only: cohort_recruit_water_layer
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:   use FatesHydraulicsMemMod, only: recruit_water_avail_layer
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       ! Now we set the prevous to the current so that the water states
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !convert soil water contents to water potential in each soil layer and
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !assign it to the absorbing root (assume absorbing root water potential
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       !call swcVG_psi_from_th(waterstate_inst%h2osoi_liqvol_shell(c,j,1), &
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !initialize plant water potentials at hydrostatic equilibrium (dh/dz = 0)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !the assumption is made here that initial conditions for soil water will 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !it doesn't matter which absorbing root layer the transporting root water
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !working our way up a tree, assigning water potentials that are in
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !hydrostatic equilibrium with the water potential immediately below
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ccohort_hydr%lwp_mem(:)       = ccohort_hydr%psi_ag(1)   ! initializes the leaf water potential memory
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ccohort_hydr%lwp_is_unstable  = .false.                  ! inital value for leaf water potential stability flag
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! water pool is 1/2 the distance from the bottom of the canopy to the top of the tree
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! in special case where n_hypool_stem = 1, the node height of the stem water pool is
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! change size and effect water contents
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      ! depending on the plant water uptake/loss. 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      ! we assume that the conductivitity for water uptake is larger than 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      ! water loss due to composite regulation of resistance the roots
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      ! Steudle, E. Water uptake by roots: effects of water deficit. 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      real(r8) :: kmax_root_surf_total               ! maximum conducitivity for total root surface(kg water/Mpa/s)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      real(r8) :: kmax_soil_total                    ! maximum conducitivity for from root surface to soil shell(kg water/Mpa/s) 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      real(r8) :: kmax_root_surf                     ! maximum conducitivity for unit root surface (kg water/m2 root area/Mpa/s) 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: th_ag_uncorr(      n_hypool_ag) ! uncorrected aboveground water content[m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: th_troot_uncorr(n_hypool_troot) ! uncorrected transporting root water content[m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: th_aroot_uncorr(currentSite%si_hydr%nlevsoi_hyd)    ! uncorrected absorbing root water content[m3 m-3] 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! UPDATE WATER CONTENTS (assume water for growth comes from within tissue itself -- apply water mass conservation)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       ccohort_hydr%th_ag(k) = constrain_water_contents(th_ag_uncorr(k), small_theta_num, ft, k)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       ccohort_hydr%th_troot(k) = constrain_water_contents(th_troot_uncorr(k), small_theta_num, ft, 3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       ccohort_hydr%th_aroot(j) = constrain_water_contents(th_aroot_uncorr(j), small_theta_num, ft, 4)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! + means water created; - means water destroyed
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  function constrain_water_contents(th_uncorr, delta, ft, k) result(th_corr)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in) :: th_uncorr ! uncorrected water content (m3 m-3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: thr                    ! residual water content (m3 m-3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: ths                    ! saturated water content (m3 m-3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: th_corr                ! corrected water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  end function constrain_water_contents
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: h2osoi_liqvol ! liquid water content (m3/m3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! there needs to be a re-assesment of the how much liquid water is bound in the
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! plants.  This value is necessary for water balancing in the HLM.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	      !only account for the water for not newly recruit for mass balance
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! This subroutine is called to caluate the water requirement for newly recruited cohorts
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! The water update is allocated proportionally to the root biomass, which could be updated
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! After the root water uptake, is_newly_recruited flag is set to false.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: recruitw !water for newly recruited cohorts (kg water/m2/s)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: recruitw_total ! total water for newly recruited cohorts (kg water/m2/s)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: err !mass error of water for newly recruited cohorts (kg water/m2/s)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: sumrw_uptake !sum of water take for newly recruited cohorts (kg water/m2/s)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:              ! recruitment water uptake
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! This subroutine constrains the number of plants so that there is enought water 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: watres_local   !minum water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: total_water !total water in rhizosphere at a specific layer (m^3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: total_water_min !total minimum water in rhizosphere at a specific layer (m^3)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: recruitw !water for newly recruited cohorts (kg water/m2/individual)   
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	 cohort_recruit_water_layer(j) = recruitw*rootfr
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         total_water = sum(csite_hydr%v_shell(j,:)*csite_hydr%h2osoi_liqvol_shell(j,:)) * &
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	 total_water_min = sum(csite_hydr%v_shell(j,:)*watres_local) * &
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	 !assumes that only 50% is available for recruit water....
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	 recruit_water_avail_layer(j)=0.5_r8*max(0.0_r8,total_water-total_water_min)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       if(cohort_recruit_water_layer(j)>0.0_r8) then
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          n = recruit_water_avail_layer(j)/cohort_recruit_water_layer(j)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !which is dependant on whether it is water uptake or loss for every 30 minutes
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! these are independent on the water state
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dpsidr                                   ! water potential gradient near root surface                  [MPa/m]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: w_shell_new                              ! updated water mass in rhizosphere compartment               [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: w_layer_init(nlevsoi_hyd_max)            ! initial water mass by layer                                 [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: w_layer_interp(nlevsoi_hyd_max)          ! water mass after interpolating to new rhizosphere           [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: w_layer_new(nlevsoi_hyd_max)             ! water mass by layer after interpolation and fudging         [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: h2osoi_liq_col_new(nlevsoi_hyd_max)      ! water mass per area after interpolating to new rhizosphere  [kg/m2]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: psi_shell_init(nlevsoi_hyd_max,nshell)   ! initial water potential in rhizosphere compartment          [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: delta_s(nlevsoi_hyd_max)                 ! change in saturation fraction needed to ensure water bal    [0-1]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: errh2o(nlevsoi_hyd_max)                  ! water budget error after updating                           [kg/m2]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    integer  :: indexc,indexj                            ! column and layer indices where there is a water balance error
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! accumlate water across shells for each layer (initial and interpolated)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! estimate delta_s across all shells needed to ensure total water in each layer doesn't change
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:             write(fates_log(),*)'WARNING:  water balance error ',&
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! Parses out mean vertical water fluxes resulting from infiltration,
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! drainage, and vertical water movement (dwat_kgm2) over radially stratified
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! The approach used is heuristic, but based on the principle that water
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! shells with higher water contents/potentials within that layer, and
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! alternatively, that water fluxing into a layer will preferentially go
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! into shells with lower water contents/potentials.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! shell until the change in mean layer water (dwat_kgm2) is accounted for.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dwat_kgm2                                            ! change in layer water content              [kg/m2]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    integer  :: indexj                          ! column and layer indices where there is a water balance error
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dwat_kg                                ! water remaining to be distributed across shells                [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: thdiff                                 ! water content difference between ordered adjacent rhiz shells  [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: wdiff                                  ! mass of water represented by thdiff over previous k shells     [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: errh2o(nlevsoi_hyd_max)                ! water budget error after updating                              [kg/m2]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: cumShellH2O                            ! sum of water in all the shells of a specific layer             [kg/m2]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: h2osoi_liq_shell(nlevsoi_hyd_max,nshell) !water in the rhizosphere shells                               [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       ! First step, identify how the liquid water in each layer has changed
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       ! The drainage component should be the total change in liquid water content from the last time
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          ! order shells in terms of increasing or decreasing volumetric water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          ! fill shells with water up to the water content of the next-wettest shell, 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          ! drain shells' water down to the water content of the next-driest shell, 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                   write(fates_log(),*)'WARNING:  water balance error in FillDrainRhizShells',&
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     !    van Genuchten (1980)-specific functions for the swc (soil water characteristic)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8), parameter :: thresh          = 1.e-7_r8  ! threshold for water balance error (warning only) [mm h2o]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8), parameter :: thresh_break    = 1.e-4_r8  ! threshold for water balance error (stop model)   [mm h2o]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! hydraulics timestep adjustments for acceptable water balance error
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: we_area_outer                 ! 1D plant-soil continuum water error                             [kgh2o m-2 individual-1]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: z_node(       n_hypool_tot)      ! nodal height of water storage compartments                      [m]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: z_node_1l(    n_hypool_tot)      ! nodal height of water storage compartments (single-layer soln)  [m]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: v_node(       n_hypool_tot)      ! volume of water storage compartments                            [m3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: v_node_1l(    n_hypool_tot)      ! volume of water storage compartments (single-layer soln)        [m3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: psi_node(     n_hypool_tot)      ! water potential in water storage compartments                   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: psi_node_1l(  n_hypool_tot)      ! water potential in water storage compartments (single-layer soln) [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: ths_node(     n_hypool_tot)      ! saturated volumetric water in water storage compartments        [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: ths_node_1l(  n_hypool_tot)      ! saturated volumetric water in water storage compartments (single-layer soln) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: thr_node(     n_hypool_tot)      ! residual volumetric water in water storage compartments         [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: thr_node_1l(  n_hypool_tot)      ! residual volumetric water in water storage compartments (single-layer soln) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: th_node(      n_hypool_tot)      ! volumetric water in water storage compartments                  [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: th_node_1l(   n_hypool_tot)      ! volumetric water in water storage compartments (single-layer soln) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: dth_node(     n_hypool_tot)      ! change in volumetric water in water storage compartments        [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: dwat_veg_coh                  ! total indiv change in stored vegetation water over a timestep   [kg]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: dth_layershell_col(nlevsoi_hyd_max,nshell) ! accumulated water content change over all cohorts in a column   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: ths_shell_1D(nshell)          ! saturated water content of rhizosphere compartment              [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: thr_shell_1D(nshell)          ! residual water content of rhizosphere compartment               [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: ths_aroot_1D                  ! saturated water content of 1D representation of fine roots      [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: thr_aroot_1D                  ! residual water content of 1D representation of fine roots       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: psi_node_aroot_1D             ! water potential of absorbing root                               [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                                               ! by the sum of water fluxes through the cohorts
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: prev_h2oveg                   ! previous time step plant water storage (kg/m2)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! DEPRECATED: waterstate_inst%psisoi_liq_shell 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     !For newly recruited cohorts, add the water uptake demand to csite_hydr%recruit_w_uptake
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     !update water storage in veg after incorporating newly recuited cohorts
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                 !call map2d_to_1d_shells(soilstate_inst, waterstate_inst, g, c, rs1(c,1), ccohort_hydr%l_aroot_layer*ccohort%n, &
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                      ! NET EFFECT: total water removed from plant-soil system remains the same: it 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                      !             root water uptake in each layer is proportional to each layer's total 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                      !             layers have transporting-to-absorbing root water potential gradients of opposite sign
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                      ! order soil layers in terms of decreasing volumetric water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                   ! first update the leaf water potential memory
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                ! Save the amount of liquid soil water known to the model after root uptake
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                ! Save the amount of liquid soil water known to the model after root uptake
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:                ! This calculation also assumes that 1mm of water is 1kg
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:           ! mass balance check and pass the total stored vegetation water to HLM
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	   !remove the recruitment water uptake as it has been added to prev_h2oveg 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! This subroutine accounts for the water bound in plants that have
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! just died. This water is accumulated at the site level for all plants
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! In another routine, this pool is reduced as water vapor flux, and
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     real(r8) :: delta_w                                      !water change due to mortality Kg/m2
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! This subroutine accounts for the water bound in plants that have
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! just recruited. This water is accumulated at the site level for all plants
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! Because this water is taken from the soil in hydraulics_bc, which will not 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! be called until the next timestep, this water is subtracted out of
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! plant_stored_h2o_si to ensure HLM water balance at the beg_curr_day timestep.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! plant_stored_h2o_si will include this water when calculated in hydraulics_bc
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:     ! at the next timestep, when it gets pulled from the soil water.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in)    :: z_node(:)              ! nodal height of water storage compartments                      [m]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in)    :: v_node(:)              ! volume of water storage compartments                            [m3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in)    :: ths_node(:)            ! saturated volumetric water in water storage compartments        [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in)    :: thr_node(:)            ! residual volumetric water in water storage compartments         [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(inout) :: th_node(:)             ! volumetric water in water storage compartments                  [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in)    :: thresh                 ! threshold for water balance error (warning only)                [mm h2o]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(in)    :: thresh_break           ! threshold for water balance error (stop model)                  [mm h2o]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(out)   :: dth_node_outer(:)      ! change in volumetric water in water storage compartments        [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) , intent(out)   :: we_area_outer          ! 1D plant-soil continuum water error                             [kgh2o m-2]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: th_node_init( n_hypool_tot)      ! initial volumetric water in water storage compartments          [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: psi_node(     n_hypool_tot)      ! water potential in water storage compartments                   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dpsidth_node( n_hypool_tot)      ! derivative of water potential wrt to theta                      [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: flc_node(     n_hypool_tot)      ! fractional loss of conductivity at water storage nodes          [-]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: hdiff_bound(  n_hypool_tot)      ! total water potential difference across lower boundary          [MPa-1]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dhdiffdpsi0(  n_hypool_tot)      ! derivative of total water potential difference wrt psi above    [-]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dhdiffdpsi1(  n_hypool_tot)      ! derivative of total water potential difference wrt psi below    [-]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dflcgsdpsi                    ! derivative of stomatal vuln curve wrt to leaf water potential   [MPa-1]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dflcgsdth                     ! derivative of stomatal vuln curve wrt to leaf water content     [m-3 m3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: dqtopdth_leaf                 ! derivative of transpiration rate wrt to leaf water content      [kgh2o indiv-1 s-1 m-3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8) :: supsub_adj_w                  ! water ajustment due to super saturation or sub residual flag 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    integer  :: max_l                         !location of maximum water storage in the array
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !! in case timestep needs to be chopped in half to balance water
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !! cuts timestep in half until all sub-timesteps (inner do-while loop) balance the water budget
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       !! stops and returns to outer loop if at any point the water budget 
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          !! compute water potential differences + conductances and their derivatives wrt water potential
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          !! compute flux terms and their derivatives wrt water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          ! different water balance metrics can be chosen here (with an appropriate corresponding thresh)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    end do ! loop to get a timestep divisor that balances water
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       write(fates_log(),*)'WARNING: plant hydraulics water balance error exceeds threshold of ',&
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:       write(fates_log(),*)'EDPlantHydraulics water balance error exceeds threshold of = ', thresh_break
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*)'WARNING: plant hydraulics water balance error exceeds 1.0e-7 and is ajusted for error'
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:      !dump the error water to the bin with largest water storage
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)          , intent(in)  :: psi_node(:)            ! water potential in water storage compartments                   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)          , intent(in)  :: flc_node(:)            ! fractional loss of conductivity at water storage nodes          [-]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)          , intent(out) :: hdiff_bound(:)         ! total water potential difference across lower boundary          [MPa-1]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)          , intent(out) :: dhdiffdpsi0(:)         ! derivative of total water potential difference wrt psi above    [-]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)          , intent(out) :: dhdiffdpsi1(:)         ! derivative of total water potential difference wrt psi below    [-]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          ! Comprised of two distinct conductance terms each with distinct water potentials
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:             ! examine direction of water flow; use the upstream node's k for the boundary k.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	        k_bound(k)       = kmax_bound(k) * flc_node(k+1)  ! water moving towards atmosphere
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:	        k_bound(k)       = kmax_bound(k) * flc_node(k)    ! water moving towards soil
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)             , intent(in)             :: lwp  !leaf water potential (MPa)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! plant tissue or soil water potentials to a fractional loss of conductivity
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)             , intent(in)             :: lwp         ! leaf water potential (MPa)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         p50_gs   => EDPftvarcon_inst%hydr_p50_gs     & ! Input: [real(r8) (:) ] stomatal PLC curve: water potential at 50% loss of gs,max  [Pa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! plant tissue or soil water potentials to a fractional loss of conductivity
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(in)     :: psi_node    ! water potential                  [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         p50      => EDPftvarcon_inst%hydr_p50_node     & ! Input: [real(r8) (:,:) ] PLC curve: water potential at 50% loss of conductivity  [Pa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*) 'ERROR: invalid soil water characteristic function specified, iswc = ', iswc
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! plant tissue or soil water potentials to a fractional loss of conductivity
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(in)     :: psi_node       ! water potential                  [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         p50      => EDPftvarcon_inst%hydr_p50_node    & ! Input: [real(r8) (:,:) ] PLC curve: water potential at 50% loss of conductivity  [Pa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*) 'ERROR: invalid soil water characteristic function specified, iswc = ', iswc
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! plant tissue or soil water potentials to volumetric water contents
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(in)            :: psi_node    ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(out)           :: th_node     ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas   => EDPftvarcon_inst%hydr_thetas_node  , & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         resid    => EDPftvarcon_inst%hydr_resid_node     & ! Input: [real(r8) (:,:) ] P-V curve: residual water fraction
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*)'bisect_pv returned positive value for water potential at pm = ', pm
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*)  'invalid soil water characteristic function specified, iswc = ', iswc
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: psi_node    ! water potential                   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: th_node     ! water content                     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: evaluates the plant PV curve (returns water potential, psi)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! at a given water content (th)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(in)     :: th_node     ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(out)    :: psi_node    ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*) 'ERROR: invalid soil water characteristic function specified, iswc = ', iswc
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: evaluates the plant PV curve (returns water potential, psi)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! at a given water content (th)
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(in)     :: th_node     ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)         , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:          write(fates_log(),*) 'ERROR: invalid soil water characteristic function specified, iswc = ', iswc
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: computes water potential in the elastic region of the plant PV
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: computes water potential in the elastic region of the plant PV
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: computes solute water potential (negative) as a function of
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !  water content for the plant PV curve.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas  => EDPftvarcon_inst%hydr_thetas_node, & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content for node   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas  => EDPftvarcon_inst%hydr_thetas_node    , & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content for node   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: computes pressure water potential (positive) as a function of
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    !  water content for the plant PV curve.
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas  => EDPftvarcon_inst%hydr_thetas_node    , & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content for node   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas  => EDPftvarcon_inst%hydr_thetas_node, & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content for node   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    ! !DESCRIPTION: computes water potential in the capillary region of the plant
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content     [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! water potential   [MPa]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas    => EDPftvarcon_inst%hydr_thetas_node     & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content for node   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(in)     :: x           ! water content                            [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:    real(r8)      , intent(out)    :: y           ! derivative of water potential wrt theta  [MPa m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:         thetas    => EDPftvarcon_inst%hydr_thetas_node    & ! Input: [real(r8) (:,:) ] P-V curve: saturated volumetric water content for node   [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns saturation fraction given water content, porosity, and residual water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: th       !soil volumetric water content       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watres   !volumetric residual soil water      [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns saturation fraction given water content and porosity
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: th       !soil volumetric water content       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns water potential given water content and shape parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: th       !volumetric water content       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watres   !volumetric residual soil water      [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns water potential given saturation fraction, air-entry pressure and shape parameter
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: th       !volumetric water content       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns water potential given saturation fraction and shape parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns water potential given saturation fraction, air-entry pressure and shape parameter
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns water content given saturation fraction, porosity and residual water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watres   !volumetric residual soil water      [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(out)           :: th       !soil volumetric water content       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns water content given saturation fraction and porosity
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)            :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(out)           :: th       !soil volumetric water content       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns saturation fraction given water potential and shape parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns saturation fraction given water potential and shape parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns derivative of water water potential with respect to water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! given water content and SWC parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: th       !volumetric water content                       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: watres   !volumetric residual soil water                 [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns derivative of water water potential with respect to water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! given water content and SWC parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: th       !volumetric water content                       [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns derivative of water water potential with respect to water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: watres   !volumetric residual soil water                 [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns derivative of water water potential with respect to water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  real(r8), intent(in)  :: watsat   !volumetric soil water at saturation (porosity) [m3 m-3]
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! given water potential and SWC parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! Campbell (1974) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! given water potential and SWC parameters
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns derivative of water water potential with respect to water content
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! van Genuchten (1980) soil water characteristic (retention) curve
external_models/fates/biogeophys/FatesPlantHydraulicsMod.F90:  ! returns derivative of water water potential with respect to water content
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:    use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:   real(r8), dimension(0:1) :: bbbopt ! Cuticular conductance at full water potential (umol H2O /m2/s)
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:    use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:    use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:     use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:      use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:      use FatesConstantsMod, only : tfrz => t_water_freeze_k_1atm
external_models/fates/biogeophys/FatesPlantRespPhotosynthMod.F90:      ! Adjust for water limitations 
external_models/fates/biogeophys/EDBtranMod.F90:   use FatesConstantsMod , only : tfrz => t_water_freeze_k_1atm 
external_models/fates/biogeophys/EDBtranMod.F90:   public :: check_layer_water
external_models/fates/biogeophys/EDBtranMod.F90:  logical function check_layer_water(h2o_liq_vol, tempk)
external_models/fates/biogeophys/EDBtranMod.F90:    check_layer_water = .false.
external_models/fates/biogeophys/EDBtranMod.F90:          check_layer_water = .true.
external_models/fates/biogeophys/EDBtranMod.F90:  end function check_layer_water
external_models/fates/biogeophys/EDBtranMod.F90:               bc_out(s)%active_suction_sl(j) = check_layer_water( bc_in(s)%h2o_liqvol_sl(j),bc_in(s)%tempk_sl(j) )
external_models/fates/biogeophys/EDBtranMod.F90:                    ! Calculations are only relevant where liquid water exists
external_models/fates/biogeophys/EDBtranMod.F90:                    if ( check_layer_water(bc_in(s)%h2o_liqvol_sl(j),bc_in(s)%tempk_sl(j)) )  then
external_models/fates/biogeophys/EDBtranMod.F90:                       ! root water uptake is not linearly proportional to root density,
Binary file external_models/sbetr/example_input/sierra_halfhour_full_year_clmforc.nc matches
Binary file external_models/sbetr/example_input/sierra_grid.nc matches
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:     real(r8), pointer                   :: qbot(:)       => null()     !water flux at bottom boundary, mm/s
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:       atm2lnd_vars, soilhydrology_vars, soilstate_vars,waterstate_vars,waterflux_vars, &
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:    use WaterstateType    , only : waterstate_type
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:    use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:    type(waterstate_type)    , intent(inout) :: waterstate_vars
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:    type(waterflux_type)     , intent(inout) :: waterflux_vars
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:             waterstate_vars%h2osoi_liqvol_col(c,j) = min(this%h2osoi_liqvol(tstep,j),grid%watsat(j))
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:             waterstate_vars%air_vol_col(c,j)       = grid%watsat(j)-waterstate_vars%h2osoi_liqvol_col(c,j)
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:             waterstate_vars%h2osoi_icevol_col(c,j) = this%h2osoi_icevol(tstep,j)
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:             waterflux_vars%qflx_rootsoi_col(c,j)   = this%qflx_rootsoi(tstep,j)  !water exchange between soil and root, m/H2O/s
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:                   waterflux_vars%qflx_rootsoi_patch(p,j) = waterflux_vars%qflx_rootsoi_col(c,j)
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:             waterflux_vars%qflx_surf_col(c)        = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:             waterflux_vars%qflx_drain_vr_col(c,j)  = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:       waterflux_vars%qflx_totdrain_col(c)        = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:       waterflux_vars%qflx_snow2topsoi_col(c)     = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:       waterflux_vars%qflx_h2osfc2topsoi_col(c)   = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:       waterflux_vars%qflx_gross_infl_soil_col(c) = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:       waterflux_vars%qflx_gross_evap_soil_col(c) = 0._r8
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:          waterstate_vars%h2osoi_liq_col(c,j) = this%h2osoi_liq(tstep,j)
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:          waterstate_vars%h2osoi_ice_col(c,j) = this%h2osoi_ice(tstep,j)
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:          waterstate_vars%h2osoi_vol_col(c,j) = waterstate_vars%h2osoi_liqvol_col(c,j) + &
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:            waterstate_vars%h2osoi_icevol_col(c,j)
external_models/sbetr/src/driver/standalone/ForcingDataType.F90:          waterstate_vars%h2osoi_vol_col(c,j) = min(waterstate_vars%h2osoi_vol_col(c,j), grid%watsat(j))
external_models/sbetr/src/driver/standalone/GridMod.F90:     real(r8), public, pointer :: watsat(:) => null() ! saturated volumetric water content
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:  subroutine StandaloneInitOffline(this, bounds, lun, col, pft, waterstate, namelist_buffer, base_filename)
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:    use WaterStateType      , only : waterstate_type
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:    call this%BeTRInit(bounds, lun, col, pft, waterstate, namelist_buffer, base_filename)
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:    use WaterFluxType     , only : waterflux_type
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:  subroutine StandaloneSetBiophysForcing(this, bounds, col, pft,  carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:    waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:  use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:  type(waterflux_type)                   , optional, intent(in) :: waterflux_vars
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:  call this%BeTRSetBiophysForcing(bounds, col, pft, 1, nlevsoi, carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/standalone/BeTRSimulationStandalone.F90:      waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/shared/BeTRType.F90:     procedure, public  :: pre_diagnose_soilcol_water_flux
external_models/sbetr/src/driver/shared/BeTRType.F90:     procedure, public  :: diagnose_advect_water_flux
external_models/sbetr/src/driver/shared/BeTRType.F90:     procedure, public  :: diagnose_drainage_water_flux
external_models/sbetr/src/driver/shared/BeTRType.F90:    ! FIXME(bja, 201604) need to remove waterstate, cnstate and
external_models/sbetr/src/driver/shared/BeTRType.F90:         tracer_conc_grndwater => this%tracerstates%tracer_conc_grndwater_col   ,      & !
external_models/sbetr/src/driver/shared/BeTRType.F90:         qflx_drain_vr         => biogeo_flux%qflx_drain_vr_col               ,        & ! Output  : [real(r8) (:,:) ]  vegetation/soil water exchange (m H2O/step) (to river +)
external_models/sbetr/src/driver/shared/BeTRType.F90:                    !when drainage is negative, tracer comes from groundwater
external_models/sbetr/src/driver/shared/BeTRType.F90:                      aqucon = tracer_conc_grndwater(c,k)
external_models/sbetr/src/driver/shared/BeTRType.F90:                  !when drainage is negative, assume the flux is magically coming from other groundwater sources
external_models/sbetr/src/driver/shared/BeTRType.F90:    ! calculate water flux from dew formation, and sublimation
external_models/sbetr/src/driver/shared/BeTRType.F90:         !now only do water isotope tracer
external_models/sbetr/src/driver/shared/BeTRType.F90:   ! and water tracers
external_models/sbetr/src/driver/shared/BeTRType.F90:   subroutine pre_diagnose_soilcol_water_flux(this, bounds, num_nolakec, filter_nolakec, biophysforc)
external_models/sbetr/src/driver/shared/BeTRType.F90:   ! pre diagnose advective water fluxes at different soil interfaces
external_models/sbetr/src/driver/shared/BeTRType.F90:   end subroutine pre_diagnose_soilcol_water_flux
external_models/sbetr/src/driver/shared/BeTRType.F90:   subroutine diagnose_advect_water_flux(this, betr_time, &
external_models/sbetr/src/driver/shared/BeTRType.F90:   ! diagnose advective water fluxes between different soil layers
external_models/sbetr/src/driver/shared/BeTRType.F90:     qflx_rootsoi        =>    biophysforc%qflx_rootsoi_col          , & ! Input  : [real(r8) (:,:) ]  vegetation/soil water exchange (m H2O/s) (+ = to atm)
external_models/sbetr/src/driver/shared/BeTRType.F90:     qflx_adv            =>    biogeo_flux%qflx_adv_col              , & ! Output: [real(r8) (:,:) ]  water flux at interfaces       (m H2O/s) (- = to atm)
external_models/sbetr/src/driver/shared/BeTRType.F90:   !start from the bottom layer, because the water exchange between vadose zone soil and aquifer and plant root is known
external_models/sbetr/src/driver/shared/BeTRType.F90:   !the water flux at uppper surface can be inferred using the mass balance approach
external_models/sbetr/src/driver/shared/BeTRType.F90:   end subroutine diagnose_advect_water_flux
external_models/sbetr/src/driver/shared/BeTRType.F90:   subroutine diagnose_drainage_water_flux(this, betr_time, &
external_models/sbetr/src/driver/shared/BeTRType.F90:   ! diagnose advective water fluxes between different soil layers
external_models/sbetr/src/driver/shared/BeTRType.F90:     h2osoi_liq         =>    biophysforc%h2osoi_liq_col          , & ! Output: [real(r8) (:,:) ] liquid water (kg/m2)
external_models/sbetr/src/driver/shared/BeTRType.F90:     qflx_drain_vr      =>    biogeo_flux%qflx_drain_vr_col       , & ! Output  : [real(r8) (:,:) ]  vegetation/soil water exchange (m H2O/step) (to river +)
external_models/sbetr/src/driver/shared/BeTRType.F90:   !start from the bottom layer, because the water exchange between vadose zone soil and aquifer and plant root is known
external_models/sbetr/src/driver/shared/BeTRType.F90:   !the water flux at uppper surface can be inferred using the mass balance approach
external_models/sbetr/src/driver/shared/BeTRType.F90:   !the change in water content is solely due to subsurface draiange.
external_models/sbetr/src/driver/shared/BeTRType.F90:   end subroutine diagnose_drainage_water_flux
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  subroutine BeTRSimulationInit(this, bounds, lun, col, pft, waterstate, namelist_buffer, masterproc)
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    use WaterstateType , only : waterstate_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    if (size(waterstate%h2osoi_liq_col) > 0) continue
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  subroutine BeTRSimulationInitOffline(this, bounds, lun, col, pft, waterstate, &
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    use WaterstateType , only : waterstate_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    if (size(waterstate%h2osoi_liq_col) > 0) continue
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  subroutine BeTRInit(this, bounds, lun, col, pft, waterstate, namelist_buffer, &
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    use WaterStateType , only : waterstate_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    type(waterstate_type)                    , intent(in) :: waterstate
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:        waterstate_vars = waterstate)
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:     bounds, ubj, num_soilc, filter_soilc, waterstate_vars)
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    type(Waterstate_Type)       , intent(in)    :: waterstate_vars ! water state variables
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  subroutine BeTRSimulationSetBiophysForcing(this, bounds,  col, pft, lbj, ubj, carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  type(waterflux_type)        , optional, intent(in) :: waterflux_vars
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    !assign waterstate
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    if(present(waterstate_vars))then
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:      this%biophys_forc(c)%rho_vap(cc,lbj:ubj)           = waterstate_vars%rho_vap_col(c,lbj:ubj)
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:      this%biophys_forc(c)%rhvap_soi(cc,lbj:ubj)         = waterstate_vars%rhvap_soi_col(c,lbj:ubj)
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    if(present(waterflux_vars))then
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    waterflux_vars)
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    use WaterfluxType    , only : waterflux_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  type(waterflux_type)        , optional, intent(inout) :: waterflux_vars
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  if(present(waterflux_vars))then
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  !prepare for water flux diagnosis. it is called before diagnosing the advective fluxes and applying
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:     call this%betr(c)%pre_diagnose_soilcol_water_flux(betr_bounds, this%num_soilc, &
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  use WaterStateType        , only : waterstate_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:!  type(waterstate_type), intent(in) :: waterstate_vars
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  ! diagnose water fluxes for tracer advection
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:     call this%betr(c)%diagnose_advect_water_flux(this%betr_time,              &
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:  ! diagnose water fluxes due to subsurface drainage
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:    use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/shared/BeTRSimulation.F90:     call this%betr(c)%diagnose_drainage_water_flux(this%betr_time, &
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:  subroutine CLMInit(this, bounds, lun, col, pft, waterstate, namelist_buffer, masterproc)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    use WaterStateType      , only : waterstate_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:      call this%BeTRInit(bounds, lun, col, pft, waterstate, namelist_buffer, masterproc=masterproc)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:      call this%BeTRInit(bounds, lun, col, pft, waterstate, namelist_buffer)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:  subroutine CLMInitOffline(this, bounds, lun, col, pft, waterstate, namelist_buffer,base_filename)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    use WaterStateType      , only : waterstate_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    call this%BeTRInit(bounds, lun, col, pft, waterstate,namelist_buffer,base_filename )
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    use WaterFluxType  , only : waterflux_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:       numf, filter, t_soisno, soilstate_vars, waterstate_vars, soil_water_retention_curve)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:   ! calculate water suction potential
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    use WaterStateType             , only : waterstate_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    use SoilWaterRetentionCurveMod , only : soil_water_retention_curve_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    type(waterstate_type)                  , intent(inout)        :: waterstate_vars
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    class(soil_water_retention_curve_type) , intent(in), optional :: soil_water_retention_curve
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    if (present(soil_water_retention_curve)) continue
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         h2osoi_vol =>    waterstate_vars%h2osoi_vol_col, & ! Input:  [real(r8) (:,:) ]  volumetric soil moisture
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         smp_l      =>    waterstate_vars%smp_l_col,      & ! Output: [real(r8) (:,:) ]  soil suction (mm)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:                  !Xcall soil_water_retention_curve%soil_suction(c, j, s_node, soilstate_vars, smp_l(c,j))
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:       bounds, ubj, num_soilc, filter_soilc, waterstate_vars)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    ! check the overall water mass consistency between betr and clm
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    use WaterStateType   , only : waterstate_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    type(waterstate_type)           , intent(in)    :: waterstate_vars
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    real(r8)              :: totwater, err
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         h2osoi_ice           => waterstate_vars%h2osoi_ice_col,                  & ! Input:  [real(r8) (:,:) ]  ice lens (kg/m2)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         h2osoi_liq           => waterstate_vars%h2osoi_liq_col,                  & ! Output: [real(r8) (:,:) ]  liquid water (kg/m2)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         totwater=dot_sum(h2osoi_ice(c,1:ubj),eyev,this%bstatus(c)) + dot_sum(h2osoi_liq(c,1:ubj),eyev,this%bstatus(c))
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         err = totwater-end_tracer_molarmass(c,id_trc_o18_h2o)
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:         print*,get_nstep(),'diff',c, totwater, end_tracer_molarmass(c,id_trc_o18_h2o),err, err/totwater
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:  subroutine CLMSetBiophysForcing(this, bounds, col, pft, carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:    waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:  use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:  type(waterflux_type)            , optional, intent(in) :: waterflux_vars
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:  call this%BeTRSetBiophysForcing(bounds, col, pft, 1, nlevsoi, carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/clm/BeTRSimulationCLM.F90:      waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  subroutine ALMInit(this, bounds, lun, col, pft, waterstate, namelist_buffer, masterproc)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    use WaterStateType  , only : waterstate_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:      call this%BeTRInit(bounds, lun, col, pft, waterstate, namelist_buffer, masterproc=masterproc)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:      call this%BeTRInit(bounds, lun, col, pft, waterstate, namelist_buffer)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  subroutine ALMInitOffline(this, bounds, lun, col, pft, waterstate, namelist_buffer, base_filename)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    use WaterStateType  , only : waterstate_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    type(waterstate_type)                    , intent(inout) :: waterstate
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    call this%BeTRInit(bounds, lun, col, pft, waterstate, namelist_buffer, base_filename)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    use WaterfluxType   , only : waterflux_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    use WaterstateType  , only : waterstate_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:     soilstate_vars, waterstate_vars, soil_water_retention_curve)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  use WaterStateType             , only : waterstate_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  use SoilWaterRetentionCurveMod , only : soil_water_retention_curve_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  type(waterstate_type)                  , intent(inout) :: waterstate_vars
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  class(soil_water_retention_curve_type) , intent(in)    :: soil_water_retention_curve
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    h2osoi_vol        =>    waterstate_vars%h2osoi_vol_col     , & ! Input:  [real(r8) (:,:) ]  volumetric soil moisture
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    smp_l             =>    waterstate_vars%smp_l_col          , & ! Output: [real(r8) (:,:) ]  soil suction (mm)
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:          call soil_water_retention_curve%soil_suction(sucsat(c,j), s_node, bsw(c,j), smp_l(c,j))
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  subroutine ALMSetBiophysForcing(this, bounds, col, pft, carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:    waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  use WaterfluxType     , only : waterflux_type
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  type(waterflux_type)        , optional, intent(in) :: waterflux_vars
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:  call this%BeTRSetBiophysForcing(bounds, col, pft, 1, nlevsoi, carbonflux_vars, waterstate_vars, &
external_models/sbetr/src/driver/alm/BeTRSimulationALM.F90:      waterflux_vars, temperature_vars, soilhydrology_vars, atm2lnd_vars, canopystate_vars, &
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  use clm_instMod           , only : waterflux_vars
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  use clm_instMod           , only : waterstate_vars
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  use clm_instMod           , only : soil_water_retention_curve
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  !x print*,'obtain waterstate_vars for initilizations that need it'
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:       pft, atm2lnd_vars, soilhydrology_vars, soilstate_vars,waterstate_vars    ,   &
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:       waterflux_vars, temperature_vars, chemstate_vars, simulation%jtops)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  !print*,'initial water state variable output',time_vars%tstep
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:       simulation%filter_soilc, waterstate_vars)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  call  simulation%Init(bounds, lun, col, pft, waterstate_vars,namelist_buffer, base_filename)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    !x print*,'prepare for diagnosing water flux'
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    call simulation%BeTRSetBiophysForcing(bounds, col, pft, 1, nlevsoi, waterstate_vars=waterstate_vars)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:      atm2lnd_vars, soilhydrology_vars, soilstate_vars,waterstate_vars,                   &
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:      waterflux_vars, temperature_vars, chemstate_vars, simulation%jtops)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    call simulation%BeTRSetBiophysForcing(bounds, col, pft, 1, nlevsoi, waterstate_vars=waterstate_vars, &
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:      waterflux_vars=waterflux_vars, soilhydrology_vars = soilhydrology_vars)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    !x print*,'diagnose water flux'
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    !now assign back waterflux_vars
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    call simulation%RetrieveBiogeoFlux(bounds, 1, nlevsoi, waterflux_vars=waterflux_vars)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:        soilstate_vars, waterstate_vars, soil_water_retention_curve)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:        waterstate_vars=waterstate_vars,         waterflux_vars=waterflux_vars,         &
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:        waterstate_vars=waterstate_vars,         waterflux_vars=waterflux_vars,         &
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:       waterflux_vars=waterflux_vars )
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    !specific for water tracer transport
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    !  simulation%filter_soilc, waterstate_vars)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:       simulation%filter_soilc, time_vars, waterflux_vars%qflx_adv_col)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  call simulation%WriteRegressionOutput(waterflux_vars%qflx_adv_col)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:  subroutine calc_qadv(ubj, numf, filter, waterstate_vars)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    use WaterstateType  , only : waterstate_type
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:    type(waterstate_type)   , intent(inout) :: waterstate_vars
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:          waterstate_vars%h2osoi_liq_old_col(c, j) = waterstate_vars%h2osoi_liq_col(c, j)
external_models/sbetr/src/driver/main/sbetrDriverMod.F90:          waterstate_vars%h2osoi_ice_old_col(c, j) = waterstate_vars%h2osoi_ice_col(c, j)
external_models/sbetr/src/betr/betr_para/TracerParamSetWatIsoMod.F90:   ! get equilibrium isotopic fractionation of ice against liquid water
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:         h2osoi_liqvol  => biophysforc%h2osoi_liqvol_col & !soil volume possessed by liquid water
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:         h2osoi_liqvol                          => biophysforc%h2osoi_liqvol_col                      ,     & ! soil volume possessed by liquid water
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:                        !for water tracer, the aqueous phase is used as dominant species
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:               !for water isotopes
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:              !this is a (bad) reverse hack because the hydrology code does not consider water vapor transport
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:      !It is assumed that ice have same equilibrium solubility as liquid water for soluble tracers
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:   ! watermovement
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:     !for a real mechanistic modeling, tracer_flx_infl should be derived from water flux coming from snow melt, surface ponding water,
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:           !for volatile non water tracer, infiltration is calculated based dissolution of the gas in the water, this may need
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:   ! for water isotopes, this represents ice/liquid equilibrium partitioning, it could also
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:   ! for water isotope partitioning between liquid water and ice
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:   ! It is temporary not needed for water isotopes. Rather an
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:     !doing a water isotope simulation
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:    ! Finds the first unsaturated layer going up. Also allows a perched water table over ice.
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:    real(r8)                         , intent(inout) :: zwt( bounds%begc: ) ! water table depth (-) [col]
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:    real(r8) :: f_sat    ! volumetric soil water defining top of water table or where production is allowed
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:         watsat     => biophysforc%watsat_col      , & ! Input:  [real(r8) (:,:)  ] volumetric soil water at saturation (porosity)
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:         h2osoi_vol => biophysforc%h2osoi_vol_col  , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:      ! the water table.
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:         ! such layer.  This is potentially important for perched water tables in the Tundra.
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:   real(r8)           :: rho_sat      !saturated water vapor pressure
external_models/sbetr/src/betr/betr_para/TracerParamsMod.F90:   !be careful below, because snow and pure water has no definition of water matrix potential
external_models/sbetr/src/betr/betr_para/TracerParamSetMod.F90:   ! Compute the ratio of gas phase diffusivities for different volatile species in air with respect to that of water vapor
external_models/sbetr/src/betr/betr_para/TracerParamSetMod.F90:   real(r8),           intent(in) :: liqvol    !liquid water filled volume
external_models/sbetr/src/betr/betr_para/TracerParamSetMod.F90:    ! For water vapor (temperature range 0C-100C)
external_models/sbetr/src/betr/betr_para/TracerParamSetMod.F90:    ! For derivative:water vapor
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    !waterstate
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: h2osoi_liq_col(:,:)    => null()    !liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: h2osoi_liqvol_col(:,:) => null()   !volumetric liquid water content
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: h2osoi_icevol_col(:,:) => null()   !volumetric ice water content
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: h2osoi_vol_col(:,:)    => null()    !volumetric water content, total
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: rho_vap(:,:)           => null()    !concentration of bulk water vapor, assume in equilibrium with the liquid water
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: frac_h2osfc_col (:)    => null()    ! col fractional area with surface water greater than zero
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    !waterflux
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: qflx_rootsoi_col         (:,:)    => null() ! col root and soil water exchange [mm H2O/s] [+ into root]
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: qflx_h2osfc2topsoi_col   (:)      => null() ! col liquid water coming from surface standing water top soil (mm H2O/s)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: qflx_snow2topsoi_col     (:)      => null() ! col liquid water coming from residual snow to topsoil (mm H2O/s)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8),  pointer :: lbl_rsc_h2o_patch        (:) => null() ! laminar boundary layer resistance for water over dry leaf (s/m)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: watsat_col(:,:)               => null() !volumetric soil water at saturation (porosity) (nlevgrnd)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: soilpsi_col          (:,:)    => null() ! col soil water potential in each soil layer (MPa) (CN)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:    real(r8), pointer :: watfc_col            (:,:)    => null() ! col volumetric soil water at field capacity (nlevsoi)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  !waterstate
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate (this%frac_h2osfc_col (  begc:endc         ) ) ! col fractional area with surface water greater than zero
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate (this%h2osoi_liq_col(    begc:endc,lbj:ubj ) ) !liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate (this%h2osoi_liqvol_col( begc:endc,lbj:ubj ) ) !volumetric liquid water content
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate (this%h2osoi_icevol_col( begc:endc,lbj:ubj ) ) !volumetric ice water content
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate (this%h2osoi_vol_col(    begc:endc,lbj:ubj ) ) !volumetric water content, total
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate (this%rho_vap(           begc:endc,lbj:ubj ) ) !concentration of bulk water vapor, assume in equilibrium with the liquid water
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  !waterflux
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%qflx_h2osfc2topsoi_col   (begc:endc         ) ) ! col liquid water coming from surface standing water top soil (mm H2O/s)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%qflx_snow2topsoi_col     (begc:endc         ) ) ! col liquid water coming from residual snow to topsoil (mm H2O/s)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%qflx_rootsoi_col         (begc:endc,lbj:ubj ) ) ! col root and soil water exchange [mm H2O/s] [+ into root]
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%qflx_rootsoi_frac_patch       (begp:endp,lbj:ubj ) ) ! col root and soil water exchange [mm H2O/s] [+ into root]
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%lbl_rsc_h2o_patch        (      begp:endp )  ) ! laminar boundary layer resistance for water over dry leaf (s/m)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%watsat_col(begc:endc,lbj:ubj)       )      !volumetric soil water at saturation (porosity) (nlevgrnd)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%soilpsi_col          (begc:endc,lbj:ubj) ) ! col soil water potential in each soil layer (MPa) (CN)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeophysInputType.F90:  allocate(this%watfc_col            (begc:endc,lbj:ubj) ) ! col volumetric soil water at field capacity (nlevsoi)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeoFluxType.F90:    real(r8), pointer :: qflx_drain_vr_col        (:,:) => null() ! col liquid water losted as drainage (m /time step)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeoFluxType.F90:    real(r8), pointer :: qflx_totdrain_col        (:)   => null() ! col total liquid water drainage  (m/time step), updated in betr
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeoFluxType.F90:  allocate(this%qflx_drain_vr_col        (begc:endc,lbj:ubj) ) ! col liquid water losted as drainage (m /time step)
external_models/sbetr/src/betr/betr_dtype/BeTR_biogeoFluxType.F90:  allocate(this%qflx_totdrain_col        (begc:endc)) ! col total liquid water drainage  (m/time step), updated in betr
external_models/sbetr/src/betr/betr_main/TracerBalanceMod.F90:      ! However the situation is different for water isotopes, because ice is also part of the
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:    !calculate flux from merging topsoil with surface ponding water and snow
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:    !obtain water table depth
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         qflx_rootsoi              => biophysforc%qflx_rootsoi_col                   , & !real(r8) (:,:)[intent(in)], water flux between plant and soil at different layers
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         tracer_conc_grndwater_col => tracerstate_vars%tracer_conc_grndwater_col     , & !
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:               !set to 0 to ensure outgoing boundary condition is imposed, this may not be correct for water isotopes
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:               trc_bot(c,k) = tracer_conc_grndwater_col(c,adv_trc_group(k))
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:    real(r8)               , intent(in)    :: zwt(bounds%begc: )                                                               ! water table depth [m]
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:            !calculate the imposed atmospheric pressure plus hydrostatic pressure from water
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:    ! calculate tracer loss through surface water runoff
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:    real(r8) :: h2o_srun           ! total amount of water lost as surface runoff
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         tracer_conc_surfwater => tracerstate_vars%tracer_conc_surfwater_col  , & !Inout [real(r8) (:,:)] tracer concentration in surface water
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         !it is assumed the surface runoff water mixes perfectly with that of the first two soil nodes, so that a proportion goes off with surface runoff
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         !volume of water coming from surface runoff
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         !total volume of water
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:         !fraction lost through liquid water surface runoff
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:            !Do not do this for water tracer, because surface runoff comes as the residual of infiltration.
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:            tracer_conc_surfwater(c,j)  = 0._r8   !at this moment it is set to zero, however, when tracer is tracked in snow, it should be non-zero
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:            trc_srun = tracer_conc_surfwater(c,j) * h2o_srun   !total tracer mass in runoff water before mixing
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:                  scal=1._r8-fracice_top(c)      !reduce the water flush due to ice forst in layer 1
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:            tracer_conc_surfwater(c,j) = tracer_flx_surfrun(c,j)/h2o_srun       !revise the tracer concentration in runoff
external_models/sbetr/src/betr/betr_main/BetrBGCMod.F90:    ! apply tracer flux from combining residual snow and ponding water
external_models/sbetr/src/betr/betr_math/BTridiagonalMod.F90:     !Attention: Now the code is specifically written for the soil water coupling with hydraulic
external_models/sbetr/src/betr/betr_math/BTridiagonalMod.F90:     !water transport equation, but I did not make any attempt here.
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:! However, because CLM does not consider water vapor during water movement calculation, the inclusion of water vapor
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:  !only the water vapor is set with prescribed flux based boundary condition, Riley et al. (2002, GBC)
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:  !for simplicity, all gases other than water vapor are set with fixed concentration based boundary conditions
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:    tracerboundarycond_vars%tracer_gwdif_concflux_top_col(c,1:2,betrtracer_vars%id_trc_blk_h2o) = -qflx_gross_evap_soil(c)     !kg m-2-s, not diffusive water vapor transport
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:    tracerboundarycond_vars%tracer_gwdif_concflux_top_col(c,1:2,betrtracer_vars%id_trc_o18_h2o) = -qflx_gross_evap_soil(c)     !kg m-2-s, not diffusive water vapor transport
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:    tracerboundarycond_vars%tracer_gwdif_concflux_top_col(c,1:2,betrtracer_vars%id_trc_d_h2o)   = -qflx_gross_evap_soil(c)     !kg m-2-s, not diffusive water vapor transport
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:  !apply the evaporation to the water tracer, the following is a hack to avoid the
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:  !inconsistency between water vapor transport in betr and the hydrology code
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:    if (size(tracerstate_vars%tracer_conc_surfwater_col) > 0) continue
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:  !assuming equilibrium fractionation between ice/water/vapor, calculate the equilibrium solid phase concentrations
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:  !the equilibration adjusts continously as water flows or phase change occurs
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:      tracerstate_vars%tracer_conc_surfwater_col(c,:)          = 0._r8
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:      tracerstate_vars%tracer_conc_grndwater_col(c,:)          = 0._r8
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:      tracerstate_vars%tracer_conc_grndwater_col(c,trcid) = denh2o
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:      tracerstate_vars%tracer_conc_grndwater_col(c,trcid) = denh2o
external_models/sbetr/src/betr/betr_rxns/H2OIsotopeBGCReactionsType.F90:      tracerstate_vars%tracer_conc_grndwater_col(c,trcid) = denh2o
external_models/sbetr/src/betr/betr_rxns/DIOCBGCReactionsType.F90:    if (size(tracerstate_vars%tracer_conc_surfwater_col) > 0) continue
external_models/sbetr/src/betr/betr_rxns/DIOCBGCReactionsType.F90:    if (size(tracerstate_vars%tracer_conc_surfwater_col) > 0) continue
external_models/sbetr/src/betr/betr_rxns/DIOCBGCReactionsType.F90:      tracerstate_vars%tracer_conc_surfwater_col(c,:)          = 0._r8
external_models/sbetr/src/betr/betr_rxns/DIOCBGCReactionsType.F90:      tracerstate_vars%tracer_conc_grndwater_col(c,:)          = 0._r8
external_models/sbetr/src/betr/betr_rxns/MockBGCReactionsType.F90:    if (size(tracerstate_vars%tracer_conc_surfwater_col) > 0) continue
external_models/sbetr/src/betr/betr_rxns/MockBGCReactionsType.F90:    if (size(tracerstate_vars%tracer_conc_surfwater_col) > 0) continue
external_models/sbetr/src/betr/betr_rxns/MockBGCReactionsType.F90:      tracerstate_vars%tracer_conc_surfwater_col(c,:)          = 0._r8
external_models/sbetr/src/betr/betr_rxns/MockBGCReactionsType.F90:      tracerstate_vars%tracer_conc_grndwater_col(c,:)          = 0._r8
external_models/sbetr/src/betr/betr_core/TransportMod.F90:  ! subroutines to do 1d vertical multiphase transport in soil/water
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:     real(r8), pointer :: tracer_conc_surfwater_col     (:,:)      !tracer concentration in the hydraulic head
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:     real(r8), pointer :: tracer_conc_grndwater_col     (:,:)      !tracer concentration in the flux to groundwater, include lateral drainage and discharge to aquifer
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:     real(r8), pointer :: tracer_conc_mobile_col        (:,:,:)    !tracer concentration in each layer (mol/m3) (snow/ponding water + soil)
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:    allocate(this%tracer_conc_surfwater_col     (begc:endc, 1:ngwmobile_tracers)) ; this%tracer_conc_surfwater_col(:,:) = nan
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:    allocate(this%tracer_conc_grndwater_col     (begc:endc, 1:ngwmobile_tracers)) ; this%tracer_conc_grndwater_col(:,:) = nan
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:                 avgflag='A', long_name='groundwater concentration for tracer '//trim(tracernames(jj)), &
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:    if (size(this%tracer_conc_surfwater_col) > 0) continue
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:      state_1d(begc:endc,addone(idtemp1d)) = this%tracer_conc_surfwater_col(begc:endc,jj)
external_models/sbetr/src/betr/betr_core/TracerStateType.F90:      state_1d(begc:endc, addone(idtemp1d))=this%tracer_conc_grndwater_col(begc:endc, jj)
external_models/sbetr/src/betr/betr_core/TracerFluxType.F90:     real(r8), pointer :: tracer_flx_snwcp_ice_patch(:,:)  => null()        !excess snowfall tracer due to snow capping [mol /s], this is used for aerosol type and water type tracer input
external_models/sbetr/src/betr/betr_core/TracerFluxType.F90:     real(r8), pointer :: tracer_flx_h2osfc_snow_residual_col(:,:) => null() !tracer flux coming from residual standing water and residual snow
external_models/sbetr/src/betr/betr_core/BeTRTracerType.F90:   integer :: id_trc_blk_h2o, id_trc_beg_blk_h2o, id_trc_end_blk_h2o             ! tag for bulk water, including all water and its isotopologues.
external_models/sbetr/src/betr/betr_core/BeTRTracerType.F90:   logical, pointer :: is_h2o(:)        => null()                         !flag for water isotope
external_models/sbetr/src/betr/betr_core/BeTRTracerType.F90:   real(r8),pointer :: vtrans_scal(:)       => null()                     !scaling factor for plant tracer uptake through transpiration, for non-water neutral aqueous tracers
external_models/sbetr/src/betr/betr_util/betr_varcon.F90:  real(r8) :: brwat   = SHR_CONST_RWV    !gas constant for water vapor [J/(kg K)]
external_models/sbetr/src/betr/betr_util/betr_varcon.F90:  real(r8) :: bcpliq  = SHR_CONST_CPFW   !Specific heat of water [J/kg-K]
external_models/sbetr/src/betr/betr_util/betr_varcon.F90:  real(r8) :: bhvap   = SHR_CONST_LATVAP !Latent heat of evap for water [J/kg]
external_models/sbetr/src/betr/betr_util/betr_varcon.F90:  real(r8) :: bdenh2o = SHR_CONST_RHOFW  !density of liquid water [kg/m3]
external_models/sbetr/src/betr/betr_util/betr_varcon.F90:  real(r8) :: btkwat  = 0.57_r8       !thermal conductivity of water [W/m/K]
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_MWWV    = 18.016_R8       ! molecular weight water vapor
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKTRIP  = 273.16_R8       ! triple point of fresh water        ~ K
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKFRZ   = 273.15_R8       ! freezing T of fresh water          ~ K
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKFRZSW = SHR_CONST_TKFRZ - 1.8_R8 ! freezing T of salt water  ~ K
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_RHOFW   = 1.000e3_R8      ! density of fresh water     ~ kg/m^3
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_RHOSW   = 1.026e3_R8      ! density of sea water       ~ kg/m^3
external_models/sbetr/src/betr/betr_util/bshr_const_mod.F90:   real(R8),parameter :: SHR_CONST_CPWV    = 1.810e3_R8      ! specific heat of water vap ~ J/kg/K
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpForcType.F90:    real(r8) :: soilpsi            ! Input:  [real(r8) (:,:)] soilwater pontential in each soil layer [MPa]
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpForcType.F90:  this%soilpsi=0._r8             ! Input:  [real(r8) (:,:)] soilwater pontential in each soil layer [MPa]
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcReactionsCentECACnpType.F90:      tracerstate_vars%tracer_conc_surfwater_col (c,:                                      )  = 0._r8
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcReactionsCentECACnpType.F90:      tracerstate_vars%tracer_conc_grndwater_col (c,:                                      )  = 0._r8
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcReactionsCentECACnpType.F90:      this%centuryforc(c,j)%soilpsi = max(biophysforc%smp_l_col(c,j)*grav*1.e-6_r8,-15._r8)    ! Input:  [real(r8) (:,:)] soilwater pontential in each soil layer [MPa]
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpDecompType.F90:    soilpsi       => centuryeca_forc%soilpsi ,          & ! Input:  [real(r8) (:,:)] soilwater pontential in each soil layer [MPa]
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:    real(r8) :: d_con_w(3,3)    ! water diffusivity constants (spp, #)  (mult. by 10^-4)
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:    real(r8) :: surface_tension_water
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:  this%surface_tension_water = biogeo_con%surface_tension_water
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:    real(r8) :: surface_tension_water
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:    real(r8) :: ratio_diffusivity_water_gas
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:      surface_tension_water = this%surface_tension_water
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:      r_min = 2._r8 * surface_tension_water / (rho_w * grav * abs(soilpsi))
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:      r_max = 2._r8 * surface_tension_water / (rho_w * grav * 0.1_r8)
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:      ratio_diffusivity_water_gas = &
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:            ratio_diffusivity_water_gas *  air_vol)**rij_kro_delta)
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:         w_scalar   =>    decompkf_eca%w_scalar        & ! Input: [real(r8) (:,:)   ]  soil water scalar for decomp
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:   ! total water limitation function (Del Grosso et al., 2000, figure 7a)
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpNitDenType.F90:     w_scalar     =>    decompkf_eca%w_scalar   & ! Input: [real(r8) (:,:)   ]  soil water scalar for decomp
external_models/sbetr/src/Applications/soil-farm/CENT_ECACNP/BgcCentCnpSOMType.F90:   w_scalar       => decompkf_eca%w_scalar        , & ! Intput: [real(r8) (:,:)   ]  soil water scalar for decomp
external_models/sbetr/src/Applications/soil-farm/bgcfarm_util/BiogeoConType.F90:  real(r8) :: surface_tension_water
external_models/sbetr/src/Applications/soil-farm/bgcfarm_util/BiogeoConType.F90:  this%surface_tension_water = 73.e-3_r8  ! (J/m^2), Arah and Vinten, 1995
external_models/sbetr/src/stub_clm/WaterStateType.F90:  ! column water state variables structure
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: h2osoi_liq_col(:,:)    => null()   !liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: h2osoi_liq_old_col(:,:)    => null()   !liquid water (kg/m2) (old) (-nlevsno+1:nlevgrnd)
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: h2osoi_liqvol_col(:,:)  => null()  !volumetric liquid water content
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: h2osoi_icevol_col(:,:)  => null()  !volumetric ice water content
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: h2osoi_vol_col(:,:)     => null()  !volumetric water content, total
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: rho_vap_col(:,:)              => null()  !concentration of bulk water vapor, assume in equilibrium with the liquid water
external_models/sbetr/src/stub_clm/WaterStateType.F90:    real(r8), pointer :: frac_h2osfc_col        (:)  => null() ! col fractional area with surface water greater than zero
external_models/sbetr/src/stub_clm/clm_instMod.F90:  use WaterfluxType      , only : waterflux_type
external_models/sbetr/src/stub_clm/clm_instMod.F90:  use SoilWaterRetentionCurveFactoryMod, only : create_soil_water_retention_curve
external_models/sbetr/src/stub_clm/clm_instMod.F90:  use SoilWaterRetentionCurveMod , only : soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/clm_instMod.F90:  type(Waterstate_Type)       :: waterstate_vars   !column water state
external_models/sbetr/src/stub_clm/clm_instMod.F90:  type(waterflux_type)        :: waterflux_vars    ! column water flux
external_models/sbetr/src/stub_clm/clm_instMod.F90:  class(soil_water_retention_curve_type), allocatable :: soil_water_retention_curve
external_models/sbetr/src/stub_clm/clm_instMod.F90:  call waterstate_vars%Init(bounds)
external_models/sbetr/src/stub_clm/clm_instMod.F90:  call waterflux_vars%Init(bounds)
external_models/sbetr/src/stub_clm/clm_instMod.F90:  allocate(soil_water_retention_curve, &
external_models/sbetr/src/stub_clm/clm_instMod.F90:       source=create_soil_water_retention_curve())
external_models/sbetr/src/stub_clm/SoilStateType.F90:    real(r8), pointer :: watsat_col(:,:)      => null()     !volumetric soil water at saturation (porosity) (nlevgrnd)
external_models/sbetr/src/stub_clm/SoilStateType.F90:    real(r8), pointer :: soilpsi_col          (:,:) => null() ! col soil water potential in each soil layer (MPa) (CN)
external_models/sbetr/src/stub_clm/SoilStateType.F90:    real(r8), pointer :: watfc_col            (:,:)=> null() ! col volumetric soil water at field capacity (nlevsoi)
external_models/sbetr/src/stub_clm/TridiagonalMod.F90:     !Attention: Now the code is specifically written for the soil water coupling with hydraulic
external_models/sbetr/src/stub_clm/TridiagonalMod.F90:     !water transport equation, but I did not make any attempt here.
external_models/sbetr/src/stub_clm/EcophysConType.F90:     real(r8), allocatable :: smpso         (:)   ! soil water potential at full stomatal opening (mm)
external_models/sbetr/src/stub_clm/EcophysConType.F90:     real(r8), allocatable :: smpsc         (:)   ! soil water potential at full stomatal closure (mm)
external_models/sbetr/src/stub_clm/CNSharedParamsMod.F90:      real(r8) :: minpsi      ! minimum soil water potential for heterotrophic resp
external_models/sbetr/src/stub_clm/pftvarcon.F90:  real(r8), allocatable :: smpso(:)       !soil water potential at full stomatal opening (mm)
external_models/sbetr/src/stub_clm/pftvarcon.F90:  real(r8), allocatable :: smpsc(:)       !soil water potential at full stomatal closure (mm)
external_models/sbetr/src/stub_clm/CanopyStateType.F90:     real(r8),  pointer :: lbl_rsc_h2o_patch        (:)  => null() ! laminar boundary layer resistance for water over dry leaf (s/m)
external_models/sbetr/src/stub_clm/WaterFluxType.F90:  ! column water flux variables structure
external_models/sbetr/src/stub_clm/WaterFluxType.F90:  type, public :: waterflux_type
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: h2oliq_vol_tendency(:,:)   => null()      !temporal change of water during the solution of soil water movement
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: qflx_rootsoi_col         (:,:)=> null() ! col root and soil water exchange [mm H2O/s] [+ into root]
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: qflx_drain_vr_col        (:,:)=> null() ! col liquid water losted as drainage (m /time step)
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: qflx_totdrain_col        (:) => null()  ! col total liquid water drainage  (m/time step), updated in betr
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: qflx_h2osfc2topsoi_col   (:) => null()  ! col liquid water coming from surface standing water top soil (mm H2O/s)
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: qflx_snow2topsoi_col     (:) => null()  ! col liquid water coming from residual snow to topsoil (mm H2O/s)
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    real(r8), pointer :: qflx_rootsoi_patch       (:,:) => null()! pft root and soil water exchange [mm H2O/s] [+ into atmosphere]
external_models/sbetr/src/stub_clm/WaterFluxType.F90:  end type waterflux_type
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    class(waterflux_type) :: this
external_models/sbetr/src/stub_clm/WaterFluxType.F90:    class(waterflux_type) :: this
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:  ! Abstract base class for functions to compute soil water retention curve
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:  public :: soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:  type, abstract :: soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:  end type soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:       import :: soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:       class(soil_water_retention_curve_type), intent(in) :: this
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:       import :: soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:       class(soil_water_retention_curve_type), intent(in) :: this
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:       import :: soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveMod.F90:       class(soil_water_retention_curve_type), intent(in) :: this
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: rwat   = SHR_CONST_RWV    !gas constant for water vapor [J/(kg K)]
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: cpliq  = SHR_CONST_CPFW   !Specific heat of water [J/kg-K]
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: hvap   = SHR_CONST_LATVAP !Latent heat of evap for water [J/kg]
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: denh2o = SHR_CONST_RHOFW  !density of liquid water [kg/m3]
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: tkwat  = 0.57_r8       !thermal conductivity of water [W/m/K]
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: ssi    = 0.033_r8   !Irreducible water saturation of snow
external_models/sbetr/src/stub_clm/clm_varcon.F90:  real(r8) :: d_con_w(ngases,3)    ! water diffusivity constants (spp, #)  (mult. by 10^-4)
external_models/sbetr/src/stub_clm/lnd2atmType.F90:     real(r8), pointer :: h2osno_grc         (:)   => null() ! snow water (mm H2O)
external_models/sbetr/src/stub_clm/lnd2atmType.F90:     real(r8), pointer :: h2osoi_vol_grc     (:,:) => null() ! volumetric soil water (0~watsat, m3/m3, nlevgrnd) (for dust model)
external_models/sbetr/src/stub_clm/lnd2atmType.F90:     real(r8), pointer :: qflx_rofliq_qgwl_grc (:) => null() ! rof liq -- glacier, wetland and lakes water balance residual component
external_models/sbetr/src/stub_clm/QSatMod.F90:    ! For water vapor (temperature range 0C-100C)
external_models/sbetr/src/stub_clm/QSatMod.F90:    ! For derivative:water vapor
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:  ! Factory to create an instance of soil_water_retention_curve_type. This module figures
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:  public :: create_soil_water_retention_curve  ! create an object of class soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:  function create_soil_water_retention_curve() result(soil_water_retention_curve)
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:    ! Create and return an object of soil_water_retention_curve_type. The particular type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:    use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:    use SoilWaterRetentionCurveClappHornberg1978Mod, only : soil_water_retention_curve_clapp_hornberg_1978_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:    class(soil_water_retention_curve_type), allocatable :: soil_water_retention_curve  ! function result
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:    character(len=*), parameter :: subname = 'create_soil_water_retention_curve'
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:       allocate(soil_water_retention_curve, &
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:            source=soil_water_retention_curve_clapp_hornberg_1978_type())
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveFactoryMod.F90:  end function create_soil_water_retention_curve
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:! transported with BeTR. The surface here refers to water and soil, not including canopy
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:      num_tracers, waterstate_vars, soilstate_vars, grnd_res)
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:  ! water ponded soil, I finally decided to lump the snow layer togeter and calculate
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:  real(r8)                  , intent(in) :: pondwdiff(bounds%begc:bounds%endc,1:num_tracers) ! tracer diffusivity in ponded water
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:  type(Waterstate_Type)     , intent(in) :: waterstate_vars        ! water state variables
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:  real(r8) :: ponddiff                         !diffusivity in ponded water, (s/m2)
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:   h2osoi_vol    =>   waterstate_vars%h2osoi_vol_col              , & !Input [real(r8)(:,:)] volumetric soil water content
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:   h2osoi_liq    =>   waterstate_vars%h2osoi_liq_col              , & !Input [real(r8)(:,:)] volumetric liquid water content
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:   h2osoi_ice    =>   waterstate_vars%h2osoi_ice_col              , & !Input [real(r8)(:,:)] volumetric ice content
external_models/sbetr/src/stub_clm/SurfaceResistanceMod.F90:   watsat        =>   soilstate_vars%watsat_col                   , & !Input [real(r8)(:,:)] saturated water content
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  ! Implementation of soil_water_retention_curve_type using the Clapp-Hornberg 1978
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  public :: soil_water_retention_curve_clapp_hornberg_1978_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  type, extends(soil_water_retention_curve_type) :: &
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:       soil_water_retention_curve_clapp_hornberg_1978_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  end type soil_water_retention_curve_clapp_hornberg_1978_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  interface soil_water_retention_curve_clapp_hornberg_1978_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:     ! initialize a new soil_water_retention_curve_clapp_hornberg_1978_type object
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  end interface soil_water_retention_curve_clapp_hornberg_1978_type
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:  type(soil_water_retention_curve_clapp_hornberg_1978_type) function constructor()
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    ! Creates an object of type soil_water_retention_curve_clapp_hornberg_1978_type.
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    class(soil_water_retention_curve_clapp_hornberg_1978_type), intent(in) :: this
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    class(soil_water_retention_curve_clapp_hornberg_1978_type), intent(in) :: this
external_models/sbetr/src/stub_clm/SoilWaterRetentionCurveClappHornberg1978Mod.F90:    class(soil_water_retention_curve_clapp_hornberg_1978_type), intent(in) :: this
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_MWWV    = 18.016_R8       ! molecular weight water vapor
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKTRIP  = 273.16_R8       ! triple point of fresh water        ~ K
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKFRZ   = 273.15_R8       ! freezing T of fresh water          ~ K 
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKFRZSW = SHR_CONST_TKFRZ - 1.8_R8 ! freezing T of salt water  ~ K
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_RHOFW   = 1.000e3_R8      ! density of fresh water     ~ kg/m^3
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_RHOSW   = 1.026e3_R8      ! density of sea water       ~ kg/m^3
external_models/sbetr/src/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_CPWV    = 1.810e3_R8      ! specific heat of water vap ~ J/kg/K
external_models/sbetr/3rd-party/hdf5/hl/tools/gif2h5/hdfgifwr.c: *           David Rowley (mgardi@watdcsu.waterloo.edu)
external_models/sbetr/3rd-party/hdf5/src/H5FDcore.c: * determine the amount of hdf5 address space in use and the high-water mark
external_models/sbetr/3rd-party/hdf5/src/H5FDdirect.c: * determine the amount of hdf5 address space in use and the high-water mark
external_models/sbetr/3rd-party/hdf5/src/H5FDsec2.c: * determine the amount of hdf5 address space in use and the high-water mark
external_models/sbetr/3rd-party/hdf5/src/H5FDlog.c: * determine the amount of hdf5 address space in use and the high-water mark
external_models/sbetr/3rd-party/hdf5/src/H5C.c: *	 - Also in H5C_make_space_in_cache(), use high and low water marks
external_models/sbetr/3rd-party/hdf5/src/H5FDstdio.c: * determine the amount of hdf5 address space in use and the high-water mark
external_models/sbetr/3rd-party/hdf5/release_docs/HISTORY-1_0-1_8_0_rc3.txt:*   Cray X1 water 3.0.35          Cray Standard C Version 5.4.0.7.4
external_models/sbetr/3rd-party/hdf5/release_docs/HISTORY-1_0-1_8_0_rc3.txt:    Cray X1 water 3.0.35          Cray Standard C Version 5.4.0.7.4
Binary file external_models/sbetr/3rd-party/hdf5/tools/h5diff/testfiles/tmptest.he5 matches
Binary file external_models/sbetr/3rd-party/hdf5/tools/h5diff/testfiles/tmptest2.he5 matches
external_models/sbetr/3rd-party/zlib/ChangeLog:- Assure that high-water mark initialization is always applied in deflate
external_models/sbetr/3rd-party/zlib/deflate.c:    s->high_water = 0;      /* nothing written to s->window yet */
external_models/sbetr/3rd-party/zlib/deflate.c:     * the longest match routines.  Update the high water mark for the next
external_models/sbetr/3rd-party/zlib/deflate.c:    if (s->high_water < s->window_size) {
external_models/sbetr/3rd-party/zlib/deflate.c:        if (s->high_water < curr) {
external_models/sbetr/3rd-party/zlib/deflate.c:            /* Previous high water mark below current data -- zero WIN_INIT
external_models/sbetr/3rd-party/zlib/deflate.c:            s->high_water = curr + init;
external_models/sbetr/3rd-party/zlib/deflate.c:        else if (s->high_water < (ulg)curr + WIN_INIT) {
external_models/sbetr/3rd-party/zlib/deflate.c:            /* High water mark at or above current data, but below current data
external_models/sbetr/3rd-party/zlib/deflate.c:            init = (ulg)curr + WIN_INIT - s->high_water;
external_models/sbetr/3rd-party/zlib/deflate.c:            if (init > s->window_size - s->high_water)
external_models/sbetr/3rd-party/zlib/deflate.c:                init = s->window_size - s->high_water;
external_models/sbetr/3rd-party/zlib/deflate.c:            zmemzero(s->window + s->high_water, (unsigned)init);
external_models/sbetr/3rd-party/zlib/deflate.c:            s->high_water += init;
external_models/sbetr/3rd-party/zlib/deflate.h:    ulg high_water;
external_models/sbetr/3rd-party/zlib/deflate.h:    /* High water mark offset in window for initialized bytes -- bytes above
external_models/sbetr/3rd-party/zlib/deflate.h:     * updated to the new high water mark.
external_models/sbetr/3rd-party/zlib/test/infcover.c:   and high water mark of total bytes requested, optionally set a limit on the
external_models/sbetr/3rd-party/zlib/test/infcover.c:   mem_high(&strm, "msg")   prints to stderr "msg" and the high water mark
external_models/sbetr/3rd-party/zlib/test/infcover.c:    size_t total, highwater;    /* total allocations, and largest total */
external_models/sbetr/3rd-party/zlib/test/infcover.c:    if (zone->total > zone->highwater)
external_models/sbetr/3rd-party/zlib/test/infcover.c:        zone->highwater = zone->total;
external_models/sbetr/3rd-party/zlib/test/infcover.c:    zone->highwater = 0;
external_models/sbetr/3rd-party/zlib/test/infcover.c:/* show the high water allocation in bytes */
external_models/sbetr/3rd-party/zlib/test/infcover.c:    fprintf(stderr, "%s: %lu high water mark\n", prefix, zone->highwater);
external_models/sbetr/3rd-party/zlib/test/infcover.c:    /* show high water mark */
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, ICWMR_id, "long_name", 38, "Prognostic in-cloud water mixing ratio")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, PRECSC_id, "long_name", 39, "Convective snow rate (water equivalent)")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, PRECSL_id, "long_name", 49, "Large-scale (stable) snow rate (water equivalent)")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, QFLX_id, "long_name", 18, "Surface water flux")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, QT_id, "long_name", 24, "Total water mixing ratio")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, QTFLX_id, "long_name", 16, "Total water flux")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, SL_id, "long_name", 26, "Liquid water static energy")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, TGCLDCWP_id, "long_name", 48, "Total grid-box cloud water path (liquid and ice)")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, TGCLDIWP_id, "long_name", 35, "Total grid-box cloud ice water path")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, TGCLDLWP_id, "long_name", 38, "Total grid-box cloud liquid water path")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, TMQ_id, "long_name", 50, "Total (vertically integrated) precipitatable water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, VQ_id, "long_name", 26, "Meridional water transport")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, bc_c1_id, "long_name", 20, "bc_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, dst_c1_id, "long_name", 21, "dst_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, dst_c3_id, "long_name", 21, "dst_c3 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, ncl_c1_id, "long_name", 21, "ncl_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, ncl_c2_id, "long_name", 21, "ncl_c2 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, ncl_c3_id, "long_name", 21, "ncl_c3 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, num_c1_id, "long_name", 21, "num_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, num_c2_id, "long_name", 21, "num_c2 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, num_c3_id, "long_name", 21, "num_c3 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, pom_c1_id, "long_name", 21, "pom_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, so4_c1_id, "long_name", 21, "so4_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, so4_c2_id, "long_name", 21, "so4_c2 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, so4_c3_id, "long_name", 21, "so4_c3 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, soa_c1_id, "long_name", 21, "soa_c1 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, soa_c2_id, "long_name", 21, "soa_c2 in cloud water")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, wat_a1_id, "long_name", 36, "aerosol water, interstitial, mode 01")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, wat_a2_id, "long_name", 36, "aerosol water, interstitial, mode 02")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_camrun.c:   if (nc_put_att_text(ncid, wat_a3_id, "long_name", 36, "aerosol water, interstitial, mode 03")) ERR;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_ar4_4d.c:		thetao:long_name = "sea_water_potential_temperature" ;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_ar4_4d.c:		thetao:standard_name = "sea_water_potential_temperature" ;
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_ar4_4d.c:			" r[h2o] (density of water      ): 1000 kg m-3\n",
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_xplatform2.c:#define DIM3_NAME "DIMENSION->The city of London shall enjoy all its ancient liberties and free customs, both by land and by water."
external_models/sbetr/3rd-party/netcdf-c/nc_test4/tst_coords.c:	 static const char comment_att[1105] = {"This simulation was initiated from year 460 of \n CCSM3 model run b30.020.ES01 and executed on \n hardware Earth Simulator Center, JAMSTEC. The input external forcings are\nozone forcing    : mozart.o3.128x64_L18_1870-2000_c040515.nc\naerosol optics   : AerosolOptics_c040105.nc\naerosol MMR      : AerosolMass_V_128x256_clim_c031022.nc\ncarbon scaling   : carbonscaling_1870-2000_c040225.nc\nsolar forcing    : scon_lean_1870-2100_c040123.nc\nGHGs             : ghg_1870_2100_c040122.nc\nGHG loss rates   : noaamisc.r8.nc\nvolcanic forcing : VolcanicMass_1870-1999_64x1_L18_c040123.nc\nDMS emissions    : DMS_emissions_128x256_clim_c040122.nc\noxidants         : oxid_128x256_L26_clim_c040112.nc\nSOx emissions    : SOx_emissions_128x256_L2_1850-2000_c040321.nc\n Physical constants used for derived data:\n Lv (latent heat of evaporation): 2.501e6 J kg-1\n Lf (latent heat of fusion     ): 3.337e5 J kg-1\n r[h2o] (density of water      ): 1000 kg m-3\n g2kg   (grams to kilograms    ): 1000 g kg-1\n \n Integrations were performed by NCAR and CRIEPI with support\n and facilities provided by NSF, DOE, MEXT and ESC/JAMSTEC."} ;
Binary file external_models/sbetr/3rd-party/netcdf-c/nc_test4/chunked.hdf4 matches
external_models/sbetr/3rd-party/netcdf-c/docs/software.md:[source](http://waterlily.siamics.net/~ivan/src/netcdf-tools-0.1-rc1.tar.gz)
external_models/sbetr/3rd-party/netcdf-c/docs/software.md:of meteorological research, air quality work, and groundwater
external_models/sbetr/3rd-party/netcdf-c/docs/software.md:contour mapping, watershed and 3D surface mapping, gridding,
external_models/sbetr/3rd-party/netcdf-c/docs/old/netcdf.texi:33 feet water
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:	float Cloud_water(record) ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Cloud_water:units = "kg/kg" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Cloud_water:long_name = "Cloud_water @ isobaric" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:	float Plant_canopy_surface_water(record) ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Plant_canopy_surface_water:units = "kg/m^2" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Plant_canopy_surface_water:long_name = "Plant_canopy_surface_water @ surface" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:	float Precipitable_water(record) ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Precipitable_water:units = "kg/m^2" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Precipitable_water:long_name = "Precipitable_water @ entire_atmosphere" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:	float Rain_water_mixing_ratio(record) ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Rain_water_mixing_ratio:units = "kg/kg" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Rain_water_mixing_ratio:long_name = "Rain_water_mixing_ratio @ isobaric" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:	float Total_column_cloud_water(record) ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Total_column_cloud_water:units = "kg/m/m" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp:		Total_column_cloud_water:long_name = "Total_column_cloud_water @ entire_atmosphere" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp: Cloud_water = 0 ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp: Plant_canopy_surface_water = NaNf ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp: Precipitable_water = NaNf ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp: Rain_water_mixing_ratio = 0 ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/expecttds3/tst-upc-nmm-point.nc.dmp: Total_column_cloud_water = NaNf ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/special3/500m.hdr:		u:standard_name = "surface_eastward_sea_water_velocity" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/special3/500m.hdr:		v:standard_name = "surface_northward_sea_water_velocity" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/special3/dods.hdr:		pme:long_name = "net freshwater flux" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/special3/500m.dmp:		u:standard_name = "surface_eastward_sea_water_velocity" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/special3/500m.dmp:		v:standard_name = "surface_northward_sea_water_velocity" ;
external_models/sbetr/3rd-party/netcdf-c/ncdap_test/special3/dods.dmp:		pme:long_name = "net freshwater flux" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		ICWMR:long_name = "Prognostic in-cloud water mixing ratio" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		PRECSC:long_name = "Convective snow rate (water equivalent)" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		PRECSL:long_name = "Large-scale (stable) snow rate (water equivalent)" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		QFLX:long_name = "Surface water flux" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		QT:long_name = "Total water mixing ratio" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		QTFLX:long_name = "Total water flux" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		SL:long_name = "Liquid water static energy" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		TGCLDCWP:long_name = "Total grid-box cloud water path (liquid and ice)" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		TGCLDIWP:long_name = "Total grid-box cloud ice water path" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		TGCLDLWP:long_name = "Total grid-box cloud liquid water path" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		TMQ:long_name = "Total (vertically integrated) precipitatable water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		VQ:long_name = "Meridional water transport" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		bc_c1:long_name = "bc_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		dst_c1:long_name = "dst_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		dst_c3:long_name = "dst_c3 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		ncl_c1:long_name = "ncl_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		ncl_c2:long_name = "ncl_c2 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		ncl_c3:long_name = "ncl_c3 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		num_c1:long_name = "num_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		num_c2:long_name = "num_c2 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		num_c3:long_name = "num_c3 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		pom_c1:long_name = "pom_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		so4_c1:long_name = "so4_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		so4_c2:long_name = "so4_c2 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		so4_c3:long_name = "so4_c3 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		soa_c1:long_name = "soa_c1 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		soa_c2:long_name = "soa_c2 in cloud water" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		wat_a1:long_name = "aerosol water, interstitial, mode 01" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		wat_a2:long_name = "aerosol water, interstitial, mode 02" ;
external_models/sbetr/3rd-party/netcdf-c/ncgen/ref_camrun.cdl:		wat_a3:long_name = "aerosol water, interstitial, mode 03" ;
external_models/sbetr/regression-tests/input-data/uniform_steadystate_grid.cdl:		BSW:long_name = "slope of soil water retention curve" ;
external_models/sbetr/regression-tests/input-data/uniform_steadystate_grid.cdl:		WATSAT:long_name = "saturated soil water content (porosity)" ;
external_models/sbetr/regression-tests/input-data/clm_exp_grid.cdl:		BSW:long_name = "slope of soil water retention curve" ;
external_models/sbetr/regression-tests/input-data/clm_exp_grid.cdl:		WATSAT:long_name = "saturated soil water content (porosity)" ;
external_models/sbetr/regression-tests/input-data/uniform_steadystate_forcing.cdl:		H2OSOI:long_name = "volumetric soil water (vegetated landunits only)" ;
external_models/sbetr/regression-tests/input-data/uniform_steadystate_forcing.cdl:		QFLX_ROOTSOI:long_name = "depth dependent root water uptake" ;
external_models/mpp/src/driver/standalone/vsfm/vsfm_spac_on_hillslope.F90:  PetscReal , parameter :: init_wtd = 3.d0             ! Initial water table depth below surface [m]
external_models/mpp/src/driver/alm/MPPVSFMALM_Initialize.F90:    clm_watsat       => soilstate_vars%watsat_col       ! volumetric soil water at saturation (porosity)
external_models/mpp/src/driver/alm/MPPVSFMALM_Initialize.F90:    clm_zwt          => soilhydrology_vars%zwt_col      ! water table depth
external_models/mpp/src/driver/alm/MPPVSFMALM_Initialize.F90:    clm_zwt          => soilhydrology_vars%zwt_col      ! water table depth
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:    call thermal_mpp%SetName    ('Snow + Standing water + Soil thermal model using temperature')
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:    ! Save geometric attributes for standing surface water mesh
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:    ! Set mesh for standing water
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:    call thermal_mpp%MeshSetName(imesh, 'CLM standing water thermal snow mesh')
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:    ! Set mesh for standing water
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:         'Thermal equation using temprature formulation in standing surface water (KSP formulation)', &
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Initialize.F90:         'Heat_flux_BC_at_top_of_standing_surface_water', 'W/m^2', COND_HEAT_FLUX, &
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:       waterstate_vars,  temperature_vars, tvector)
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:    use WaterstateType            , only : waterstate_type
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:    real(r8)               , intent(in)  :: hs_h2osfc(bounds%begc:bounds%endc)                 ! heat flux on standing water [W/m2]
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:    type(waterstate_type)  , intent(in)  :: waterstate_vars
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:    real(r8) , pointer                   :: snow_water_1d          (:)
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         frac_sno_eff            => waterstate_vars%frac_sno_eff_col        , & ! Input:  [real(r8) (:)   ]  eff. fraction of ground covered by snow (0 to 1)
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         h2osno                  => waterstate_vars%h2osno_col              , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                     
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         h2osfc                  => waterstate_vars%h2osfc_col              , & ! Input:  [real(r8) (:)   ]  surface water (mm)                      
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         frac_h2osfc             => waterstate_vars%frac_h2osfc_col         , & ! Input:  [real(r8) (:)   ]  fraction of ground covered by surface water (0 to 1)
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         h2osoi_liq              => waterstate_vars%h2osoi_liq_col          , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                  
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         h2osoi_ice              => waterstate_vars%h2osoi_ice_col          , & ! Input:  [real(r8) (:,:) ]  ice lens (kg/m2)                      
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:         t_h2osfc                => temperature_vars%t_h2osfc_col           , & ! Output: [real(r8) (:)   ]  surface water temperature               
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      allocate(snow_water_1d          ((bounds%endc-bounds%begc+1)*(nlevgrnd+nlevsno+1 )))
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      liq_areal_den_1d(:)       = 0._r8     ! waterstate_vars%h2osoi_liq_col
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      ice_areal_den_1d(:)       = 0._r8     ! waterstate_vars%h2osoi_ice_col
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      frac_soil_1d(:)           = 1._r8     ! 1.0 - waterstate_vars%frac_sno_eff_col - waterstate_vars%frac_h2osfc_col
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      snow_water_1d(:)          = 0._r8
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:                     snow_water_1d(idx)                         = h2osno(c)
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      ! Set snow water
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:           VAR_SNOW_WATER, soe_auxvar_id, snow_water_1d)
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      ! 2) top standing water layer
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      ! 2) top standing water layer
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      ! Set fraction of soil not covered by snow and standing water
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      ! Put temperature back in CLM structure for standing water
external_models/mpp/src/driver/alm/MPPThermalTBasedALM_Driver.F90:      deallocate (snow_water_1d          )
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:       waterflux_vars, waterstate_vars, temperature_vars)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    use WaterFluxType             , only : waterflux_type
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    use WaterStateType            , only : waterstate_type
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    type(waterflux_type)    , intent(inout) :: waterflux_vars
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    type(waterstate_type)   , intent(inout) :: waterstate_vars
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    real(r8)             :: dzsum                                                            ! summation of dzmm of layers below water table (mm)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    real(r8)             :: vsfm_mass_prev_col          (bounds%begc:bounds%endc,1:nlevgrnd) ! Mass of water before a VSFM solve
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    real(r8)             :: vsfm_dmass_col              (bounds%begc:bounds%endc)            ! Change in mass of water after a VSFM solve
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: mass_beg                                                         ! Sum of mass of water for all active soil columns before VSFM is called
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: mass_end                                                         ! Sum of mass of water for all active soil columns after VSFM is called
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux_et                                               ! Sum of mass ET mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux_infl                                             ! Sum of mass infiltration mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux_dew                                              ! Sum of mass dew mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux_drain                                            ! Sum of mass drainage mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux_snowlyr                                          ! Sum of mass snow layer disappearance mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux_sub                                              ! Sum of mass sublimation mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:    PetscReal            :: total_mass_flux                                                  ! Sum of mass ALL mass flux of water for all active soil columns
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         zwt                       =>    soilhydrology_vars%zwt_col                 , & ! Input:  [real(r8) (:)   ]  water table depth (m)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         h2osoi_ice                =>    waterstate_vars%h2osoi_ice_col             , & ! Input:  [real(r8) (:,:) ]  ice water (kg/m2)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         h2osoi_liq                =>    waterstate_vars%h2osoi_liq_col             , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         h2osoi_vol                =>    waterstate_vars%h2osoi_vol_col             , & ! Input:  [real(r8) (:,:) ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         frac_h2osfc               =>    waterstate_vars%frac_h2osfc_col            , & ! Input:  [real(r8) (:)   ]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         vsfm_fliq_col_1d          =>    waterstate_vars%vsfm_fliq_col_1d           , & ! Output: [real(r8) (:)   ]  1D fraction of liquid saturation for VSFM [-]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         vsfm_sat_col_1d           =>    waterstate_vars%vsfm_sat_col_1d            , & ! Output: [real(r8) (:)   ]  1D liquid saturation from VSFM [-]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         vsfm_mass_col_1d          =>    waterstate_vars%vsfm_mass_col_1d           , & ! Output: [real(r8) (:)   ]  1D liquid mass per unit area from VSFM [kg H2O/m^2]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         vsfm_smpl_col_1d          =>    waterstate_vars%vsfm_smpl_col_1d           , & ! Output: [real(r8) (:)   ]  1D soil matrix potential liquid from VSFM [m]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         vsfm_soilp_col_1d         =>    waterstate_vars%vsfm_soilp_col_1d          , & ! Output: [real(r8) (:)   ]  1D soil water pressure from VSFM [Pa]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         soilp_col                 =>    waterstate_vars%soilp_col                  , & ! Output: [real(r8) (:,:) ]  soil water pressure (Pa)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_deficit              =>    waterflux_vars%qflx_deficit_col            , & ! Input:  [real(r8) (:)   ]  water deficit to keep non-negative liquid water content
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_infl                 =>    waterflux_vars%qflx_infl_col               , & ! Input:  [real(r8) (:)   ]  infiltration (mm H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_tran_veg_col         =>    waterflux_vars%qflx_tran_veg_col           , & ! Input:  [real(r8) (:)   ]  vegetation transpiration (mm H2O/s) (+ = to atm)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_tran_veg_pft         =>    waterflux_vars%qflx_tran_veg_patch         , & ! Input:  [real(r8) (:)   ]  vegetation transpiration (mm H2O/s) (+ = to atm)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_dew_snow             =>    waterflux_vars%qflx_dew_snow_col           , & ! Input:  [real(r8) (:)   ]  surface dew added to snow pack (mm H2O /s) [+]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_dew_grnd             =>    waterflux_vars%qflx_dew_grnd_col           , & ! Input:  [real(r8) (:)   ]  ground surface dew formation (mm H2O /s) [+]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_sub_snow             =>    waterflux_vars%qflx_sub_snow_col           , & ! Input:  [real(r8) (:)   ]  ground surface dew formation (mm H2O /s) [+]
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_drain                =>    waterflux_vars%qflx_drain_col              , & ! Input:  [real(r8) (:)   ]  sub-surface runoff (mm H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_lateral              =>    waterflux_vars%qflx_lateral_col            , & ! Input:  [real(r8) (:)   ]  lateral flux of water to neighboring column (mm H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         qflx_surf                 =>    waterflux_vars%qflx_surf_col               , & ! Input:  [real(r8) (:)   ]  surface runoff (mm H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_infl_col_1d          =>    waterflux_vars%mflx_infl_col_1d            , & ! Input:  [real(r8) (:)   ]  infiltration source in top soil control volume (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_dew_col_1d           =>    waterflux_vars%mflx_dew_col_1d             , & ! Input:  [real(r8) (:)   ]  (liquid+snow) dew source in top soil control volume (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_et_col_1d            =>    waterflux_vars%mflx_et_col_1d              , & ! Input:  [real(r8) (:)   ]  evapotranspiration sink from all soil coontrol volumes (kg H2O /s) (+ = to atm)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_snowlyr_col_1d       =>    waterflux_vars%mflx_snowlyr_col_1d         , & ! Input:  [real(r8) (:)   ]  mass flux to top soil layer due to disappearance of snow (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_sub_snow_col_1d      =>    waterflux_vars%mflx_sub_snow_col_1d        , & ! Output: [real(r8) (:)   ]  mass flux from top soil layer due to sublimation of snow (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_snowlyr_col          =>    waterflux_vars%mflx_snowlyr_col            , & ! Input:  [real(r8) (:)   ]  mass flux to top soil layer due to disappearance of snow (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_drain_col_1d         =>    waterflux_vars%mflx_drain_col_1d           , & ! Input:  [real(r8) (:)   ]  drainage from groundwater and perched water table (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_drain_perched_col_1d =>    waterflux_vars%mflx_drain_perched_col_1d   , & ! Input:  [real(r8) (:)   ]  drainage from perched water table (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:         mflx_neg_snow_col_1d      =>    waterflux_vars%mflx_neg_snow_col_1d        , & ! Input:  [real(r8) (:)   ]  mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:            ! Find soil layer just above water table
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:            ! Now ensure the soil layer index corresponding to the water table
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:               ! if the amount of water being drained from a given layer
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:               ! exceeds the allowable water, limit the drainage
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:               ! Find maximum water balance error over the column
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:            write(iulog,*)'In soilwater_vsfm: VSFM failed to converge after multiple attempts.'
external_models/mpp/src/driver/alm/MPPVSFMALM_Driver.F90:      ! compute the water deficit and reset negative liquid water content
external_models/mpp/src/mpp/vsfm/SaturationFunction.F90:     PetscReal :: fetch2_phi88, fetch2_phi50      ! Xylem shape parameters for water potential [Pa] at 88% and 50% saturation. Negative values.
external_models/mpp/src/mpp/vsfm/SaturationFunction.F90:     PetscReal :: chuang_phi0, chuang_p           ! Empirical coefficients for xylem water content. chuang_phi0 is positive number
external_models/mpp/src/mpp/util/mpp_varcon.F90:  PetscReal :: cpliq       = 4.188d3     ! Specific heat of water [J/kg-K]
external_models/mpp/src/mpp/util/mpp_varcon.F90:  PetscReal :: denh2o      = 1.000d3     ! density of liquid water [kg/m3]
external_models/mpp/src/mpp/util/mpp_varcon.F90:  PetscReal :: tkwat       = 0.57d0      ! thermal conductivity of water [W/m/K]
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! - density of water, and
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Return constant density of water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Recommended table for the density of water between 0 °C
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Density of water as function of t_K
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Compressibility of water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Density of water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !  This subroutine calculates water and steam-gas mixture properties.
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !  The water and steam properties are valid in the range of:
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !  For saturated fluid, it will also calculate water saturation
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !---calculate derivatives for water density
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !  This subroutine calculates water and steam-gas mixture properties.
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !  The water and steam properties are valid in the range of:
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !  For saturated fluid, it will also calculate water saturation
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    !---compute enthalpy internal energy and derivatives for water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Return viscosity of water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Return internal energy of water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Return internal energy of water
external_models/mpp/src/mpp/util/EOSWaterMod.F90:    ! Return internal energy of water
external_models/mpp/src/mpp/thermal/GoveqnThermalKSPTemperatureSoilType.F90:       this%aux_vars_in(iauxvar)%snow_water     = soe_avars(iauxvar+offset)%snow_water
external_models/mpp/src/mpp/thermal/SystemOfEquationsThermalAuxMod.F90:          auxvars(iauxvar + auxvar_offset)%snow_water = data_1d(iauxvar)
external_models/mpp/src/mpp/thermal/ThermalKSPTemperatureSoilAuxType.F90:     PetscReal :: snow_water            ! snow water (mm H2O)
external_models/mpp/src/mpp/thermal/ThermalKSPTemperatureSoilAuxType.F90:    this%snow_water            = 0.d0
external_models/mpp/src/mpp/thermal/ThermalKSPTemperatureSoilAuxType.F90:             this%heat_cap_pva = this%heat_cap_pva + this%snow_water*cpice
external_models/mpp/src/mpp/thermal/ThermalKSPTemperatureSoilAuxType.F90:             this%heat_cap_pva = this%heat_cap_pva + this%snow_water*cpice
external_models/mpp/src/mpp/thermal/ThermalKSPTemperatureSoilAuxType.F90:             this%heat_cap_pva = this%heat_cap_pva + this%snow_water*cpice
external_models/mpp/src/mpp/thermal/SystemOfEquationsThermalAuxType.F90:     PetscReal :: snow_water      ! snow water (mm H2O)
external_models/mpp/src/mpp/thermal/SystemOfEquationsThermalAuxType.F90:    this%snow_water      = 0.d0
external_models/mpp/src/mpp/thermal/GoveqnThermalKSPTemperatureSSWType.F90:    this%name         = "Standing surface water thermal equation based on temperature"
external_models/mpp/src/mpp/thermal/GoveqnThermalKSPTemperatureSSWType.F90:       write(iulog,*) 'ERROR: No internal connections allowed in standing surface water'
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:  use WaterFluxType                         , only : waterflux_type
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:        num_filter, filter, waterflux_vars)
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:    ! Pack data from ALM waterflux_vars for EM
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:    type(waterflux_type)   , intent(in) :: waterflux_vars
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:        num_filter, filter, waterflux_vars)
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:    ! Unpack data for ALM waterflux_vars from EM
external_models/emi/src/emi_data_exchange/EMI_WaterFluxType_ExchangeMod.F90:    type(waterflux_type)   , intent(in) :: waterflux_vars
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:  use WaterStateType                        , only : waterstate_type
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:        num_filter, filter, waterstate_vars)
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:    ! Pack data from ALM waterstate_vars for EM
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:    type(waterstate_type)  , intent(in) :: waterstate_vars
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:         rho_vap       => waterstate_vars%rho_vap_col       , &
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:         rhvap_soi     => waterstate_vars%rhvap_soi_col     , &
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:        num_filter, filter, waterstate_vars)
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:    ! Unpack data for ALM waterstate_vars from EM
external_models/emi/src/emi_data_exchange/EMI_WaterStateType_ExchangeMod.F90:    type(waterstate_type)  , intent(in) :: waterstate_vars
external_models/emi/src/emi_data_definition/EMI_CanopyStateType_DataMod.F90:       name_val       =  'Laminar boundary layer resistance for water over dry leaf'
external_models/emi/src/emi_data_definition/EMI_CanopyStateType_DataMod.F90:       long_name_val  =  'Laminar boundary layer resistance for water over dry leaf: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_TemperatureType_DataMod.F90:       name_val       =  'Standing water temperature'
external_models/emi/src/emi_data_definition/EMI_TemperatureType_DataMod.F90:       long_name_val  =  'Standing water temperature: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_TemperatureType_DataMod.F90:       name_val       =  'Standing water temperature'
external_models/emi/src/emi_data_definition/EMI_TemperatureType_DataMod.F90:       long_name_val  =  'Standing water temperature: EM to ELM'
external_models/emi/src/emi_data_definition/EMI_WaterFluxType_DataMod.F90:       name_val       =  'Rate of surface standing water entering top soil'
external_models/emi/src/emi_data_definition/EMI_WaterFluxType_DataMod.F90:       long_name_val  =  'Rate of surface standing water entering top soil: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterFluxType_DataMod.F90:       name_val       =  'Root and soil water exchange'
external_models/emi/src/emi_data_definition/EMI_WaterFluxType_DataMod.F90:       long_name_val  =  'Root and soil water exchange: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterFluxType_DataMod.F90:       name_val       =  'liquid water losted as drainage'
external_models/emi/src/emi_data_definition/EMI_WaterFluxType_DataMod.F90:       long_name_val  =  'liquid water losted as drainage: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'soil liq water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'soil liq water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'soil ice water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'soil ice water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Fraction of standing water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Fraction of standing water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Vol sol liq water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Vol sol liq water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Vol. soil liq water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Vol. soil liq water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Soil liquid water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Soil liquid water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Soil ice water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Soil ice water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Soil liquid water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Soil liquid water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Soil ice water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Soil ice water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Snow water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Snow water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Standing surface water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Standing surface water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Soil liquid water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Soil liquid water: EM to ELM'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       name_val       =  'Soil ice water'
external_models/emi/src/emi_data_definition/EMI_WaterStateType_DataMod.F90:       long_name_val  =  'Soil ice water: EM to ELM'
external_models/emi/src/emi_data_definition/EMI_EnergyFluxType_DataMod.F90:       name_val       =  'Heat flux on water'
external_models/emi/src/emi_data_definition/EMI_EnergyFluxType_DataMod.F90:       long_name_val  =  'Heat flux on water: ELM to EM'
external_models/emi/src/emi_data_definition/EMI_SoilStateType_DataMod.F90:       name_val       =  'Volumetric soil water at field capacity'
external_models/emi/src/emi_data_definition/EMI_SoilStateType_DataMod.F90:       long_name_val  =  'Volumetric soil water at field capacity: ELM to EM'
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    use clm_instMod           , only : waterflux_vars
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    use clm_instMod           , only : waterstate_vars
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    use clm_instMod           , only : waterflux_inst
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    use clm_instMod           , only : waterstate_inst
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_filter_col, filter_col, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_filter_col, filter_col, waterflux_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_e2l_filter_col, e2l_filter_col, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_e2l_filter_col, e2l_filter_col, waterflux_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_filter_col, filter_col, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:       soilhydrology_vars, soilstate_vars, waterflux_vars,    &
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:       waterstate_vars, temperature_vars,  atm2lnd_vars,      &
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    use WaterFluxType          , only : waterflux_type
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    use WaterStateType         , only : waterstate_type
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    type(waterflux_type)     , optional , intent(inout) :: waterflux_vars
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    type(waterstate_type)    , optional , intent(inout) :: waterstate_vars
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    if ( present(waterstate_vars)) then
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_hydrologyc, filter_hydrologyc, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_nolakec_and_nourbanc, filter_nolakec_and_nourbanc, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:               num_filter_col, filter_col, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    if ( present(waterflux_vars) .and. &
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:            num_hydrologyc, filter_hydrologyc, waterflux_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    if ( present(waterstate_vars) .and. &
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:            num_hydrologyc, filter_hydrologyc, waterstate_vars)
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:    if ( present(waterflux_vars) .and. &
external_models/emi/src/emi/ExternalModelInterfaceMod.F90:            num_hydrologyc, filter_hydrologyc, waterflux_vars)
external_models/emi/src/em/betr/ExternalModelBETRMod.F90:      !assign waterstate
external_models/emi/src/em/betr/ExternalModelBETRMod.F90:       call ep_betr%betr(c)%pre_diagnose_soilcol_water_flux(betr_bounds, ep_betr%num_soilc, &
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    real(r8)                             :: dzsum                                                            ! summation of dzmm of layers below water table (mm)
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    real(r8)  , pointer                  :: vsfm_mass_prev_col          (:,:) ! Mass of water before a VSFM solve
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    real(r8)  , pointer                  :: vsfm_dmass_col              (:)            ! Change in mass of water after a VSFM solve
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: mass_beg                                                         ! Sum of mass of water for all active soil columns before VSFM is called
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: mass_end                                                         ! Sum of mass of water for all active soil columns after VSFM is called
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux_et                                               ! Sum of mass ET mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux_infl                                             ! Sum of mass infiltration mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux_dew                                              ! Sum of mass dew mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux_drain                                            ! Sum of mass drainage mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux_snowlyr                                          ! Sum of mass snow layer disappearance mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux_sub                                              ! Sum of mass sublimation mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:    PetscReal                            :: total_mass_flux                                                  ! Sum of mass ALL mass flux of water for all active soil columns
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:               ! Find maximum water balance error over the column
external_models/emi/src/em/vsfm/ExternalModelVSFMMod.F90:            write(iulog,*)'In soilwater_vsfm: VSFM failed to converge after multiple attempts.'
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    call this%thermal_mpp%SetName    ('Snow + Standing water + Soil thermal model using temperature')
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    ! Save geometric attributes for standing surface water mesh
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    ! Set mesh for standing water
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    call this%thermal_mpp%MeshSetName(imesh, 'CLM standing water thermal snow mesh')
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    ! Set mesh for standing water
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:         'Thermal equation using temprature formulation in standing surface water (KSP formulation)', &
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:         'Heat_flux_BC_at_top_of_standing_surface_water', 'W/m^2', COND_HEAT_FLUX, &
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    real(r8) , pointer                   :: snow_water_1d          (:)
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    allocate(snow_water_1d          ((endc-begc+1)*(nlevgrnd+nlevsno+1 )))
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    snow_water_1d(:)          = 0._r8
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:                snow_water_1d(idx)                         = l2e_h2osno(c)
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:       ! Set snow water
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:            VAR_SNOW_WATER, soe_auxvar_id, snow_water_1d)
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:       ! 2) top standing water layer
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:       ! 2) top standing water layer
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:       ! Set fraction of soil not covered by snow and standing water
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    ! Put temperature back in ALM structure for standing water
external_models/emi/src/em/ptm/ExternalModelPTMMod.F90:    deallocate (snow_water_1d          )
external_models/emi/src/demo/demo.F90:  use clm_instMod               , only : soilstate_vars, waterstate_vars, waterflux_vars
external_models/emi/src/demo/demo.F90:          waterstate_vars   = waterstate_vars                       , &
external_models/emi/src/demo/demo.F90:          waterflux_vars    = waterflux_vars                        , &
external_models/emi/src/demo/demo.F90:          waterstate_vars   = waterstate_vars                       , &
external_models/emi/src/demo/demo.F90:          waterflux_vars    = waterflux_vars                        , &
external_models/emi/src/demo/demo.F90:  use clm_instMod   , only : soilstate_vars!, waterstate_vars, waterflux_vars
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:  type, public :: waterstate_type
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: snowliq_col            (:)   ! col average snow liquid water
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: bw_col                 (:,:) ! col partial density of water in the snow pack (ice + liquid) [kg/m3] 
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osno_col             (:)   ! col snow water (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osoi_liq_col         (:,:) ! col liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)    
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osoi_liqice_10cm_col (:)   ! col liquid water + ice lens in top 10cm of soil (kg/m2)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osoi_vol_col         (:,:) ! col volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osoi_liqvol_col      (:,:) ! col volumetric liquid water content (v/v)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2ocan_patch           (:)   ! patch canopy water (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2ocan_col             (:)   ! col canopy water (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osfc_col             (:)   ! col surface water (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: swe_old_col            (:,:) ! col initial snow water
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: tws_grc                (:)   ! grc total water storage (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: tws_month_beg_grc      (:)   ! grc total water storage at the beginning of a month
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: tws_month_end_grc      (:)   ! grc total water storage at the end of a month
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: total_plant_stored_h2o_col(:) ! col water that is bound in plants, including roots, sapwood, leaves, etc
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:                                                        ! water storage in plants, and thus 0.0 is a suitable for the trivial case.
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: sno_liq_top_col        (:)   ! col snow liquid water fraction (mass), top layer  [fraction]
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: frac_iceold_col        (:,:) ! col fraction of ice relative to the tot water (new) (-nlevsno+1:nlevgrnd) 
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: frac_h2osfc_col        (:)   ! col fractional area with surface water greater than zero
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: wf_col                 (:)   ! col soil water as frac. of whc for top 0.05 m (0-1) 
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: wf2_col                (:)   ! col soil water as frac. of whc for top 0.17 m (0-1) 
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: begwb_patch            (:)   ! water mass begining of the time step
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: begwb_col              (:)   ! water mass begining of the time step
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: begwb_grc              (:)   ! water mass begining of the time step
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: endwb_patch            (:)   ! water mass end of the time step
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: endwb_col              (:)   ! water mass end of the time step
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: endwb_grc              (:)   ! water mass end of the time step
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: errh2o_patch           (:)   ! water conservation error (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: errh2o_col             (:)   ! water conservation error (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: errh2o_grc             (:)   ! water conservation error (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: errh2osno_col          (:)   ! snow water conservation error(mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osoi_liq_depth_intg_col(:) ! grid-level depth integrated liquid soil water
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: h2osoi_ice_depth_intg_col(:) ! grid-level depth integrated ice soil water
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: beg_h2ocan_grc         (:)   ! grid-level canopy water at begining of the time step (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: beg_h2osno_grc         (:)   ! grid-level snow water at begining of the time step (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: beg_h2osfc_grc         (:)   ! grid-level surface water at begining of the time step (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: beg_h2osoi_liq_grc     (:)   ! grid-level liquid water at begining of the time step (kg/m2)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: end_h2ocan_grc         (:)   ! grid-level canopy water at end of the time step (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: end_h2osno_grc         (:)   ! grid-level snow water at end of the time step (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: end_h2osfc_grc         (:)   ! grid-level surface water at end of the time step (mm H2O)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:     real(r8), pointer :: end_h2osoi_liq_grc     (:)   ! grid-level liquid water at end of the time step (kg/m2)
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:  end type waterstate_type
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:    class(waterstate_type)            :: this
external_models/emi/src/elm_stub/elm_types_stub/WaterStateType.F90:    class(waterstate_type) :: this
external_models/emi/src/elm_stub/elm_types_stub/clm_instMod.F90:  use WaterfluxType     , only : waterflux_type
external_models/emi/src/elm_stub/elm_types_stub/clm_instMod.F90:  use WaterstateType    , only : waterstate_type
external_models/emi/src/elm_stub/elm_types_stub/clm_instMod.F90:  type(waterflux_type)     :: waterflux_vars
external_models/emi/src/elm_stub/elm_types_stub/clm_instMod.F90:  type(waterstate_type)    :: waterstate_vars
external_models/emi/src/elm_stub/elm_types_stub/SoilStateType.F90:     real(r8), pointer :: watsat_col           (:,:) ! col volumetric soil water at saturation (porosity) 
external_models/emi/src/elm_stub/elm_types_stub/SoilStateType.F90:     real(r8), pointer :: watfc_col            (:,:) ! col volumetric soil water at field capacity (nlevsoi)
external_models/emi/src/elm_stub/elm_types_stub/SoilStateType.F90:     real(r8), pointer :: watmin_col           (:,:) ! col minimum volumetric soil water (nlevsoi)
external_models/emi/src/elm_stub/elm_types_stub/SoilStateType.F90:     real(r8), pointer :: soilpsi_col          (:,:) ! col soil water potential in each soil layer (MPa) (CN)
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     integer :: h2osfcflag              ! true => surface water is active (namelist)       
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: zwt_col           (:)     ! col water table depth
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: zwts_col          (:)     ! col water table depth, the shallower of the two water depths     
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: zwt_perched_col   (:)     ! col perched water table depth
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: wa_col            (:)     ! col water in the unconfined aquifer (mm)
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: beg_wa_grc        (:)     ! grid-level water in the unconfined aquifer at beginning of the time step (mm)
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: end_wa_grc        (:)     ! grid-level water in the unconfined aquifer at end of the time step (mm)
external_models/emi/src/elm_stub/elm_types_stub/SoilHydrologyType.F90:     real(r8), pointer :: fsat_col          (:)     ! col fractional area with water table at surface
external_models/emi/src/elm_stub/elm_types_stub/CanopyStateType.F90:     real(r8),  pointer :: lbl_rsc_h2o_patch        (:)   ! laminar boundary layer resistance for water over dry leaf (s/m)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:  type, public :: waterflux_type
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     ! water fluxes are in units or mm/s
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_prec_grnd_patch     (:)   ! patch water onto ground including canopy runoff [kg/(m2 s)]
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_prec_grnd_col       (:)   ! col water onto ground including canopy runoff [kg/(m2 s)]
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_snow_patch       (:)   ! patch evaporation heat flux from snow       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_snow_col         (:)   ! col evaporation heat flux from snow         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_soil_patch       (:)   ! patch evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_soil_col         (:)   ! col evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_h2osfc_patch     (:)   ! patch evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_ev_h2osfc_col       (:)   ! col evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_rootsoi_col         (:,:) ! col root and soil water exchange [mm H2O/s] [+ into root]     
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: dwb_col                  (:)   ! coll water mass change [+ increase] [mm H2O/s] 
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_top_soil_col        (:)   ! col net water input into soil from top (mm/s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_h2osfc_surf_col     (:)   ! col surface water runoff
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_snow_h2osfc_col     (:)   ! col snow falling on surface water
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_deficit_col         (:)   ! col water deficit to keep non-negative liquid water content (mm H2O)   
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_floodc_col          (:)   ! col flood water flux at column level
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_sl_top_soil_col     (:)   ! col liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_drain_vr_col        (:,:) ! col liquid water losted as drainage (m /time step)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_h2osfc2topsoi_col   (:)   ! col liquid water coming from surface standing water top soil (mm H2O/s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: qflx_snow2topsoi_col     (:)   ! col liquid water coming from residual snow to topsoil (mm H2O/s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: mflx_drain_col_1d        (:)   ! drainage from groundwater table (kg H2O /s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: mflx_drain_perched_col_1d(:)   ! drainage from perched water table (kg H2O /s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: mflx_neg_snow_col_1d     (:)   ! mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:     real(r8), pointer :: mflx_drain_col           (:,:) ! drainage from groundwater table (kg H2O /s)
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:  end type waterflux_type
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:    class(waterflux_type) :: this
external_models/emi/src/elm_stub/elm_types_stub/WaterfluxType.F90:    class(waterflux_type) :: this
external_models/emi/src/elm_stub/elm_types_stub/EnergyFluxType.F90:     real(r8), pointer :: eflx_sh_h2osfc_patch    (:)   ! patch sensible heat flux from surface water (W/m**2) [+ to atm]
external_models/emi/src/elm_stub/elm_types_stub/EnergyFluxType.F90:     real(r8), pointer :: eflx_hs_h2osfc_col      (:)   ! heat flux on standing water [W/m2]
external_models/emi/src/elm_stub/elm_types_stub/EnergyFluxType.F90:     real(r8), pointer :: htvp_col                (:)   ! latent heat of vapor of water (or sublimation) [j/kg]
external_models/emi/src/elm_stub/elm_types_stub/EnergyFluxType.F90:     real(r8), pointer :: eflx_fgr0_h2osfc_col    (:)   ! col soil-surfacewater heat flux (W/m2) [+ = into soil]
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer :: t_h2osfc_col             (:)   ! col surface water temperature
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer :: t_h2osfc_bef_col         (:)   ! col surface water temperature from time-step before  
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer :: liquid_water_temp1_grc   (:)   ! grc initial weighted average liquid water temperature (K)
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer :: liquid_water_temp2_grc   (:)   ! grc post land cover change weighted average liquid water temperature (K)
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer    :: xmf_col               (:)   ! total latent heat of phase change of ground water
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer    :: xmf_h2osfc_col        (:)   ! latent heat of phase change of surface water
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:     real(r8), pointer    :: c_h2osfc_col          (:)   ! heat capacity of surface water
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:    allocate(this%liquid_water_temp1_grc   (begg:endg))                      ; this%liquid_water_temp1_grc   (:)   = nan
external_models/emi/src/elm_stub/elm_types_stub/TemperatureType.F90:    allocate(this%liquid_water_temp2_grc   (begg:endg))                      ; this%liquid_water_temp2_grc   (:)   = nan
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_MWWV    = 18.016_R8       ! molecular weight water vapor
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKTRIP  = 273.16_R8       ! triple point of fresh water        ~ K
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKFRZ   = 273.15_R8       ! freezing T of fresh water          ~ K 
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_TKFRZSW = SHR_CONST_TKFRZ - 1.8_R8 ! freezing T of salt water  ~ K
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_RHOFW   = 1.000e3_R8      ! density of fresh water     ~ kg/m^3
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_RHOSW   = 1.026e3_R8      ! density of sea water       ~ kg/m^3
external_models/emi/src/elm_stub/shr/shr_const_mod.F90:   real(R8),parameter :: SHR_CONST_CPWV    = 1.810e3_R8      ! specific heat of water vap ~ J/kg/K
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  ! Define the data structure that holds water state information at the vegetation level.
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  type, public :: vegetation_water_state
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: h2ocan       (:) => null() ! canopy water (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: begwb        (:) => null() ! water mass begining of the time step
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: endwb        (:) => null() ! water mass end of the time step
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: errh2o       (:) => null() ! water conservation error (mm H2O)
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  end type vegetation_water_state
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: eflx_sh_h2osfc    (:) => null() ! sensible heat flux from surface water (W/m**2) [+ to atm]
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  ! Define the data structure that holds water flux information at the vegetation level.
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  type, public :: vegetation_water_flux
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: qflx_prec_grnd     (:)   => null() ! water onto ground including canopy runoff [kg/(m2 s)]
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: qflx_ev_snow       (:)   => null() ! evaporation heat flux from snow       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: qflx_ev_soil       (:)   => null() ! evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    real(r8), pointer :: qflx_ev_h2osfc     (:)   => null() ! evaporation heat flux from soil       (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  end type vegetation_water_flux
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  type(vegetation_water_state)           , public, target :: veg_ws     ! vegetation water state
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  type(vegetation_water_flux)            , public, target :: veg_wf     ! vegetation water flux
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  ! Subroutines to initialize and clean vegetation water state data structure
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    class(vegetation_water_state) :: this
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:  ! Subroutines to initialize and clean vegetation water flux data structure
external_models/emi/src/elm_stub/elm_subgrid_types/VegetationDataType.F90:    class(vegetation_water_flux) :: this
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: t_h2osfc      (:)   => null() ! surface water temperature (K)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: t_h2osfc_bef  (:)   => null() ! surface water temperature at start of time step (K)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: c_h2osfc      (:)   => null() ! heat capacity of surface water (J/K)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  ! Define the data structure that holds water state information at the column level.
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  type, public :: column_water_state
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    ! Primary water and ice state variables for soil/snow column
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liq         (:,:) => null() ! liquid water (-nlevsno+1:nlevgrnd) (kg/m2)     
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_vol         (:,:) => null() ! volumetric soil water (0<=h2osoi_vol<=watsat) (1:nlevgrnd) (m3/m3)  
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osfc             (:)   => null() ! surface water (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2ocan             (:)   => null() ! canopy water integrated to column (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: total_plant_stored_h2o(:)=> null() ! total water in plants (used??)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    ! Derived water and ice state variables for soil/snow column, depth varying
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liqvol      (:,:) => null() ! volumetric liquid water content (-nlevsno+1:nlevgrnd) (m3/m3)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: bw                 (:,:) => null() ! partial density of water in the snow pack (ice + liquid) [kg/m3] 
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: swe_old            (:,:) => null() ! initial snow water content (-nlevsno+1:0) (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    ! Derived water, ice, and snow variables, column aggregate
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qg_h2osfc          (:)   => null() ! specific humidity over surface water (kg H2O/kg moist air)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liqice_10cm (:)   => null() ! liquid water + ice in top 10cm of soil (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: sno_liq_top        (:)   => null() ! snow liquid water fraction, by mass, top layer (kg/kg)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: snowliq            (:)   => null() ! total snow liquid water (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: frac_iceold        (:,:) => null() ! fraction of ice relative to the tot water (-nlevsno+1:nlevgrnd) 
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: frac_h2osfc        (:)   => null() ! fractional area with surface water greater than zero
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: wf                 (:)   => null() ! soil water as frac. of whc for top 0.05 m (0-1) 
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: wf2                (:)   => null() ! soil water as frac. of whc for top 0.17 m (0-1) 
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: begwb              (:)   => null() ! water mass begining of the time step (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: endwb              (:)   => null() ! water mass end of the time step (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: errh2o             (:)   => null() ! water conservation error (kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: errh2osno          (:)   => null() ! snow water conservation error(kg/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_liq_depth_intg(:) => null() ! grid-level depth integrated liquid soil water
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: h2osoi_ice_depth_intg(:) => null() ! grid-level depth integrated ice soil water
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  end type column_water_state
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: eflx_hs_h2osfc          (:)   => null() ! heat flux on standing water (W/m2)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: htvp                    (:)   => null() ! latent heat of vapor of water (or sublimation) [j/kg]
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: xmf                     (:)   => null() ! total latent heat of phase change of ground water
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: xmf_h2osfc              (:)   => null() ! latent heat of phase change of surface water
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: eflx_fgr0_h2osfc        (:)   => null() ! soil-surfacewater heat flux (W/m2) [+ = into soil]
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  ! Define the data structure that holds water flux information at the column level.
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  type, public :: column_water_flux
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_prec_grnd       (:)   => null() ! water onto ground including canopy runoff [kg/(m2 s)]
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_ev_snow         (:)   => null() ! evaporation heat flux from snow         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_ev_soil         (:)   => null() ! evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_ev_h2osfc       (:)   => null() ! evaporation heat flux from soil         (W/m**2) [+ to atm] ! NOTE: unit shall be mm H2O/s for water NOT heat
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_rootsoi         (:,:) => null() ! root and soil water exchange [mm H2O/s] [+ into root]     
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: dwb                  (:)   => null() !  water mass change [+ increase] [mm H2O/s] 
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_top_soil        (:)   => null() ! net water input into soil from top (mm/s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_h2osfc_surf     (:)   => null() ! surface water runoff
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_snow_h2osfc     (:)   => null() ! snow falling on surface water
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_deficit         (:)   => null() ! water deficit to keep non-negative liquid water content (mm H2O)   
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_floodc          (:)   => null() ! flood water flux at column level
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_sl_top_soil     (:)   => null() ! liquid water + ice from layer above soil to top soil layer or sent to qflx_qrgwl (mm H2O/s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_drain_vr        (:,:) => null() ! liquid water lost as drainage (m /time step)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_h2osfc2topsoi   (:)   => null() ! liquid water coming from surface standing water top soil (mm H2O/s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: qflx_snow2topsoi     (:)   => null() ! liquid water coming from residual snow to topsoil (mm H2O/s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: mflx_drain_1d        (:)   => null() ! drainage from groundwater table (kg H2O /s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: mflx_drain_perched_1d(:)   => null() ! drainage from perched water table (kg H2O /s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: mflx_neg_snow_1d     (:)   => null() ! mass flux from top soil layer due to negative water content in snow layers (kg H2O /s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    real(r8), pointer :: mflx_drain           (:,:) => null() ! drainage from groundwater table (kg H2O /s)
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  end type column_water_flux
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  type(column_water_state)           , public, target :: col_ws     ! column water state
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  type(column_water_flux)            , public, target :: col_wf     ! column water flux
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  ! Subroutines to initialize and clean column water state data structure
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    class(column_water_state) :: this
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    class(column_water_state) :: this
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:  ! Subroutines to initialize and clean column water flux data structure
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    class(column_water_flux) :: this
external_models/emi/src/elm_stub/elm_subgrid_types/ColumnDataType.F90:    class(column_water_flux) :: this
external_models/emi/src/elm_stub/utils/clm_varpar.F90:  integer, parameter :: numwat      =   5     ! number of water types (soil, ice, 2 lakes, wetland)
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: rwat   = SHR_CONST_RWV    !gas constant for water vapor [J/(kg K)]
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: cpliq  = SHR_CONST_CPFW   !Specific heat of water [J/kg-K]
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: hvap   = SHR_CONST_LATVAP !Latent heat of evap for water [J/kg]
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: denh2o = SHR_CONST_RHOFW  !density of liquid water [kg/m3]
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: tkwat  = 0.57_r8       !thermal conductivity of water [W/m/K]
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: ssi    = 0.033_r8   !Irreducible water saturation of snow
external_models/emi/src/elm_stub/utils/clm_varcon.F90:  real(r8) :: d_con_w(ngases,3)    ! water diffusivity constants (spp, #)  (mult. by 10^-4)
main/clm_varpar.F90:  integer, parameter :: nvegwcs     =   4     ! number of vegetation water conductance segments
main/clm_varpar.F90:  integer, parameter :: numwat      =   5     ! number of water types (soil, ice, 2 lakes, wetland)
main/clm_instMod.F90:  use WaterfluxType              , only : waterflux_type
main/clm_instMod.F90:  use WaterstateType             , only : waterstate_type
main/clm_instMod.F90:  use SoilWaterRetentionCurveMod , only : soil_water_retention_curve_type
main/clm_instMod.F90:  type(waterflux_type)                                :: waterflux_vars
main/clm_instMod.F90:  type(waterstate_type)                               :: waterstate_vars
main/clm_instMod.F90:  class(soil_water_retention_curve_type), allocatable :: soil_water_retention_curve
main/clm_instMod.F90:    use SoilWaterRetentionCurveFactoryMod , only : create_soil_water_retention_curve
main/clm_instMod.F90:    ! snow water
main/clm_instMod.F90:    call waterstate_vars%init(bounds_proc,         &
main/clm_instMod.F90:    call waterflux_vars%init(bounds_proc)
main/clm_instMod.F90:    ! Once namelist options are added to control the soil water retention curve method,
main/clm_instMod.F90:    allocate(soil_water_retention_curve, &
main/clm_instMod.F90:         source=create_soil_water_retention_curve())
main/controlMod.F90:    write(iulog,*) ' perchroot (plant water stress based on unfrozen layers only) = ',perchroot
main/controlMod.F90:    write(iulog,*) ' perchroot (plant water stress based on time-integrated active layer only) = ',perchroot
main/clm_initializeMod.F90:    use SoilWaterRetentionCurveFactoryMod   , only : create_soil_water_retention_curve
main/clm_initializeMod.F90:      call ep_betr%InitOnline(bounds_proc, lun_pp, col_pp, veg_pp, waterstate_vars, betr_namelist_buffer, masterproc)
main/clm_initializeMod.F90:               waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/clm_initializeMod.F90:            waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/clm_initializeMod.F90:            waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/clm_initializeMod.F90:            waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/clm_initializeMod.F90:            waterstate_vars, surfalb_vars, energyflux_vars, lnd2atm_vars)
main/clm_initializeMod.F90:               temperature_vars, waterflux_vars,               &
main/clm_initializeMod.F90:       call alm_fates%init_coldstart(waterstate_vars,canopystate_vars, &
main/init_hydrology.F90:  use SoilWaterMovementMod, only : init_soilwater_movement
main/init_hydrology.F90:  call init_soilwater_movement
main/pftvarcon.F90_backup06252020:  real(r8), allocatable :: smpso(:)       !soil water potential at full stomatal opening (mm)
main/pftvarcon.F90_backup06252020:  real(r8), allocatable :: smpsc(:)       !soil water potential at full stomatal closure (mm)
main/atm2lndType.F90:         avgflag='A', long_name='river channel total water storage', &
main/atm2lndType.F90:         avgflag='A', long_name='river channel main channel water storage', &
main/atm2lndType.F90:         long_name='flood water flux', units='mm/s', &
main/pftvarcon.F90:  real(r8), allocatable :: smpso(:)       !soil water potential at full stomatal opening (mm)
main/pftvarcon.F90:  real(r8), allocatable :: smpsc(:)       !soil water potential at full stomatal closure (mm)
main/clm_interface_pflotranMod.F90:    ! (3) pass CLM water fluxes to PFLOTRAN-CLM interface
main/clm_interface_pflotranMod.F90:       ! MUST reset PFLOTRAN soil aq. bgc state variables from CLM-CN due to liq. water volume change
main/clm_interface_pflotranMod.F90:    PetscScalar, pointer :: sucsat_clm_loc(:)  ! volumetric soil water at saturation (porosity)
main/clm_interface_pflotranMod.F90:         watsat                   => clm_interface_data%watsat_col                  , & !  [real(r8) (:,:)]  volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_pflotranMod.F90:         watfc                    => clm_interface_data%watfc_col                   , & !  [real(r8) (:,:)]  volumetric soil water at field capacity (nlevgrnd)
main/clm_interface_pflotranMod.F90:      watsat          => clm_interface_data%watsat_col    , & ! volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_pflotranMod.F90:      watmin          => clm_interface_data%watmin_col    , & ! col minimum volumetric soil water (nlevsoi)
main/clm_interface_pflotranMod.F90:      soilpsi         => clm_interface_data%th%soilpsi_col   ,  & ! soil water matric potential in each soil layer (MPa)
main/clm_interface_pflotranMod.F90:      h2osoi_liq      => clm_interface_data%th%h2osoi_liq_col,  & ! liquid water (kg/m2)
main/clm_interface_pflotranMod.F90:      h2osoi_vol      => clm_interface_data%th%h2osoi_vol_col,  & ! volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
main/clm_interface_pflotranMod.F90:      w_scalar        => clm_interface_data%bgc%w_scalar_col ,  & ! soil water scalar for decomp
main/clm_interface_pflotranMod.F90:                ! So that in PF, if not ice-adjusted, the PSI is very small (negative) which implies possible water movement
main/clm_interface_pflotranMod.F90:                    psitmp0 = sucsat(c,j) * (-SHR_CONST_G) * ((sattmp+itheta)**(-bsw(c,j)))  ! -Pa: included both ice and liq. water as CLM does
main/clm_interface_pflotranMod.F90:    watsat          => clm_interface_data%watsat_col          , & ! volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_pflotranMod.F90:    ! if 'pf_tmode' is NOT using freezing option, the phase-change of soil water done in 'SoilTemperatureMod.F90' in 'bgp2'
main/clm_interface_pflotranMod.F90:    ! This is doing prior to the real liquid water source/sink, because 'h2osoi_liq' will be updated during those calls after 'bgp2'.
main/clm_interface_pflotranMod.F90:  !  F.-M. YUAN: the water fluxes in CLM4.5 are separately calculated in a few subroutines
main/clm_interface_pflotranMod.F90:    PetscScalar, pointer :: qflwt_clmp_loc(:)        !   temperature of source/sink term for plant Transpiration: oC (ET water temperature for thermal contact with soil)
main/clm_interface_pflotranMod.F90:    watsat            => clm_interface_data%watsat_col                        , &! volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_pflotranMod.F90:    watmin            => clm_interface_data%watmin_col                        , &! restriction for min of volumetric soil water, or, residual vwc (-) (nlevgrnd)
main/clm_interface_pflotranMod.F90:    frac_h2osfc       => clm_interface_data%th%frac_h2osfc_col                , &! [real(r8) (:) ]   fraction of ground covered by surface water (0 to 1)
main/clm_interface_pflotranMod.F90:    qflx_top_soil     => clm_interface_data%th%qflx_top_soil_col              , &! [real(r8) (:) ]   column-level net liq. water input into soil from top (mm/s)
main/clm_interface_pflotranMod.F90:    qflx_rootsoil     => clm_interface_data%th%qflx_rootsoil_col              , &! [real(r8) (:,:) ] column-level p-aggregated vertically-resolved vegetation/soil water exchange (m H2O/s) (+ = to atm)
main/clm_interface_pflotranMod.F90:    h2osoi_liq        => clm_interface_data%th%h2osoi_liq_col                 , &! [real(r8) (:,:) ] liquid water (kg/m2)
main/clm_interface_pflotranMod.F90:    ! previous time-step soil water pressure and saturation for adjusting qflx
main/clm_interface_pflotranMod.F90:      ! bare-soil fraction-weighted col-level evaporation (this is the actual water by EV from the whole 1st soil layer)
main/clm_interface_pflotranMod.F90:       ponding_pressure = pondmax(c)*SHR_CONST_G              ! max. ponding water depth (mm) ==> pressure (Pa)
main/clm_interface_pflotranMod.F90:          ! previous time-step soil water saturation for adjusting qflx to avoid too wet or too dry to cause PF math issue
main/clm_interface_pflotranMod.F90:               ! although causes water/energy-balance errors which should be accounted for later on (NOT YET - TODO!)
main/clm_interface_pflotranMod.F90:               ! sub-limition cannot be as water flow into soil
main/clm_interface_pflotranMod.F90:             ! net liq water input/output to soil column
main/clm_interface_pflotranMod.F90:             ! if net input potential, it's forming TOP BC of pressure type (water ponding potetial)
main/clm_interface_pflotranMod.F90:             ! both waterhead and flux calcuated here, but not applied in PFLOTRAN in the same time (upon BC type picked-up by PF)
main/clm_interface_pflotranMod.F90:                ! Newly ADDED mmH2O ==> pressure (Pa) as top BC (dirichlet) by forming a layer of surface water column
main/clm_interface_pflotranMod.F90:                   ! water-head formed on saturated below-ground soil layer
main/clm_interface_pflotranMod.F90:                   ! ground-water-head discontinued from below-ground (atm. pressure applied at both ends)
main/clm_interface_pflotranMod.F90:          ! plant root extraction of water (transpiration: negative to soil)
main/clm_interface_pflotranMod.F90:             ! available water flux-out rate (-) adjusted by source(-)/sink(+) term
main/clm_interface_pflotranMod.F90:    frac_h2osfc       => clm_interface_data%th%frac_h2osfc_col       , &! fraction of ground covered by surface water (0 to 1)
main/clm_interface_pflotranMod.F90:    htvp              => clm_interface_data%th%htvp_col              , &! latent heat of vapor of water (or sublimation) [j/kg]
main/clm_interface_pflotranMod.F90:    eflx_fgr0_h2osfc  => clm_interface_data%th%eflx_fgr0_h2osfc_col  , &! heat flux from surface water column (W/m**2) [+ = into soil]
main/clm_interface_pflotranMod.F90:    t_h2osfc          => clm_interface_data%th%t_h2osfc_col          , &! surface-water temperature [K]
main/clm_interface_pflotranMod.F90:       ! NOTE that this is not exactly ground temperature from CLM, which is for air/ground (snow/surfwater-1st soil) interface
main/clm_interface_pflotranMod.F90:       ! net (sw+lw) radiation into soil, if not covered by surface water or snow
main/clm_interface_pflotranMod.F90:       ! soil surface evaporation (NOTE which adjusted by liq. water available in the first soil layer in 'get_clm_wflx' subroutine)
main/clm_interface_pflotranMod.F90:       ! if snow/surface-water covered, need to add snow/water-soil interface heat flux
main/clm_interface_pflotranMod.F90:      watsat          => clm_interface_data%watsat_col       , & ! volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_pflotranMod.F90:      soilpsi         => clm_interface_data%th%soilpsi_col   , & ! soil water matric potential in each soil layer (MPa)
main/clm_interface_pflotranMod.F90:      h2osoi_liq      => clm_interface_data%th%h2osoi_liq_col, & ! liquid water (kg/m2)
main/clm_interface_pflotranMod.F90:      h2osoi_vol      => clm_interface_data%th%h2osoi_vol_col  & ! volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]
main/clm_interface_pflotranMod.F90:    frac_h2osfc       =>    clm_interface_data%th%frac_h2osfc_col       , & ! fraction of ground covered by surface water (0 to 1)
main/clm_interface_pflotranMod.F90:    qflx_top_soil     =>    clm_interface_data%th%qflx_top_soil_col     , & ! [real(r8) (:)] net liq. water input into soil from top (mm/s)
main/clm_interface_pflotranMod.F90:      ! the following was actually duplicated from 'get_clm_bcwflx' to calculate total water evap from 'qflx_topsoil'
main/clm_interface_pflotranMod.F90:      ! in order to get potential infiltration from CLM, because 'qflx_ev_soil' might be reduced due to water limits
main/clm_interface_pflotranMod.F90:     frac_h2osfc                  => clm_interface_data%th%frac_h2osfc_col             , & ! fraction of ground covered by surface water (0 to 1)
main/clm_interface_pflotranMod.F90:     lair_barrier(:) = -1            ! (-1: no barrier, 0: ground snow/ice/water-layer barrier, >=1: barrier in soil column)
main/clm_interface_pflotranMod.F90:              ! total_p is soil air pressure (soil water pressure if not less than atm. pressure)
main/clmfates_interfaceMod.F90:   use WaterStateType    , only : waterstate_type
main/clmfates_interfaceMod.F90:   use WaterFluxType     , only : waterflux_type
main/clmfates_interfaceMod.F90:      call set_fates_ctrlparms('soilwater_ipedof',ival=get_ipedof(0))
main/clmfates_interfaceMod.F90:         waterstate_inst, canopystate_inst, carbonflux_inst,          &
main/clmfates_interfaceMod.F90:      type(waterstate_type)   , intent(inout)        :: waterstate_inst
main/clmfates_interfaceMod.F90:                                         waterstate_inst,  &
main/clmfates_interfaceMod.F90:         waterstate_inst, canopystate_inst, frictionvel_inst )
main/clmfates_interfaceMod.F90:     type(waterstate_type)   , intent(inout)        :: waterstate_inst
main/clmfates_interfaceMod.F90:       !       ! Diagnose water storage in canopy if hydraulics is on
main/clmfates_interfaceMod.F90:       !pass the water storage in plants back to the HLM
main/clmfates_interfaceMod.F90:   subroutine restart( this, bounds_proc, ncid, flag, waterstate_inst, &
main/clmfates_interfaceMod.F90:      ! Note: waterstate_inst and canopystate_inst are arguments only because following
main/clmfates_interfaceMod.F90:      type(waterstate_type)          , intent(inout) :: waterstate_inst
main/clmfates_interfaceMod.F90:                     waterstate_inst,canopystate_inst,frictionvel_inst)
main/clmfates_interfaceMod.F90:   subroutine init_coldstart(this, waterstate_inst, canopystate_inst, soilstate_inst, frictionvel_inst)
main/clmfates_interfaceMod.F90:     type(waterstate_type)          , intent(inout) :: waterstate_inst
main/clmfates_interfaceMod.F90:                waterstate_inst,canopystate_inst,frictionvel_inst)
main/clmfates_interfaceMod.F90:   subroutine wrap_btran(this,bounds_clump,fn,filterc,soilstate_inst, waterstate_inst, &
main/clmfates_interfaceMod.F90:                         soil_water_retention_curve)
main/clmfates_interfaceMod.F90:      use SoilWaterRetentionCurveMod, only : soil_water_retention_curve_type
main/clmfates_interfaceMod.F90:      type(waterstate_type)  , intent(in)            :: waterstate_inst
main/clmfates_interfaceMod.F90:      class(soil_water_retention_curve_type), intent(in) :: soil_water_retention_curve
main/clmfates_interfaceMod.F90:         watsat      => soilstate_inst%watsat_col           , & ! Input:  [real(r8) (:,:) ]  volumetric soil water at saturation (porosity)
main/clmfates_interfaceMod.F90:         rootr       => soilstate_inst%rootr_patch          & ! Output: [real(r8) (:,:) ]  Fraction of water uptake in each layer
main/clmfates_interfaceMod.F90:        ! root water uptake can happen, and soil suction should even
main/clmfates_interfaceMod.F90:        ! Now that the active layers of water uptake have been decided by fates
main/clmfates_interfaceMod.F90:                 call soil_water_retention_curve%soil_suction( soilstate_inst%sucsat_col(c,j), &
main/clmfates_interfaceMod.F90:       soilstate_inst, waterflux_inst)
main/clmfates_interfaceMod.F90:    type(waterflux_type), intent(inout)            :: waterflux_inst
main/clmfates_interfaceMod.F90:    ! root water sink is the same that was expected in the hydrology filter
main/clmfates_interfaceMod.F90:       write(iulog,*) 'The HLM list of natural veg columns during root water transfer'
main/clmfates_interfaceMod.F90:! subroutine TransferPlantWaterStorage(this, bounds_clump, nc, waterstate_inst)
main/clmfates_interfaceMod.F90:!   type(waterstate_type)   , intent(inout)        :: waterstate_inst
main/clmfates_interfaceMod.F90:                                 soilstate_inst, waterstate_inst, waterflux_inst, &
main/clmfates_interfaceMod.F90:   type(waterstate_type)   , intent(inout)        :: waterstate_inst
main/clmfates_interfaceMod.F90:   type(waterflux_type)    , intent(inout)        :: waterflux_inst
main/clmfates_interfaceMod.F90:      this%fates(nc)%bc_in(s)%qflx_transp_pa(ifp) = waterflux_inst%qflx_tran_veg_patch(p)
main/clm_interface_thType.F90:     real(r8), pointer :: soilpsi_col                               (:,:)   ! col soil water potential in each soil layer (MPa) (CN)
main/clm_interface_thType.F90:     ! waterstate_vars:
main/clm_interface_thType.F90:     real(r8), pointer :: frac_h2osfc_col                           (:)     ! col fractional area with surface water greater than zero
main/clm_interface_thType.F90:     real(r8), pointer :: h2osoi_vol_col                            (:,:)   ! col volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
main/clm_interface_thType.F90:     real(r8), pointer :: h2osoi_liq_col                            (:,:)   ! col liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
main/clm_interface_thType.F90:     real(r8), pointer :: t_h2osfc_col                              (:)     ! col surface-water temperature [Kelvin]
main/clm_interface_thType.F90:     ! waterflux_vars:
main/clm_interface_thType.F90:     real(r8), pointer :: qflx_top_soil_col                         (:)     ! col net water input into soil from top (mm/s)
main/clm_interface_thType.F90:     real(r8), pointer :: qflx_evap_h2osfc_col                      (:)     ! col evaporation flux from surface water (mm H2O /s) [+ to atm] ! note: the energy unit of orginal definition incorrect
main/clm_interface_thType.F90:     real(r8), pointer :: qflx_rootsoil_col                         (:,:)   ! col p-aggregated vertically-resolved vegetation/soil water exchange (m H2O/s) (+ = to atm)
main/clm_interface_thType.F90:     real(r8), pointer :: qflx_drain_vr_col                         (:,:)   ! col liquid water losted as drainage (mm H2O/s)
main/clm_interface_thType.F90:     real(r8), pointer :: htvp_col                                  (:)     ! latent heat of vapor of water (or sublimation) [j/kg]
main/clm_interface_thType.F90:     real(r8), pointer :: eflx_fgr0_h2osfc_col                      (:)     ! col heat flux from surface water bottom to first soil layer (W/m**2) [+ = into soil]
main/clm_interface_thType.F90:     real(r8), pointer :: zwt_col                                   (:)     ! col water table depth
main/clm_interface_thType.F90:     real(r8), pointer :: zwt_perched_col                           (:)     ! col perched water table depth
main/clm_interface_thType.F90:    ! waterstate_vars:
main/clm_interface_thType.F90:    ! waterflux_vars:
main/clm_varcon.F90:  real(r8) :: rwat   = SHR_CONST_RWV                        ! gas constant for water vapor [J/(kg K)]
main/clm_varcon.F90:  real(r8) :: cpliq  = SHR_CONST_CPFW                       ! Specific heat of water [J/kg-K]
main/clm_varcon.F90:  real(r8) :: hvap   = SHR_CONST_LATVAP                     ! Latent heat of evap for water [J/kg]
main/clm_varcon.F90:  real(r8) :: denh2o = SHR_CONST_RHOFW                      ! density of liquid water [kg/m3]
main/clm_varcon.F90:  real(r8) :: tkwat  = 0.57_r8                              ! thermal conductivity of water [W/m/K]
main/clm_varcon.F90:  real(r8) :: ssi    = 0.033_r8     ! Irreducible water saturation of snow
main/clm_varcon.F90:  real(r8), parameter :: aquifer_water_baseline = 5000._r8 ! baseline value for water in the unconfined aquifer [mm]
main/clm_varcon.F90:  real(r8) :: d_con_w(ngases,3)    ! water diffusivity constants (spp, #)  (mult. by 10^-4)
main/glc2lndMod.F90:     ! form of runoff routing in CLM in order to conserve water properly.
main/glc2lndMod.F90:    ! glc_dyn_runoff_routing=false scheme. This is needed to conserve water correctly in
main/lnd2atmType.F90:     real(r8), pointer :: h2osno_grc         (:)   => null() ! snow water (mm H2O)
main/lnd2atmType.F90:     real(r8), pointer :: h2osoi_vol_grc     (:,:) => null() ! volumetric soil water (0~watsat, m3/m3, nlevgrnd) (for dust model)
main/lnd2atmType.F90:     real(r8), pointer :: qflx_rofliq_qgwl_grc (:) => null() ! rof liq -- glacier, wetland and lakes water balance residual component
main/restFileMod.F90:  use WaterfluxType        , only : waterflux_type
main/restFileMod.F90:  use WaterstateType       , only : waterstate_type
main/restFileMod.F90:       waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/restFileMod.F90:    type(waterstate_type)          , intent(inout) :: waterstate_vars  ! due to EDrest call
main/restFileMod.F90:    type(waterflux_type)           , intent(in)    :: waterflux_vars
main/restFileMod.F90:    call waterflux_vars%restart (bounds, ncid, flag='define')
main/restFileMod.F90:    call waterstate_vars%restart (bounds, ncid, flag='define', &
main/restFileMod.F90:             waterstate_inst=waterstate_vars, &
main/restFileMod.F90:    call waterflux_vars%restart (bounds, ncid, flag='write')
main/restFileMod.F90:    call waterstate_vars%restart (bounds, ncid, flag='write',  &
main/restFileMod.F90:             waterstate_inst=waterstate_vars, &
main/restFileMod.F90:       waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/restFileMod.F90:    type(waterstate_type)          , intent(inout) :: waterstate_vars
main/restFileMod.F90:    type(waterflux_type)           , intent(inout) :: waterflux_vars
main/restFileMod.F90:    call waterflux_vars%restart (bounds, ncid, flag='read')
main/restFileMod.F90:    call waterstate_vars%restart (bounds, ncid,  flag='read', &
main/restFileMod.F90:             waterstate_inst=waterstate_vars, &
main/clm_interface_dataType.F90:     real(r8), pointer :: watsat_col                                (:,:)   ! col volumetric soil water at saturation (porosity)
main/clm_interface_dataType.F90:     real(r8), pointer :: watmin_col                                (:,:)   ! col minimum volumetric soil water (nlevsoi)
main/clm_interface_dataType.F90:     real(r8), pointer :: watfc_col                                 (:,:)   ! col volumetric soil water at field capacity (nlevsoi)
main/clm_interface_funcsMod.F90:  use WaterStateType        , only : waterstate_type
main/clm_interface_funcsMod.F90:  use WaterFluxType         , only : waterflux_type
main/clm_interface_funcsMod.F90:  use SoilWaterRetentionCurveMod    , only : soil_water_retention_curve_type
main/clm_interface_funcsMod.F90:           waterstate_vars, waterflux_vars,                       &
main/clm_interface_funcsMod.F90:    type(waterstate_type)       , intent(in)    :: waterstate_vars
main/clm_interface_funcsMod.F90:    type(waterflux_type)        , intent(in)    :: waterflux_vars
main/clm_interface_funcsMod.F90:                   waterstate_vars, temperature_vars)
main/clm_interface_funcsMod.F90:                       waterflux_vars, energyflux_vars)
main/clm_interface_funcsMod.F90:         watsat             => soilstate_vars%watsat_col                            , & !  [real(r8) (:,:)]  volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_funcsMod.F90:         watfc              => soilstate_vars%watfc_col                             , & !  [real(r8) (:,:)]  volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_funcsMod.F90:         watmin             => soilstate_vars%watmin_col                            , & !   col minimum volumetric soil water (nlevsoi)
main/clm_interface_funcsMod.F90:                       waterstate_vars, temperature_vars)
main/clm_interface_funcsMod.F90:    type(waterstate_type)    , intent(in) :: waterstate_vars
main/clm_interface_funcsMod.F90:      h2osoi_vol            => col_ws%h2osoi_vol           , & ! [real(r8) (:,:)] volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
main/clm_interface_funcsMod.F90:      h2osoi_liq            => col_ws%h2osoi_liq           , & ! [real(r8) (:,:)] liquid water (kg/m2) (-nlevsno+1:nlevgrnd)
main/clm_interface_funcsMod.F90:      t_grnd                => col_es%t_grnd              , & ! [real(r8) (:)] ground (snow/soil1/surfwater-mixed) temperature (Kelvin)
main/clm_interface_funcsMod.F90:      t_h2osfc              => col_es%t_h2osfc            , & ! [real(r8) (:)] surface water temperature (Kelvin)
main/clm_interface_funcsMod.F90:                       waterflux_vars, energyflux_vars)
main/clm_interface_funcsMod.F90:    type(waterflux_type)     , intent(in) :: waterflux_vars
main/clm_interface_funcsMod.F90:      qflx_top_soil     => col_wf%qflx_top_soil         , & ! [real(:,:)] net liq. water input into top of soil column (mmH2O/s)
main/clm_interface_funcsMod.F90:      qflx_evap_h2osfc  => col_wf%qflx_ev_h2osfc        , & ! [real(:)] ! col water surface evaporation (mm H2O/s) (+ = to atm)
main/clm_interface_funcsMod.F90:      qflx_rootsoil     => col_wf%qflx_rootsoi          , & ! [real(:,:)] ! col vertically-resolved root and soil water exchange [mm H2O/s] [+ into root]
main/clm_interface_funcsMod.F90:      htvp              => col_ef%htvp                 , & ! [real(:) ! latent heat of vapor of water (or sublimation) [j/kg]
main/clm_interface_funcsMod.F90:      eflx_fgr0_h2osfc  => col_ef%eflx_fgr0_h2osfc     , & ! [real(:) ! col ground heat flux from surface water bottom to first soil layer (W/m**2) [+ = into soil]
main/clm_interface_funcsMod.F90:    !   - 'qflx_evap_soil' appears for total soil surface, esp. bare soil; 'qflx_ev_soil/snow/h2osfc' are actually applied for in soil water modules
main/clm_interface_funcsMod.F90:    !                        there is another variable 'qlfx_evap_grnd', which are those from liq. water when snow
main/clm_interface_funcsMod.F90:      w_scalar                         => col_cf%w_scalar                          , & ! Output: [real(r8) (:,:)   ]  soil water scalar for decomp
main/clm_interface_funcsMod.F90:           soilstate_vars, waterstate_vars)
main/clm_interface_funcsMod.F90:    type(waterstate_type), intent(inout) :: waterstate_vars
main/clm_interface_funcsMod.F90:           waterstate_vars, waterflux_vars,                &
main/clm_interface_funcsMod.F90:    type(waterstate_type)       , intent(inout) :: waterstate_vars
main/clm_interface_funcsMod.F90:    type(waterflux_type)        , intent(inout) :: waterflux_vars
main/clm_interface_funcsMod.F90:                   soilstate_vars, waterstate_vars)
main/clm_interface_funcsMod.F90:                temperature_vars, waterstate_vars,          &
main/clm_interface_funcsMod.F90:    type(waterstate_type)               , intent(inout) :: waterstate_vars
main/clm_interface_funcsMod.F90:                temperature_vars, waterstate_vars,          &
main/clm_interface_funcsMod.F90:               temperature_vars, waterstate_vars,           &
main/clm_interface_funcsMod.F90:            temperature_vars, waterstate_vars,          &
main/clm_interface_funcsMod.F90:    type(waterstate_type)       , intent(inout) :: waterstate_vars
main/clm_interface_funcsMod.F90:        watsat                  => soilstate_vars%watsat_col                    , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at saturation (porosity) (nlevgrnd)
main/clm_interface_funcsMod.F90:        watfc                   => soilstate_vars%watfc_col                     , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water at field capacity (nlevsoi)
main/clm_interface_funcsMod.F90:        soilpsi                 => soilstate_vars%soilpsi_col                   , & ! Input:  [real(r8) (:,:)  ]  soil water potential in each soil layer (MPa)
main/clm_interface_funcsMod.F90:        h2osoi_vol              => col_ws%h2osoi_vol               , & ! Input:  [real(r8) (:,:)  ]  volumetric soil water (0<=h2osoi_vol<=watsat) [m3/m3]  (nlevgrnd)
main/clm_interface_funcsMod.F90:        h2osoi_liq              => col_ws%h2osoi_liq               , & ! Input:  [real(r8) (:,:)  ]  liquid water (kg/m2) (new) (-nlevsno+1:nlevgrnd)
main/histFileMod.F90:             long_name='saturated soil water content (porosity)';  units = 'mm3/mm3'
main/histFileMod.F90:             long_name='slope of soil water retention curve'; units = 'unitless'
main/lnd2atmMod.F90:  use WaterFluxType        , only : waterflux_type
main/lnd2atmMod.F90:  use WaterstateType       , only : waterstate_type
main/lnd2atmMod.F90:      waterstate_vars, surfalb_vars, energyflux_vars, lnd2atm_vars)
main/lnd2atmMod.F90:    type(waterstate_type) , intent(in)    :: waterstate_vars
main/lnd2atmMod.F90:       waterstate_vars, waterflux_vars, energyflux_vars, &
main/lnd2atmMod.F90:    type(waterstate_type)  , intent(inout)  :: waterstate_vars
main/lnd2atmMod.F90:    type(waterflux_type)   , intent(in)     :: waterflux_vars
main/lnd2atmMod.F90:         waterstate_vars, surfalb_vars, energyflux_vars, lnd2atm_vars)
main/lnd2atmMod.F90:    ! calculate total water storage for history files
main/clm_driver.F90:  use clm_instMod            , only : waterflux_vars
main/clm_driver.F90:  use clm_instMod            , only : waterstate_vars
main/clm_driver.F90:  use clm_instMod            , only : soil_water_retention_curve
main/clm_driver.F90:            soilhydrology_vars, waterstate_vars)
main/clm_driver.F90:       waterstate_vars, waterflux_vars, temperature_vars, energyflux_vars,   &
main/clm_driver.F90:    ! Initialize the mass balance checks for water.
main/clm_driver.F90:    ! prescribed transient patches, because column-level water is not
main/clm_driver.F90:    ! want to change the balance checks to ensure that the grid cell-level water
main/clm_driver.F90:            soilhydrology_vars, waterstate_vars)
main/clm_driver.F90:          call WaterBudget_SetBeginningMonthlyStates(bounds_clump, waterstate_vars)
main/clm_driver.F90:    ! Determine the fraction of foliage covered by water and the fraction
main/clm_driver.F90:            canopystate_vars, waterstate_vars, waterflux_vars, energyflux_vars)
main/clm_driver.F90:       ! (1) water storage of intercepted precipitation
main/clm_driver.F90:       ! (3) fraction of foliage covered by water and the fraction is dry and transpiring
main/clm_driver.F90:            aerosol_vars, waterstate_vars, waterflux_vars)
main/clm_driver.F90:            atm2lnd_vars, waterstate_vars, canopystate_vars, surfalb_vars, &
main/clm_driver.F90:            atm2lnd_vars, waterstate_vars, temperature_vars, urbanparams_vars, &
main/clm_driver.F90:            waterstate_vars, waterflux_vars, energyflux_vars, temperature_vars, &
main/clm_driver.F90:            waterflux_vars, waterstate_vars)
main/clm_driver.F90:       ! and leaf water change by evapotranspiration
main/clm_driver.F90:            temperature_vars, waterflux_vars, waterstate_vars, ch4_vars, photosyns_vars, &
main/clm_driver.F90:            soil_water_retention_curve, nitrogenstate_vars,phosphorusstate_vars,         &
main/clm_driver.F90:            waterstate_vars, frictionvel_vars, energyflux_vars, waterflux_vars) 
main/clm_driver.F90:            energyflux_vars, waterstate_vars, waterflux_vars, lakestate_vars) 
main/clm_driver.F90:            atm2lnd_vars, soilstate_vars, canopystate_vars, waterstate_vars, &
main/clm_driver.F90:         call ep_betr%BeTRSetBiophysForcing(bounds_clump, col_pp, veg_pp, 1, nlevsoi, waterstate_vars=waterstate_vars)
main/clm_driver.F90:            solarabs_vars, soilstate_vars, waterstate_vars, waterflux_vars, ch4_vars, &
main/clm_driver.F90:            atm2lnd_vars, urbanparams_vars, canopystate_vars, waterstate_vars, waterflux_vars, &
main/clm_driver.F90:         call ep_betr%BeTRSetBiophysForcing(bounds_clump, col_pp, veg_pp, 1, nlevsoi, waterstate_vars=waterstate_vars)
main/clm_driver.F90:            atm2lnd_vars, solarabs_vars, temperature_vars, canopystate_vars, waterstate_vars, &
main/clm_driver.F90:            energyflux_vars, waterflux_vars)            
main/clm_driver.F90:            waterstate_vars, energyflux_vars, waterflux_vars)
main/clm_driver.F90:            waterflux_vars, waterstate_vars, soilhydrology_vars, aerosol_vars, &
main/clm_driver.F90:            soil_water_retention_curve, ep_betr,                             &
main/clm_driver.F90:            waterflux_vars=waterflux_vars,                                 &
main/clm_driver.F90:            waterstate_vars=waterstate_vars,                               &
main/clm_driver.F90:            atm2lnd_vars, temperature_vars, soilstate_vars, waterstate_vars, waterflux_vars, &
main/clm_driver.F90:            waterflux_vars=waterflux_vars,                                         &
main/clm_driver.F90:            waterstate_vars=waterstate_vars,                                       &
main/clm_driver.F90:            waterflux_vars, waterstate_vars, temperature_vars)
main/clm_driver.F90:       ! wet-snow metamorphism in respect of liquid-water content, Ann. Glaciol.
main/clm_driver.F90:            waterflux_vars, waterstate_vars, temperature_vars)
main/clm_driver.F90:               atm2lnd_vars, canopystate_vars, soilstate_vars, waterstate_vars, &
main/clm_driver.F90:               waterflux_vars, sedflux_vars)
main/clm_driver.F90:                 atm2lnd_vars, waterstate_vars, waterflux_vars,                 &
main/clm_driver.F90:                       atm2lnd_vars, waterstate_vars, waterflux_vars,                   &
main/clm_driver.F90:                           waterstate_vars, waterflux_vars,                             &
main/clm_driver.F90:                           temperature_vars, waterstate_vars,                   &
main/clm_driver.F90:                   atm2lnd_vars, waterstate_vars, waterflux_vars,                           &
main/clm_driver.F90:                     waterstate_vars, canopystate_vars, temperature_vars, soilstate_vars)
main/clm_driver.F90:              atm2lnd_vars, canopystate_vars, waterstate_vars, frictionvel_vars, &
main/clm_driver.F90:              soilstate_vars, waterstate_vars, soil_water_retention_curve)
main/clm_driver.F90:             waterstate_vars=waterstate_vars,         waterflux_vars=waterflux_vars,         &
main/clm_driver.F90:               temperature_vars, energyflux_vars, waterstate_vars, waterflux_vars,                 &
main/clm_driver.F90:            atm2lnd_vars, canopystate_vars, waterstate_vars, frictionvel_vars, &
main/clm_driver.F90:            soilhydrology_vars, soilstate_vars, waterstate_vars, waterflux_vars,ep_betr)
main/clm_driver.F90:            soilhydrology_vars, soilstate_vars, waterstate_vars, waterflux_vars,ep_betr)
main/clm_driver.F90:                  waterstate_vars, canopystate_vars, carbonflux_vars,     &
main/clm_driver.F90:       ! Check the energy and water balance, also carbon and nitrogen balance
main/clm_driver.F90:                  waterstate_vars, waterflux_vars, frictionvel_vars,    &
main/clm_driver.F90:                     waterstate_vars, frictionvel_vars, cnstate_vars, &
main/clm_driver.F90:            atm2lnd_vars, glc2lnd_vars, solarabs_vars, waterflux_vars, &
main/clm_driver.F90:            waterstate_vars, energyflux_vars, canopystate_vars)
main/clm_driver.F90:            atm2lnd_vars, glc2lnd_vars, solarabs_vars, waterflux_vars , &
main/clm_driver.F90:            waterstate_vars, energyflux_vars, canopystate_vars        , &
main/clm_driver.F90:       call WaterBudget_SetEndingMonthlyStates(bounds_clump, waterstate_vars)
main/clm_driver.F90:               aerosol_vars, canopystate_vars, waterstate_vars, &
main/clm_driver.F90:                  waterstate_vars, urbanparams_vars, solarabs_vars, surfalb_vars) 
main/clm_driver.F90:         waterstate_vars, waterflux_vars, energyflux_vars,               &
main/clm_driver.F90:               temperature_vars, waterflux_vars,               &
main/clm_driver.F90:    ! Compute water budget
main/clm_driver.F90:       call WaterBudget_Run(bounds_proc, atm2lnd_vars, lnd2atm_vars, waterstate_vars, &
main/clm_driver.F90:               waterflux_vars, waterstate_vars, sedflux_vars,                                 &
main/clm_driver.F90:       canopystate_vars, waterstate_vars, waterflux_vars, energyflux_vars)
main/clm_driver.F90:    use WaterStateType     , only : waterstate_type
main/clm_driver.F90:    use WaterFluxType      , only : waterflux_type
main/clm_driver.F90:    type(waterstate_type) , intent(inout) :: waterstate_vars
main/clm_driver.F90:    type(waterflux_type)  , intent(inout) :: waterflux_vars
main/clm_driver.F90:         h2osno             => col_ws%h2osno                , & ! Input:  [real(r8) (:)   ]  snow water (mm H2O)                     
main/clm_driver.F90:         h2osoi_liq         => col_ws%h2osoi_liq            , & ! Input:  [real(r8) (:,:) ]  liquid water (kg/m2)                  
main/clm_driver.F90:         h2osno_old         => col_ws%h2osno_old            , & ! Output: [real(r8) (:)   ]  snow water (mm H2O) at previous time step
main/clm_driver.F90:         frac_iceold        => col_ws%frac_iceold           , & ! Output: [real(r8) (:,:) ]  fraction of ice relative to the tot water
main/clm_driver.F90:       waterstate_vars, energyflux_vars, waterflux_vars)
main/clm_driver.F90:    use WaterStateType , only : waterstate_type
main/clm_driver.F90:    use WaterFluxType  , only : waterflux_type
main/clm_driver.F90:    type(waterstate_type) , intent(inout) :: waterstate_vars
main/clm_driver.F90:    type(waterflux_type)  , intent(inout) :: waterflux_vars
main/clm_driver.F90:    ! Averaging for patch water state variables
main/clm_driver.F90:    ! Averaging for patch water flux variables
main/lnd2glcMod.F90:  use WaterFluxType   , only : waterflux_type
main/lnd2glcMod.F90:       temperature_vars, waterflux_vars, init)
main/lnd2glcMod.F90:    type(waterflux_type)   , intent(in)    :: waterflux_vars
utils/domainMod.F90:     real(r8),pointer :: f_surf(:)  ! fraction of water withdraws from surfacewater
utils/domainMod.F90:     real(r8),pointer :: f_grd(:)   ! fraction of water withdraws from groundwater
utils/AnnualFluxDribbler.F90:  !   - To get gridcell water (or whatever) content at the start of the time step:
utils/AnnualFluxDribbler.F90:  !   - To get gridcell water (or whatever) content at the end of the time step:
