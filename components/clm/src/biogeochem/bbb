42c42
<   real(r8), public :: som_adv_flux =  0._r8    ! m/s advection
---
>   real(r8), public :: som_adv_flux =  0._r8
73,75d72
< #if (defined HUM_HOL)
<      SoilLittVertTranspParamsInst%som_diffus = 5e-4_r8 / (secspday * 365._r8)
< #endif
153a151,153
>     real(r8), pointer :: diffus_flux(:,:,:)
>     real(r8), pointer :: diffus_gross_flux_up(:,:,:)
>     real(r8), pointer :: diffus_gross_flux_down(:,:,:)
163a164,170
>     real(r8), pointer :: conc_ptr_c13(:,:,:)  ! 14C bugfix
>     real(r8), pointer :: conc_ptr_c14(:,:,:)
>     real(r8), pointer :: source_c13(:,:,:)
>     real(r8), pointer :: source_c14(:,:,:)
>     real(r8) :: c13dens(bounds%begc:bounds%endc,1:nlevdecomp,1:ndecomp_pools)
>     real(r8) :: c14dens(bounds%begc:bounds%endc,1:nlevdecomp,1:ndecomp_pools)
>     real(r8) :: reduce_frac
244c251
<       do i_type = 1, ntype
---
>       do i_type = 1, 3
250a258,267
>             diffus_gross_flux_up   => col_cf%diffus_gross_flux_up
>             diffus_gross_flux_down => col_cf%diffus_gross_flux_down
>             if ( use_c13 ) then
>                conc_ptr_c13      => c13_col_cs%decomp_cpools_vr
>                source_c13        => c13_col_cf%decomp_cpools_sourcesink
>             end if
>             if ( use_c14 ) then
>                conc_ptr_c14      => c14_col_cs%decomp_cpools_vr
>                source_c14        => c14_col_cf%decomp_cpools_sourcesink
>             end if
254c271,273
<             trcr_tendency_ptr => col_nf%decomp_npools_transport_tendency
---
>             !trcr_tendency_ptr => nitrogenflux_vars%decomp_npools_transport_tendency_col
>             diffus_gross_flux_up   => col_nf%diffus_gross_nflux_up
>             diffus_gross_flux_down => col_nf%diffus_gross_nflux_down
258,280c277,279
<             trcr_tendency_ptr => col_pf%decomp_ppools_transport_tendency
<          case (4)
<             if ( use_c13 ) then
<                ! C13
<                conc_ptr          => c13_col_cs%decomp_cpools_vr
<                source            => c13_col_cf%decomp_cpools_sourcesink
<                trcr_tendency_ptr => c13_col_cf%decomp_cpools_transport_tendency
<             else
<                ! C14
<                conc_ptr          => c14_col_cs%decomp_cpools_vr
<                source            => c14_col_cf%decomp_cpools_sourcesink
<                trcr_tendency_ptr => c14_col_cf%decomp_cpools_transport_tendency
<             endif
<          case (5)
<             if ( use_c14 .and. use_c13 ) then
<                ! C14
<                conc_ptr          => c14_col_cs%decomp_cpools_vr
<                source            => c14_col_cf%decomp_cpools_sourcesink
<                trcr_tendency_ptr => c14_col_cf%decomp_cpools_transport_tendency
<             else
<                write(iulog,*) 'error.  ncase = 5, but c13 and c14 not both enabled.'
<                call endrun(msg=errMsg(__FILE__, __LINE__))
<             endif
---
>             !trcr_tendency_ptr => phosphorusflux_vars%decomp_ppools_transport_tendency_col
>             diffus_gross_flux_up   => col_pf%diffus_gross_pflux_up
>             diffus_gross_flux_down => col_pf%diffus_gross_pflux_up
283c282
< 	 call get_curr_date(year, mon, day, sec)
---
>          call get_curr_date(year, mon, day, sec)
290c289,290
<                   ! increase transport (both advection and diffusion) by the same factor as accelerated decomposition for a given pool
---
>                   ! increase transport (both advection and diffusion) by the
>                   ! same factor as accelerated decomposition for a given pool
305c305
< 			   if (spinup_term > 1 .and. year >= 40 .and. spinup_state .eq. 1) then 
---
>                            if (spinup_term > 1 .and. year >= 40 .and. spinup_state .eq. 1) then 
307c307
<  			   else
---
>                            else
309c309
< 			   end if			     
---
>                            end if                            
315c315
< 			   if (spinup_term > 1 .and. year >= 40 .and. spinup_state .eq. 1) then 
---
>                            if (spinup_term > 1 .and. year >= 40 .and. spinup_state .eq. 1) then 
319c319
< 			   end if
---
>                            end if
339c339,340
<                         ! dz_tracer below is the difference between gridcell edges  (dzsoi_decomp)
---
>                         ! dz_tracer below is the difference between gridcell
>                         ! edges  (dzsoi_decomp)
357c358,359
<                            ! At the bottom, assume no gradient in d_z (i.e., they're the same)
---
>                            ! At the bottom, assume no gradient in d_z (i.e.,
>                            ! they're the same)
372c374,375
<                            ! Use distance from j-1 node to interface with j divided by distance between nodes
---
>                            ! Use distance from j-1 node to interface with j
>                            ! divided by distance between nodes
395,429d397
< 
<                   ! Calculate the tridiagonal coefficients
<                   do j = 0,nlevdecomp +1
<                      do fc = 1, num_soilc
<                         c = filter_soilc (fc)
<                         ! g = cgridcell(c)
< 
<                         if (j > 0 .and. j < nlevdecomp+1) then
<                            a_p_0 =  dzsoi_decomp(j) / dtime
<                         endif
< 
<                         if (j == 0) then ! top layer (atmosphere)
<                            a_tri(c,j) = 0._r8
<                            b_tri(c,j) = 1._r8
<                            c_tri(c,j) = -1._r8
<                            r_tri(c,j) = 0._r8
<                         elseif (j == 1) then
<                            a_tri(c,j) = -(d_m1_zm1(c,j) * aaa(pe_m1(c,j)) + max( f_m1(c,j), 0._r8)) ! Eqn 5.47 Patankar
<                            c_tri(c,j) = -(d_p1_zp1(c,j) * aaa(pe_p1(c,j)) + max(-f_p1(c,j), 0._r8))
<                            b_tri(c,j) = -a_tri(c,j) - c_tri(c,j) + a_p_0
<                            r_tri(c,j) = source(c,j,s) * dzsoi_decomp(j) /dtime + (a_p_0 - adv_flux(c,j)) * conc_trcr(c,j) 
<                         elseif (j < nlevdecomp+1) then
<                            a_tri(c,j) = -(d_m1_zm1(c,j) * aaa(pe_m1(c,j)) + max( f_m1(c,j), 0._r8)) ! Eqn 5.47 Patankar
<                            c_tri(c,j) = -(d_p1_zp1(c,j) * aaa(pe_p1(c,j)) + max(-f_p1(c,j), 0._r8))
<                            b_tri(c,j) = -a_tri(c,j) - c_tri(c,j) + a_p_0
<                            r_tri(c,j) = source(c,j,s) * dzsoi_decomp(j) /dtime + a_p_0 * conc_trcr(c,j)
<                         else ! j==nlevdecomp+1; 0 concentration gradient at bottom
<                            a_tri(c,j) = -1._r8
<                            b_tri(c,j) = 1._r8
<                            c_tri(c,j) = 0._r8 
<                            r_tri(c,j) = 0._r8
<                         endif
<                      enddo ! fc; column
<                   enddo ! j; nlevdecomp
< 
432,433c400,403
<                      jtop(c) = 0
<                   enddo
---
>                      do j = 1, nlevdecomp
>                         trcr_tendency_ptr(c,j,s) = 0
>                      end do
>                   end do
435c405
<                   ! subtract initial concentration and source terms for tendency calculation
---
>                   ! compute vertical transport fluxes gC/m3/s
439c409,416
<                         trcr_tendency_ptr(c,j,s) = 0.-(conc_trcr(c,j) + source(c,j,s))
---
>                         if (j==nlevdecomp) then
>                            !diffus_gross_flux_down(c,j,s) = d_p1_zp1(c,j) * trcr
>                            diffus_gross_flux_up(c,j,s) = 0.0_r8
>                            diffus_gross_flux_down(c,j,s) = 0.0_r8
>                         else
>                            diffus_gross_flux_up(c,j,s) = max(0.0_r8,d_p1_zp1(c,j) * conc_ptr(c,j+1,s))
>                            diffus_gross_flux_down(c,j,s) = max(0.0_r8,d_p1_zp1(c,j) * conc_ptr(c,j,s))
>                         endif
443,451c420,447
<                   ! Solve for the concentration profile for this time step
<                   call Tridiagonal(bounds, 0, nlevdecomp+1, &
<                        jtop(bounds%begc:bounds%endc), &
<                        num_soilc, filter_soilc, &
<                        a_tri(bounds%begc:bounds%endc, :), &
<                        b_tri(bounds%begc:bounds%endc, :), &
<                        c_tri(bounds%begc:bounds%endc, :), &
<                        r_tri(bounds%begc:bounds%endc, :), &
<                        conc_trcr(bounds%begc:bounds%endc,0:nlevdecomp+1))
---
>                   if (i_type .eq. 1) then
>                      if ( use_c13 ) then
>                         do fc = 1, num_soilc
>                            c = filter_soilc (fc)
>                            ! update C13 density
>                            do j = 1, nlevdecomp
>                               if ( (conc_ptr(c,j,s) .gt. 0._r8) .and. (conc_ptr_c13(c,j,s) .gt. 0.0_r8) ) then
>                                  c13dens(c,j,s) = conc_ptr_c13(c,j,s) / conc_ptr(c,j,s)
>                               else
>                                  c13dens(c,j,s) = 0.0_r8
>                               end if
>                            end do
>                         end do
>                      end if
>                      if ( use_c14 ) then
>                         do fc = 1, num_soilc
>                            c = filter_soilc (fc)
>                            ! update C14 density
>                            do j = 1, nlevdecomp
>                               if ( (conc_ptr(c,j,s) .gt. 0._r8) .and. (conc_ptr_c14(c,j,s) .gt. 0.0_r8) ) then
>                                  c14dens(c,j,s) = conc_ptr_c14(c,j,s) / conc_ptr(c,j,s)
>                               else
>                                  c14dens(c,j,s) = 0.0_r8
>                               end if
>                            end do
>                         end do
>                      end if
>                   end if
452a449,455
>                   ! first update C12 pool with pool-to-pool flux
>                   do j = 1,nlevdecomp
>                      do fc = 1, num_soilc
>                         c = filter_soilc (fc)
>                         conc_ptr(c,j,s) = conc_ptr(c,j,s) + source(c,j,s)
>                      end do
>                   end do
454c457
<                   ! add post-transport concentration to calculate tendency term
---
>                   ! second update C12 pool with diffusion flux
458,459c461,480
<                         trcr_tendency_ptr(c,j,s) = trcr_tendency_ptr(c,j,s) + conc_trcr(c,j)
<                         trcr_tendency_ptr(c,j,s) = trcr_tendency_ptr(c,j,s) / dtime
---
>                         if (j==1) then
>                            diffus_gross_flux_down(c,j,s) = max(0.0_r8, min(diffus_gross_flux_down(c,j,s), conc_ptr(c,j,s) * dzsoi_decomp(j)/dtime))
>                         else
>                            if ((diffus_gross_flux_down(c,j,s) + diffus_gross_flux_up(c,j-1,s)) > max(0.0_r8, conc_ptr(c,j,s)) * dzsoi_decomp(j)/dtime) then
>                               reduce_frac = max(0.0_r8, conc_ptr(c,j,s)) * dzsoi_decomp(j) / dtime / (diffus_gross_flux_down(c,j,s) + diffus_gross_flux_up(c,j-1,s))
>                               diffus_gross_flux_down(c,j,s) = diffus_gross_flux_down(c,j,s) * reduce_frac
>                               diffus_gross_flux_up(c,j-1,s) = diffus_gross_flux_up(c,j-1,s) * reduce_frac
>                            end if
>                         end if
>                      end do
>                      do j = 1, nlevdecomp
>                         if (j==1) then
>                            conc_ptr(c,j,s) = conc_ptr(c,j,s) + diffus_gross_flux_up(c,j,s) / dzsoi_decomp(j) *dtime
>                            conc_ptr(c,j,s) = conc_ptr(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) *dtime
>                         else
>                            conc_ptr(c,j,s) = conc_ptr(c,j,s) + diffus_gross_flux_up(c,j,s) / dzsoi_decomp(j) *dtime
>                            conc_ptr(c,j,s) = conc_ptr(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) *dtime
>                            conc_ptr(c,j,s) = conc_ptr(c,j,s) - diffus_gross_flux_up(c,j-1,s) / dzsoi_decomp(j) *dtime
>                            conc_ptr(c,j,s) = conc_ptr(c,j,s) + diffus_gross_flux_down(c,j-1,s) / dzsoi_decomp(j) *dtime
>                         end if
464a486,496
>                   if (i_type .eq. 1) then
>                     do fc = 1, num_soilc
>                      c = filter_soilc (fc)
>                      do j = 1, nlevdecomp
>                         !diffus_flux(c,j,s) = 0.0_r8
>                         diffus_gross_flux_up(c,j,s) = 0.0_r8
>                         diffus_gross_flux_down(c,j,s) = 0.0_r8
>                      end do
>                     end do
>                   end if
> 
468c500
<                         conc_trcr(c,j) = conc_ptr(c,j,s) + source(c,j,s)
---
>                         conc_ptr(c,j,s) = conc_ptr(c,j,s) + source(c,j,s)
474,479c506,660
<                do j = 1,nlevdecomp
<                   do fc = 1, num_soilc
<                      c = filter_soilc (fc)
<                      conc_ptr(c,j,s) = conc_trcr(c,j) 
<                   end do
<                end do
---
>                !do j = 1,nlevdecomp
>                !   do fc = 1, num_soilc
>                !      c = filter_soilc (fc)
>                !      conc_ptr(c,j,s) = conc_trcr(c,j)
>                !   end do
>                !end do
> 
>                if ( i_type .eq. 1 ) then
>                  if ( use_c13 ) then
>                      do fc = 1, num_soilc
>                        c = filter_soilc (fc)
>                        ! first update C13 pool with pool-to-pool flux
>                        do j = 1, nlevdecomp
>                           conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) + source_c13(c,j,s)
>                        end do
>                        ! second update C13 pool with diffusion flux
>                        do j = 1, nlevdecomp
>                           if (j==1) then
>                              ! no upper boundary flux
>                              ! only consider lower boundary flux
>                              !if (diffus_flux(c,j,s) >= 0._r8) then ! downwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j+1,s)*dtime
>                              !endif
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) + diffus_gross_flux_up(c,j,s) / dzsoi_decomp(j) * c13dens(c,j+1,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) * c13dens(c,j,s)*dtime
>                           else if (j==nlevdecomp) then
>                              ! upper boundary
>                              !if (diffus_flux(c,j-1,s) >= 0._r8) then !
>                              !downwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j-1,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j,s)*dtime
>                              !endif
>                              ! lower boundary, flux always goes out at the
>                              ! bottom layer
>                              !conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) -
>                              !diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !c13dens(c,j,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) * c13dens(c,j,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) - diffus_gross_flux_up(c,j-1,s) / dzsoi_decomp(j) * c13dens(c,j,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) + diffus_gross_flux_down(c,j-1,s) / dzsoi_decomp(j) * c13dens(c,j-1,s)*dtime
>                           else
>                              ! upper boundary
>                              !if (diffus_flux(c,j-1,s) >= 0._r8) then !
>                              !downwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j-1,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j,s)*dtime
>                              !endif
>                              ! lower boundary
>                              !if (diffus_flux(c,j,s) >= 0._r8) then ! downwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c13dens(c,j+1,s)*dtime
>                              !endif
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) + diffus_gross_flux_up(c,j,s) / dzsoi_decomp(j) * c13dens(c,j+1,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) * c13dens(c,j,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) - diffus_gross_flux_up(c,j-1,s) / dzsoi_decomp(j) * c13dens(c,j,s)*dtime
>                              conc_ptr_c13(c,j,s) = conc_ptr_c13(c,j,s) + diffus_gross_flux_down(c,j-1,s) / dzsoi_decomp(j) * c13dens(c,j-1,s)*dtime
>                           endif
>                        enddo
>                      end do
>                  end if
>                  if ( use_c14 ) then
>                      do fc = 1, num_soilc
>                        c = filter_soilc (fc)
>                        ! first update C14 pool with pool-to-pool flux
>                        do j = 1, nlevdecomp
>                           conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) + source_c14(c,j,s)
>                        end do
>                        ! second update C14 pool with diffusion flux
>                        do j = 1, nlevdecomp
>                           if (j==1) then
>                              ! no upper boundary flux
>                              ! only consider lower boundary flux
>                              !if (diffus_flux(c,j,s) >= 0._r8) then ! downwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j+1,s)*dtime
>                              !endif
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) + diffus_gross_flux_up(c,j,s) / dzsoi_decomp(j) * c14dens(c,j+1,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) * c14dens(c,j,s)*dtime
>                           else if (j==nlevdecomp) then
>                              ! upper boundary
>                              !if (diffus_flux(c,j-1,s) >= 0._r8) then !
>                              !downwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j-1,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j,s)*dtime
>                              !endif
>                              ! lower boundary, flux always goes out at the
>                              ! bottom layer
>                              !conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) -
>                              !diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !c14dens(c,j,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) * c14dens(c,j,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) - diffus_gross_flux_up(c,j-1,s) / dzsoi_decomp(j) * c14dens(c,j,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) + diffus_gross_flux_down(c,j-1,s) / dzsoi_decomp(j) * c14dens(c,j-1,s)*dtime
>                           else
>                              ! upper boundary
>                              !if (diffus_flux(c,j-1,s) >= 0._r8) then !
>                              !downwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j-1,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) +
>                              !   diffus_flux(c,j-1,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j,s)*dtime
>                              !endif
>                              ! lower boundary
>                              !if (diffus_flux(c,j,s) >= 0._r8) then ! downwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j,s)*dtime
>                              !else ! upwards
>                              !   conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) -
>                              !   diffus_flux(c,j,s) / dzsoi_decomp(j) *
>                              !   c14dens(c,j+1,s)*dtime
>                              !endif
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) + diffus_gross_flux_up(c,j,s) / dzsoi_decomp(j) * c14dens(c,j+1,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) - diffus_gross_flux_down(c,j,s) / dzsoi_decomp(j) * c14dens(c,j,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) - diffus_gross_flux_up(c,j-1,s) / dzsoi_decomp(j) * c14dens(c,j,s)*dtime
>                              conc_ptr_c14(c,j,s) = conc_ptr_c14(c,j,s) + diffus_gross_flux_down(c,j-1,s) / dzsoi_decomp(j) * c14dens(c,j-1,s)*dtime
>                           endif
>                        enddo
>                      end do
>                  end if
>                end if
485c666,667
<             !! for single level case, no transport; just update the fluxes calculated in the StateUpdate1 subroutines
---
>             !! for single level case, no transport; just update the fluxes
>             !calculated in the StateUpdate1 subroutines
497a680,683
>             
>             if ( use_c13 .or. use_c14 ) then
>                call endrun(msg='Error: can not run 13C/14C with use_vertsoilc=.False.') 
>             end if
501,502c687,688
<       end do  ! i_type
<    
---
>       end do  ! i_type   
> 
